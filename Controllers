using CampusCare.Models;
using CrystalDecisions.CrystalReports.Engine;
using CrystalDecisions.Shared;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Linq;
using System.Web;
using System.Web.Mvc;

namespace CampusCare.Controllers
{
    public class FeeReportController : CCWebController
    {
        Stream stream;
        string rptpath = "";
        string ReportID;
        object datasourcce = null;

        public ActionResult ReportDisplayToList(string param)
        {
            using (var reportclass = new ReportClass())
            {
                reportclass.FileName = rptpath;
                reportclass.Load();
                reportclass.DataDefinition.FormulaFields["UserCaption"].Text = param;
                reportclass.SetDataSource(datasourcce);
                stream = reportclass.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
            }
            return File(stream, "application/pdf");
        }

        public ActionResult FeeDisplayReports(int? id, string VirtualPath, string FileFormat, string Paper)
        {
            GC.Collect();
            ReportDocument reportdocument = null;
            ReportID = id.ToString();
            try
            {
                if (CheckSession()) { return RedirectToAction("Logon", "Logon"); }

                string Fee_Type = "";
                string Account_Type = "";
                string Receipt_Mode = "";
                string Pay_In = "";
                string Fee_Group = "";
                string Class_Section = "";
                string Report_Type = "";
                string Users = "";
                string Fee_Head = "";
                string FromDate = "";
                string ToDate = "";
                string AdmNo = "";
                string FeeNo = "";
                string Amount = "0";
                string Installment = "";
                string Concession_Type = "";
                string ParentType = "";
                string TransStatus = "";
                string TransationStatus = "";
                string Payment_Status = "";
                string Student_Status = "";
                string Activity_Type = "";
                string AdmissionType = "";
                string PayForFlag = "";
                int AcaStart = (int)Session["AcaStart"];
                int SchoolID = (int)Session["SchoolID"];
                int UID = (int)Session["UID"];
                string AmtType = "";


                if (Request.Cookies["AmtType"] != null)
                    AmtType = Request.Cookies["AmtType"].Value;

                if (Request.Cookies["Student_Status"] != null)
                    Student_Status = Request.Cookies["Student_Status"].Value;
                if (Request.Cookies["Fee_Type"] != null)
                    Fee_Type = Request.Cookies["Fee_Type"].Value;
                if (Request.Cookies["Account_Type"] != null)
                    Account_Type = Request.Cookies["Account_Type"].Value;
                if (Request.Cookies["Receipt_Mode"] != null)
                    Receipt_Mode = Request.Cookies["Receipt_Mode"].Value;
                if (Request.Cookies["Pay_In"] != null)
                    Pay_In = Request.Cookies["Pay_In"].Value;
                if (Request.Cookies["Fee_Group"] != null)
                    Fee_Group = Request.Cookies["Fee_Group"].Value;
                if (Request.Cookies["Class_Section"] != null)
                    Class_Section = Request.Cookies["Class_Section"].Value;
                if (Request.Cookies["Report_Type"] != null)
                    Report_Type = Request.Cookies["Report_Type"].Value;
                if (Request.Cookies["Users"] != null)
                    Users = Request.Cookies["Users"].Value;

                if (Request.Cookies["Fee_Head"] != null)
                    Fee_Head = Request.Cookies["Fee_Head"].Value;

                if (Request.Cookies["FromDate"] != null)
                    FromDate = Request.Cookies["FromDate"].Value;
                if (Request.Cookies["ToDate"] != null)
                    ToDate = Request.Cookies["ToDate"].Value;


                if (Request.Cookies["AdmNo"] != null)
                    AdmNo = Request.Cookies["AdmNo"].Value;
                if (Request.Cookies["FeeNo"] != null)
                    FeeNo = Request.Cookies["FeeNo"].Value;
                if (Request.Cookies["Amount"] != null)
                    Amount = Request.Cookies["Amount"].Value;
                if (Amount == "")
                    Amount = "0";

                if (Request.Cookies["Installment"] != null)
                    Installment = Request.Cookies["Installment"].Value;

                if (Request.Cookies["Concession_Type"] != null)
                    Concession_Type = Request.Cookies["Concession_Type"].Value;

                if (Request.Cookies["ParentType"] != null)
                    ParentType = Request.Cookies["ParentType"].Value;

                if (Request.Cookies["ParentType"] != null)
                    ParentType = Request.Cookies["ParentType"].Value;
                if (Request.Cookies["Transaction_Status"] != null)
                    TransStatus = Request.Cookies["Transaction_Status"].Value;

                if (Request.Cookies["AdmissionType"] != null)
                    AdmissionType = Request.Cookies["AdmissionType"].Value;

                if (TransStatus != "")
                {
                    string[] TransStr = TransStatus.Split(',');
                    for (int i = 0; i < TransStr.Length; i++)
                    {
                        TransationStatus = TransationStatus + "'" + TransStr[i] + "',";
                    }
                    if (TransationStatus.Length > 1)
                    {
                        TransationStatus = TransationStatus.Remove(TransationStatus.Length - 1);
                    }
                }

                if (Request.Cookies["Payment_Status"] != null)
                    Payment_Status = Request.Cookies["Payment_Status"].Value;

                if (Request.Cookies["Activity_Type"] != null)
                    Activity_Type = Request.Cookies["Activity_Type"].Value;


                if (Request.Cookies["PayForFlag"] != null)
                    PayForFlag = Request.Cookies["PayForFlag"].Value;

                switch (ReportID)
                {
                    case "1000":
                        reportdocument = new ReportDocument();
                        if (Receipt_Mode == "1")
                            reportdocument.Load(Server.MapPath("/FeeReport/crptStudentFeeCollectionCashSummary.rpt"));
                        else
                            reportdocument.Load(Server.MapPath("/FeeReport/crptStudentFeeCollectionSummary.rpt"));

                        reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                        reportdocument.SetParameterValue(0, AcaStart);
                        reportdocument.SetParameterValue(1, SchoolID);
                        reportdocument.SetParameterValue(2, Fee_Type);
                        reportdocument.SetParameterValue(3, Class_Section);
                        reportdocument.SetParameterValue(4, Report_Type);
                        reportdocument.SetParameterValue(5, Fee_Group);
                        reportdocument.SetParameterValue(6, Account_Type);
                        reportdocument.SetParameterValue(7, Pay_In);
                        reportdocument.SetParameterValue(8, Receipt_Mode);
                        reportdocument.SetParameterValue(9, ChangeYYYYMMDD(FromDate));
                        reportdocument.SetParameterValue(10, ChangeYYYYMMDD(ToDate));
                        reportdocument.SetParameterValue(11, Users);
                        reportdocument.SetParameterValue(12, "SFCS");
                        reportdocument.SetParameterValue(13, AdmissionType);

                        break;
                    case "1001":
                        reportdocument = new ReportDocument();
                        reportdocument.Load(Server.MapPath("/FeeReport/crptStudentFeeCollectionDetail.rpt"));
                        reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                        reportdocument.SetParameterValue(0, AcaStart);
                        reportdocument.SetParameterValue(1, SchoolID);
                        reportdocument.SetParameterValue(2, Fee_Type);
                        reportdocument.SetParameterValue(3, Class_Section);
                        reportdocument.SetParameterValue(4, Report_Type);
                        reportdocument.SetParameterValue(5, Fee_Group);
                        reportdocument.SetParameterValue(6, Account_Type);
                        reportdocument.SetParameterValue(7, Pay_In);
                        reportdocument.SetParameterValue(8, Receipt_Mode);
                        reportdocument.SetParameterValue(9, ChangeYYYYMMDD(FromDate));
                        reportdocument.SetParameterValue(10, ChangeYYYYMMDD(ToDate));
                        reportdocument.SetParameterValue(11, Users);
                        reportdocument.SetParameterValue(12, "SFCS");
                        reportdocument.SetParameterValue(13, AdmissionType);

                        break;

                    case "1002":
                        reportdocument = new ReportDocument();
                        reportdocument.Load(Server.MapPath("/FeeReport/crptFEEConcessionSummary.rpt"));
                        reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                        reportdocument.SetParameterValue(0, AcaStart);
                        reportdocument.SetParameterValue(1, SchoolID);
                        reportdocument.SetParameterValue(2, Class_Section);
                        reportdocument.SetParameterValue(3, Fee_Group);
                        reportdocument.SetParameterValue(4, ChangeYYYYMMDD(FromDate));
                        reportdocument.SetParameterValue(5, ChangeYYYYMMDD(ToDate));
                        reportdocument.SetParameterValue(6, Fee_Type);
                        reportdocument.SetParameterValue(7, "CD");
                        reportdocument.SetParameterValue(8, Pay_In);
                        reportdocument.SetParameterValue(9, Receipt_Mode);
                        reportdocument.SetParameterValue(10, Report_Type);
                        reportdocument.SetParameterValue(11, Account_Type);

                        break;

                    case "1003":
                        reportdocument = new ReportDocument();
                        reportdocument.Load(Server.MapPath("/FeeReport/crptFeeConcessionDetails.rpt"));
                        reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                        reportdocument.SetParameterValue(0, AcaStart);
                        reportdocument.SetParameterValue(1, SchoolID);
                        reportdocument.SetParameterValue(2, Class_Section);
                        reportdocument.SetParameterValue(3, Fee_Group);
                        reportdocument.SetParameterValue(4, ChangeYYYYMMDD(FromDate));
                        reportdocument.SetParameterValue(5, ChangeYYYYMMDD(ToDate));
                        reportdocument.SetParameterValue(6, Fee_Type);
                        reportdocument.SetParameterValue(7, "CD");
                        reportdocument.SetParameterValue(8, Pay_In);
                        reportdocument.SetParameterValue(9, Receipt_Mode);
                        reportdocument.SetParameterValue(10, Report_Type);
                        reportdocument.SetParameterValue(11, Account_Type);

                        break;

                    case "1004":
                        reportdocument = new ReportDocument();
                        reportdocument.Load(Server.MapPath("/FeeReport/crptFeeHeadWiseCollection.rpt"));
                        reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                        reportdocument.SetParameterValue(0, AcaStart);
                        reportdocument.SetParameterValue(1, SchoolID);
                        reportdocument.SetParameterValue(2, Fee_Type);
                        reportdocument.SetParameterValue(3, Class_Section);
                        reportdocument.SetParameterValue(4, Report_Type);
                        reportdocument.SetParameterValue(5, Fee_Group);
                        reportdocument.SetParameterValue(6, Account_Type);
                        reportdocument.SetParameterValue(7, Pay_In);
                        reportdocument.SetParameterValue(8, Receipt_Mode);
                        reportdocument.SetParameterValue(9, ChangeYYYYMMDD(FromDate));
                        reportdocument.SetParameterValue(10, ChangeYYYYMMDD(ToDate));
                        reportdocument.SetParameterValue(11, Fee_Head);
                        reportdocument.SetParameterValue(12, UID);

                        break;

                    case "1005":
                        reportdocument = new ReportDocument();
                        reportdocument.Load(Server.MapPath("/FeeReport/crptStudentLedgerStudentWise.rpt"));
                        reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                        reportdocument.SetParameterValue(0, SchoolID);
                        reportdocument.SetParameterValue(1, AcaStart);
                        reportdocument.SetParameterValue(2, db.SIStudentYearWiseDetails.Where(model => model.FeesNo == FeeNo).FirstOrDefault().StudID);

                        break;
                    case "1006":
                        reportdocument = new ReportDocument();
                        reportdocument.Load(Server.MapPath("/FeeReport/crptFeeChequeCollectionDetails.rpt"));
                        reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                        reportdocument.SetParameterValue(0, AcaStart);
                        reportdocument.SetParameterValue(1, SchoolID);
                        reportdocument.SetParameterValue(2, Class_Section);
                        reportdocument.SetParameterValue(3, Fee_Group);
                        reportdocument.SetParameterValue(4, ChangeYYYYMMDD(FromDate));
                        reportdocument.SetParameterValue(5, ChangeYYYYMMDD(ToDate));
                        reportdocument.SetParameterValue(6, Fee_Type);
                        reportdocument.SetParameterValue(7, "CC");
                        reportdocument.SetParameterValue(8, Pay_In);
                        reportdocument.SetParameterValue(9, 2);
                        reportdocument.SetParameterValue(10, Report_Type);
                        reportdocument.SetParameterValue(11, Account_Type);

                        break;

                    case "1007":
                        reportdocument = new ReportDocument();
                        reportdocument.Load(Server.MapPath("/FeeReport/crptFeeChequeBounceDetails.rpt"));
                        reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                        reportdocument.SetParameterValue(0, AcaStart);
                        reportdocument.SetParameterValue(1, SchoolID);
                        reportdocument.SetParameterValue(2, Class_Section);
                        reportdocument.SetParameterValue(3, Fee_Group);
                        reportdocument.SetParameterValue(4, ChangeYYYYMMDD(FromDate));
                        reportdocument.SetParameterValue(5, ChangeYYYYMMDD(ToDate));
                        reportdocument.SetParameterValue(6, Fee_Type);
                        reportdocument.SetParameterValue(7, "CB");
                        reportdocument.SetParameterValue(8, Pay_In);
                        reportdocument.SetParameterValue(9, Receipt_Mode);
                        reportdocument.SetParameterValue(10, Report_Type);
                        reportdocument.SetParameterValue(11, Account_Type);

                        break;

                    case "1008":
                        reportdocument = new ReportDocument();
                        reportdocument.Load(Server.MapPath("/FeeReport/crptFeeStudentWiseSummary.rpt"));
                        reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                        reportdocument.SetParameterValue(0, AcaStart);
                        reportdocument.SetParameterValue(1, SchoolID);
                        reportdocument.SetParameterValue(2, Fee_Type);
                        reportdocument.SetParameterValue(3, Class_Section);
                        reportdocument.SetParameterValue(4, Report_Type);
                        reportdocument.SetParameterValue(5, Fee_Group);
                        reportdocument.SetParameterValue(6, Account_Type);
                        reportdocument.SetParameterValue(7, Pay_In);
                        reportdocument.SetParameterValue(8, Receipt_Mode);
                        reportdocument.SetParameterValue(9, ChangeYYYYMMDD(FromDate));
                        reportdocument.SetParameterValue(10, ChangeYYYYMMDD(ToDate));
                        reportdocument.SetParameterValue(11, "");
                        reportdocument.SetParameterValue(12, "SFCS");
                        break;

                    case "1009":
                        reportdocument = new ReportDocument();
                        reportdocument.Load(Server.MapPath("/FeeReport/crptFeeDefaulterDetail.rpt"));
                        reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                        reportdocument.SetParameterValue(0, SchoolID);
                        reportdocument.SetParameterValue(1, AcaStart);
                        reportdocument.SetParameterValue(2, Fee_Type);
                        reportdocument.SetParameterValue(3, Class_Section);
                        reportdocument.SetParameterValue(4, Fee_Group);
                        reportdocument.SetParameterValue(5, Installment);
                        reportdocument.SetParameterValue(6, Account_Type);
                        reportdocument.SetParameterValue(7, ChangeYYYYMMDD(ToDate));
                        reportdocument.SetParameterValue(8, Student_Status);
                        reportdocument.SetParameterValue(9, Amount);
                        reportdocument.SetParameterValue(10, AmtType);

                        break;

                    case "1010":
                        reportdocument = new ReportDocument();
                        reportdocument.Load(Server.MapPath("/FeeReport/crptFeeDefaulterSummary.rpt"));
                        reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                        reportdocument.SetParameterValue(0, SchoolID);
                        reportdocument.SetParameterValue(1, AcaStart);
                        reportdocument.SetParameterValue(2, Fee_Type);
                        reportdocument.SetParameterValue(3, Class_Section);
                        reportdocument.SetParameterValue(4, Fee_Group);
                        reportdocument.SetParameterValue(5, Installment);
                        reportdocument.SetParameterValue(6, Account_Type);
                        reportdocument.SetParameterValue(7, ChangeYYYYMMDD(ToDate));
                        reportdocument.SetParameterValue(8, Student_Status);
                        reportdocument.SetParameterValue(9, Amount);
                        reportdocument.SetParameterValue(10, AmtType);

                        break;

                    case "1011":
                        reportdocument = new ReportDocument();
                        reportdocument.Load(Server.MapPath("/FeeReport/crptStudentWiseDetail.rpt"));
                        reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                        reportdocument.SetParameterValue(0, AcaStart);
                        reportdocument.SetParameterValue(1, SchoolID);
                        reportdocument.SetParameterValue(2, Fee_Type);
                        reportdocument.SetParameterValue(3, Class_Section);
                        reportdocument.SetParameterValue(4, Report_Type);
                        reportdocument.SetParameterValue(5, Fee_Group);
                        reportdocument.SetParameterValue(6, Account_Type);
                        reportdocument.SetParameterValue(7, Pay_In);
                        reportdocument.SetParameterValue(8, Receipt_Mode);
                        reportdocument.SetParameterValue(9, ChangeYYYYMMDD(FromDate));
                        reportdocument.SetParameterValue(10, ChangeYYYYMMDD(ToDate));
                        reportdocument.SetParameterValue(11, "");
                        reportdocument.SetParameterValue(12, "SFCS");

                        break;

                    case "1012":
                        reportdocument = new ReportDocument();
                        reportdocument.Load(Server.MapPath("/FeeReport/crptFeeInstallmentCollectionDetails.rpt"));
                        reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                        reportdocument.SetParameterValue(0, AcaStart);
                        reportdocument.SetParameterValue(1, SchoolID);
                        reportdocument.SetParameterValue(2, Class_Section);
                        reportdocument.SetParameterValue(3, Fee_Group);
                        reportdocument.SetParameterValue(4, ChangeYYYYMMDD(FromDate));
                        reportdocument.SetParameterValue(5, ChangeYYYYMMDD(ToDate));
                        reportdocument.SetParameterValue(6, Fee_Type);
                        reportdocument.SetParameterValue(7, Pay_In);
                        reportdocument.SetParameterValue(8, Receipt_Mode);
                        reportdocument.SetParameterValue(9, Report_Type);
                        reportdocument.SetParameterValue(10, Account_Type);
                        reportdocument.SetParameterValue(11, Installment);

                        break;

                    case "1013":
                        reportdocument = new ReportDocument();
                        reportdocument.Load(Server.MapPath("/FeeReport/crptFeeAdvanceCollection.rpt"));
                        reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                        reportdocument.SetParameterValue(0, AcaStart);
                        reportdocument.SetParameterValue(1, SchoolID);
                        reportdocument.SetParameterValue(2, Class_Section);
                        reportdocument.SetParameterValue(3, Fee_Group);
                        reportdocument.SetParameterValue(4, ChangeYYYYMMDD(FromDate));
                        reportdocument.SetParameterValue(5, ChangeYYYYMMDD(ToDate));
                        reportdocument.SetParameterValue(6, Fee_Type);
                        reportdocument.SetParameterValue(7, Pay_In);
                        reportdocument.SetParameterValue(8, Receipt_Mode);
                        reportdocument.SetParameterValue(9, Report_Type);
                        reportdocument.SetParameterValue(10, Account_Type);
                        reportdocument.SetParameterValue(11, Installment);

                        break;


                    case "1014":
                        if (Concession_Type != "")
                        {
                            string Concession_TypeName = "";
                            List<string> ctid = Concession_Type.Split(',').ToList();
                            List<string> Data = db.FEEConcessionTypeMasters.Where(model => model.SchoolID == SchoolID && ctid.Contains(model.AutoID.ToString())).Select(model => model.CTypeName).ToList();
                            //List<string> Data = (from FCT in db.FEEConcessionTypeMasters where FCT.SchoolID == SchoolID && Concession_Type.Split(',').Contains(FCT.AutoID.ToString()) select FCT.CTypeName).ToList();
                            foreach (string CTypeName in Data)
                            {
                                Concession_TypeName += "," + CTypeName;
                            }
                            VirtualPath += " of Concession Type (" + Concession_TypeName.Substring(1) + ""; //for Academic Session (" + AcaStart.ToString() + " - " + (AcaStart + 1).ToString() + ")";
                        }
                        else
                            VirtualPath += " of All Concession Type"; //for Academic Session (" + AcaStart.ToString() + " - " + (AcaStart + 1).ToString() + ")";

                        reportdocument = new ReportDocument();
                        reportdocument.Load(Server.MapPath("/FeeReport/crptFEEHeadWiseConcessionDetails.rpt"));
                        reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                        reportdocument.SetParameterValue(0, AcaStart);
                        reportdocument.SetParameterValue(1, SchoolID);
                        reportdocument.SetParameterValue(2, Class_Section);
                        reportdocument.SetParameterValue(3, Fee_Group);
                        reportdocument.SetParameterValue(4, Installment);
                        reportdocument.SetParameterValue(5, Concession_Type);

                        break;

                    case "1015":
                        reportdocument = new ReportDocument();
                        reportdocument.Load(Server.MapPath("/FeeReport/crptFeeComprehensiveStatement.rpt"));
                        reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                        reportdocument.SetParameterValue(0, AcaStart);
                        reportdocument.SetParameterValue(1, SchoolID);
                        reportdocument.SetParameterValue(2, Class_Section);
                        reportdocument.SetParameterValue(3, Fee_Group);
                        reportdocument.SetParameterValue(4, ChangeYYYYMMDD(FromDate));
                        reportdocument.SetParameterValue(5, ChangeYYYYMMDD(ToDate));
                        reportdocument.SetParameterValue(6, Fee_Type);
                        reportdocument.SetParameterValue(7, Pay_In);
                        reportdocument.SetParameterValue(8, Receipt_Mode);
                        reportdocument.SetParameterValue(9, Report_Type);
                        reportdocument.SetParameterValue(10, Account_Type);
                        reportdocument.SetParameterValue(11, Installment);

                        break;

                    case "1016":
                        reportdocument = new ReportDocument();
                        reportdocument.Load(Server.MapPath("/FeeReport/crptFeeStructure.rpt"));
                        reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                        if (Fee_Group != "")
                            reportdocument.RecordSelectionFormula = "{FEEGroupMaster.AcaStart}=" + AcaStart + " AND {FEEGroupMaster.SchoolID}=" + SchoolID + " AND {FEEGroupMaster.FeeGroupID} IN [" + Fee_Group + "]";
                        else
                            reportdocument.RecordSelectionFormula = "{FEEGroupMaster.AcaStart}=" + AcaStart + " AND {FEEGroupMaster.SchoolID}=" + SchoolID + "";
                        break;

                    case "1017":
                        if (Concession_Type != "")
                        {
                            string Concession_TypeName = "";
                            List<string> ctid = Concession_Type.Split(',').ToList();
                            List<string> Data = db.FEEConcessionTypeMasters.Where(model => model.SchoolID == SchoolID && ctid.Contains(model.AutoID.ToString())).Select(model => model.CTypeName).ToList();
                            //List<string> Data = (from FCT in db.FEEConcessionTypeMasters where FCT.SchoolID == SchoolID && Concession_Type.Split(',').Contains(FCT.AutoID.ToString()) select FCT.CTypeName).ToList();
                            foreach (string CTypeName in Data)
                            {
                                Concession_TypeName += "," + CTypeName;
                            }
                            VirtualPath += "of Concession Type (" + Concession_TypeName.Substring(1) + ") for Academic Session (" + AcaStart.ToString() + " - " + (AcaStart + 1).ToString() + ")";
                        }
                        else
                            VirtualPath += "of All Concession Type for Academic Session (" + AcaStart.ToString() + " - " + (AcaStart + 1).ToString() + ")";

                        reportdocument = new ReportDocument();
                        reportdocument.Load(Server.MapPath("/FeeReport/crptFEEMonthWiseConcessionDetails.rpt"));
                        reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                        reportdocument.SetParameterValue(0, AcaStart);
                        reportdocument.SetParameterValue(1, SchoolID);
                        reportdocument.SetParameterValue(2, Class_Section);
                        reportdocument.SetParameterValue(3, Fee_Group);
                        reportdocument.SetParameterValue(4, Installment);
                        reportdocument.SetParameterValue(5, Concession_Type);

                        break;

                    case "1018":
                        reportdocument = new ReportDocument();
                        reportdocument.Load(Server.MapPath("/FeeReport/crptFeeMonthWiseCollection.rpt"));
                        reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                        reportdocument.SetParameterValue(0, AcaStart);
                        reportdocument.SetParameterValue(1, SchoolID);
                        reportdocument.SetParameterValue(2, Class_Section);
                        reportdocument.SetParameterValue(3, Fee_Group);
                        reportdocument.SetParameterValue(4, ChangeYYYYMMDD(FromDate));
                        reportdocument.SetParameterValue(5, ChangeYYYYMMDD(ToDate));
                        reportdocument.SetParameterValue(6, Fee_Type);
                        reportdocument.SetParameterValue(7, Pay_In);
                        reportdocument.SetParameterValue(8, Receipt_Mode);
                        reportdocument.SetParameterValue(9, Report_Type);
                        reportdocument.SetParameterValue(10, Account_Type);

                        break;

                    case "1019":
                        reportdocument = new ReportDocument();
                        reportdocument.Load(Server.MapPath("/FeeReport/crptFeeMonthlyDayWiseCollection.rpt"));
                        reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                        reportdocument.SetParameterValue(0, AcaStart);
                        reportdocument.SetParameterValue(1, SchoolID);
                        reportdocument.SetParameterValue(2, Fee_Type);
                        reportdocument.SetParameterValue(3, Class_Section);
                        reportdocument.SetParameterValue(4, Report_Type);
                        reportdocument.SetParameterValue(5, Fee_Group);
                        reportdocument.SetParameterValue(6, Account_Type);
                        reportdocument.SetParameterValue(7, Pay_In);
                        reportdocument.SetParameterValue(8, Receipt_Mode);
                        reportdocument.SetParameterValue(9, ChangeYYYYMMDD(FromDate));
                        reportdocument.SetParameterValue(10, ChangeYYYYMMDD(ToDate));
                        reportdocument.SetParameterValue(11, UID);

                        break;

                    case "1020":
                        reportdocument = new ReportDocument();
                        reportdocument.Load(Server.MapPath("/FeeReport/crptFeeMultiYearCollection.rpt"));
                        reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                        reportdocument.SetParameterValue(0, AcaStart);
                        reportdocument.SetParameterValue(1, SchoolID);
                        reportdocument.SetParameterValue(2, Fee_Type);
                        reportdocument.SetParameterValue(3, Class_Section);
                        reportdocument.SetParameterValue(4, Report_Type);
                        reportdocument.SetParameterValue(5, Fee_Group);
                        reportdocument.SetParameterValue(6, Account_Type);
                        reportdocument.SetParameterValue(7, Pay_In);
                        reportdocument.SetParameterValue(8, Receipt_Mode);
                        reportdocument.SetParameterValue(9, ChangeYYYYMMDD(FromDate));
                        reportdocument.SetParameterValue(10, ChangeYYYYMMDD(ToDate));
                        reportdocument.SetParameterValue(11, UID);
                        reportdocument.SetParameterValue(12, "MUL");

                        break;

                    case "1021":
                        reportdocument = new ReportDocument();
                        reportdocument.Load(Server.MapPath("/FeeReport/crptFeeReconciliation.rpt"));
                        reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                        reportdocument.SetParameterValue(0, SchoolID);
                        reportdocument.SetParameterValue(1, AcaStart);
                        reportdocument.SetParameterValue(2, Fee_Type);
                        reportdocument.SetParameterValue(3, Class_Section);
                        reportdocument.SetParameterValue(4, Fee_Group);
                        reportdocument.SetParameterValue(5, Installment);
                        reportdocument.SetParameterValue(6, Account_Type);
                        reportdocument.SetParameterValue(7, "REC");
                        reportdocument.SetParameterValue(8, "");

                        break;

                    case "1022":
                        reportdocument = new ReportDocument();
                        reportdocument.Load(Server.MapPath("/FeeReport/crptFeeReconciliationSummary.rpt"));
                        reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                        reportdocument.SetParameterValue(0, SchoolID);
                        reportdocument.SetParameterValue(1, AcaStart);
                        reportdocument.SetParameterValue(2, Fee_Type);
                        reportdocument.SetParameterValue(3, Class_Section);
                        reportdocument.SetParameterValue(4, Fee_Group);
                        reportdocument.SetParameterValue(5, Installment);
                        reportdocument.SetParameterValue(6, Account_Type);
                        reportdocument.SetParameterValue(7, "REC");
                        reportdocument.SetParameterValue(8, "");

                        break;
                    case "1023":
                        reportdocument = new ReportDocument();
                        reportdocument.Load(Server.MapPath("/FeeReport/crptFeeReconciliationDetail.rpt"));
                        reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                        reportdocument.SetParameterValue(0, SchoolID);
                        reportdocument.SetParameterValue(1, AcaStart);
                        reportdocument.SetParameterValue(2, Fee_Type);
                        reportdocument.SetParameterValue(3, Class_Section);
                        reportdocument.SetParameterValue(4, Fee_Group);
                        reportdocument.SetParameterValue(5, Installment);
                        reportdocument.SetParameterValue(6, Account_Type);
                        reportdocument.SetParameterValue(7, "REC");
                        reportdocument.SetParameterValue(8, "");

                        break;

                    case "1025":
                        reportdocument = new ReportDocument();
                        reportdocument.Load(Server.MapPath("/FeeReport/crptFeeDefaulterLetter.rpt"));
                        reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                        reportdocument.SetParameterValue(0, SchoolID);
                        reportdocument.SetParameterValue(1, AcaStart);
                        reportdocument.SetParameterValue(2, Fee_Type);
                        reportdocument.SetParameterValue(3, Class_Section);
                        reportdocument.SetParameterValue(4, Fee_Group);
                        reportdocument.SetParameterValue(5, Installment);
                        reportdocument.SetParameterValue(6, Account_Type);
                        reportdocument.SetParameterValue(7, "");
                        reportdocument.SetParameterValue(8, "");

                        reportdocument.DataDefinition.FormulaFields["AcaStart"].Text = "'" + AcaStart.ToString() + " - " + (AcaStart + 1).ToString() + "'";
                        reportdocument.DataDefinition.FormulaFields["PrincipalName"].Text = "'" + db.MTInstitutionMasters.Where(model => model.AutoID == SchoolID).Select(model => model.PrincName).ToList()[0] + "'";

                        break;

                    case "1026":
                        reportdocument = new ReportDocument();
                        reportdocument.Load(Server.MapPath("/FeeReport/crptFeeCancellationSummary.rpt"));
                        reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                        reportdocument.SetParameterValue(0, AcaStart);
                        reportdocument.SetParameterValue(1, SchoolID);
                        reportdocument.SetParameterValue(2, Fee_Type);
                        reportdocument.SetParameterValue(3, Class_Section);
                        reportdocument.SetParameterValue(4, Report_Type);
                        reportdocument.SetParameterValue(5, Fee_Group);
                        reportdocument.SetParameterValue(6, Account_Type);
                        reportdocument.SetParameterValue(7, Pay_In);
                        reportdocument.SetParameterValue(8, Receipt_Mode);
                        reportdocument.SetParameterValue(9, ChangeYYYYMMDD(FromDate));
                        reportdocument.SetParameterValue(10, ChangeYYYYMMDD(ToDate));
                        reportdocument.SetParameterValue(11, UID);
                        reportdocument.SetParameterValue(12, "CSD");

                        break;

                    case "1027":
                        reportdocument = new ReportDocument();
                        reportdocument.Load(Server.MapPath("/FeeReport/crptParentFeeCollectionSummary.rpt"));
                        reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                        reportdocument.SetParameterValue(0, AcaStart);
                        reportdocument.SetParameterValue(1, SchoolID);
                        reportdocument.SetParameterValue(2, Fee_Type);
                        reportdocument.SetParameterValue(3, Class_Section);
                        reportdocument.SetParameterValue(4, Report_Type);
                        reportdocument.SetParameterValue(5, Fee_Group);
                        reportdocument.SetParameterValue(6, Account_Type);
                        reportdocument.SetParameterValue(7, Pay_In);
                        reportdocument.SetParameterValue(8, Receipt_Mode);
                        reportdocument.SetParameterValue(9, ChangeYYYYMMDD(FromDate));
                        reportdocument.SetParameterValue(10, ChangeYYYYMMDD(ToDate));
                        reportdocument.SetParameterValue(11, UID);
                        reportdocument.SetParameterValue(12, "PFCS");

                        break;

                    case "1028":
                        reportdocument = new ReportDocument();
                        reportdocument.Load(Server.MapPath("/FeeReport/crptParentFeeCollectionDetail.rpt"));
                        reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                        reportdocument.SetParameterValue(0, AcaStart);
                        reportdocument.SetParameterValue(1, SchoolID);
                        reportdocument.SetParameterValue(2, Fee_Type);
                        reportdocument.SetParameterValue(3, Class_Section);
                        reportdocument.SetParameterValue(4, Report_Type);
                        reportdocument.SetParameterValue(5, Fee_Group);
                        reportdocument.SetParameterValue(6, Account_Type);
                        reportdocument.SetParameterValue(7, Pay_In);
                        reportdocument.SetParameterValue(8, Receipt_Mode);
                        reportdocument.SetParameterValue(9, ChangeYYYYMMDD(FromDate));
                        reportdocument.SetParameterValue(10, ChangeYYYYMMDD(ToDate));
                        reportdocument.SetParameterValue(11, UID);
                        reportdocument.SetParameterValue(12, "PFCS");

                        break;

                    case "1029":
                        reportdocument = new ReportDocument();
                        reportdocument.Load(Server.MapPath("/FeeReport/crptFeeComprehensiveParentWise.rpt"));
                        reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                        reportdocument.SetParameterValue(0, AcaStart);
                        reportdocument.SetParameterValue(1, SchoolID);
                        reportdocument.SetParameterValue(2, Fee_Type);
                        reportdocument.SetParameterValue(3, Class_Section);
                        reportdocument.SetParameterValue(4, Report_Type);
                        reportdocument.SetParameterValue(5, Fee_Group);
                        reportdocument.SetParameterValue(6, Account_Type);
                        reportdocument.SetParameterValue(7, Pay_In);
                        reportdocument.SetParameterValue(8, Receipt_Mode);
                        reportdocument.SetParameterValue(9, ChangeYYYYMMDD(FromDate));
                        reportdocument.SetParameterValue(10, ChangeYYYYMMDD(ToDate));
                        reportdocument.SetParameterValue(11, UID);

                        break;

                    case "1030":
                        reportdocument = new ReportDocument();
                        reportdocument.Load(Server.MapPath("/FeeReport/crptFeeReconciliationParent.rpt"));
                        reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                        reportdocument.SetParameterValue(0, SchoolID);
                        reportdocument.SetParameterValue(1, AcaStart);
                        reportdocument.SetParameterValue(2, Fee_Type);
                        reportdocument.SetParameterValue(3, Class_Section);
                        reportdocument.SetParameterValue(4, Fee_Group);
                        reportdocument.SetParameterValue(5, Installment);
                        reportdocument.SetParameterValue(6, Account_Type);
                        reportdocument.SetParameterValue(7, "REC");

                        break;

                    case "1031":
                        reportdocument = new ReportDocument();
                        reportdocument.Load(Server.MapPath("/FeeReport/crptFeeDefaulterDetailParentWise.rpt"));
                        reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                        reportdocument.SetParameterValue(0, SchoolID);
                        reportdocument.SetParameterValue(1, AcaStart);
                        reportdocument.SetParameterValue(2, Fee_Type);
                        reportdocument.SetParameterValue(3, Class_Section);
                        reportdocument.SetParameterValue(4, Fee_Group);
                        reportdocument.SetParameterValue(5, Installment);
                        reportdocument.SetParameterValue(6, Account_Type);

                        break;

                    case "1032":
                        reportdocument = new ReportDocument();
                        reportdocument.Load(Server.MapPath("/FeeReport/crptFeeDefaulterSummaryParentWise.rpt"));
                        reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                        reportdocument.SetParameterValue(0, SchoolID);
                        reportdocument.SetParameterValue(1, AcaStart);
                        reportdocument.SetParameterValue(2, Fee_Type);
                        reportdocument.SetParameterValue(3, Class_Section);
                        reportdocument.SetParameterValue(4, Fee_Group);
                        reportdocument.SetParameterValue(5, Installment);
                        reportdocument.SetParameterValue(6, Account_Type);

                        break;

                    case "1033":
                        reportdocument = new ReportDocument();
                        reportdocument.Load(Server.MapPath("/FeeReport/crptFeeConcessionTypeSummary.rpt"));
                        reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                        reportdocument.SetParameterValue(0, SchoolID);
                        reportdocument.SetParameterValue(1, AcaStart);
                        reportdocument.SetParameterValue(2, Fee_Type);
                        reportdocument.SetParameterValue(3, Class_Section);
                        reportdocument.SetParameterValue(4, Fee_Group);
                        reportdocument.SetParameterValue(5, Account_Type);

                        break;


                    case "1037":
                        reportdocument = new ReportDocument();
                        var ReportName = (from FY in db.FEEYearlySettings
                                          join RS in db.MTReportSettingMasters on FY.TuitionCertID equals RS.AutoID
                                          where FY.AcaStart == AcaStart && FY.SchoolID == SchoolID && RS.CertficateName == "TuitionFeeCertificate"
                                          select new { RS.LinkingReport }
                            ).FirstOrDefault();
                        reportdocument.Load(Server.MapPath("/FeeReport/" + ReportName.LinkingReport.ToString() + ".rpt"));
                        reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                        reportdocument.SetParameterValue(0, FeeNo);
                        reportdocument.SetParameterValue(1, AcaStart);
                        reportdocument.SetParameterValue(2, SchoolID);
                        reportdocument.SetParameterValue(3, Fee_Group);
                        reportdocument.SetParameterValue(4, Class_Section);

                        reportdocument.DataDefinition.FormulaFields["Date"].Text = "'" + Convert.ToDateTime(DateTime.Now, cinfo).ToString("dd/MM/yyyy") + "'";
                        reportdocument.DataDefinition.FormulaFields["AcaStart"].Text = "'" + AcaStart.ToString() + "'";
                        reportdocument.DataDefinition.FormulaFields["AcaSession"].Text = "'" + AcaStart.ToString() + " - " + (AcaStart + 1).ToString() + "'";
                        reportdocument.DataDefinition.FormulaFields["Parent"].Text = "'" + ParentType + "'";
                        reportdocument.DataDefinition.FormulaFields["ImagePath"].Text = "'" + Server.MapPath("/Images") + "'";

                        break;
                    // This Report Deleted according to Atul Sir
                    //case "1038":
                    //    int InstallmentCount;
                    //    if (Installment != "")
                    //    {
                    //        List<string> FIIDs = Installment.Split(',').ToList();
                    //        InstallmentCount = db.FEEInstallmentMasters.Where(model => model.AcaStart == AcaStart && model.SchoolID == SchoolID && FIIDs.Contains(model.AutoID.ToString())).Count();
                    //        string InstallmentName = db.FEEInstallmentMasters.Where(model => model.AcaStart == AcaStart && model.SchoolID == SchoolID && FIIDs.Contains(model.AutoID.ToString())).OrderBy(model => model.AutoID).Take(1).Select(model => model.FIName).ToList()[0].ToString() + " - " + db.FEEInstallmentMasters.Where(model => model.AcaStart == AcaStart && model.SchoolID == SchoolID && FIIDs.Contains(model.AutoID.ToString())).OrderByDescending(model => model.AutoID).Take(1).Select(model => model.FIName).ToList()[0].ToString();

                    //        VirtualPath += " for Installment (" + InstallmentName + ") and Academic Session (" + AcaStart.ToString() + " - " + (AcaStart + 1).ToString() + ")";
                    //    }
                    //    else
                    //    {
                    //        InstallmentCount = db.FEEInstallmentMasters.Where(model => model.AcaStart == AcaStart && model.SchoolID == SchoolID).Count();
                    //        string InstallmentName = db.FEEInstallmentMasters.Where(model => model.AcaStart == AcaStart && model.SchoolID == SchoolID).OrderBy(model => model.AutoID).Take(1).Select(model => model.FIName).ToList()[0].ToString() + " - " + db.FEEInstallmentMasters.Where(model => model.AcaStart == AcaStart && model.SchoolID == SchoolID).OrderByDescending(model => model.AutoID).Take(1).Select(model => model.FIName).ToList()[0].ToString();

                    //        VirtualPath += " for Installment (" + InstallmentName + ") and Academic Session (" + AcaStart.ToString() + " - " + (AcaStart + 1).ToString() + ")";
                    //    }
                    //    reportdocument = new ReportDocument();
                    //    reportdocument.Load(Server.MapPath("/FeeReport/crptDefaulterInstallment.rpt"));

                    //    reportdocument.SetParameterValue(0, SchoolID);
                    //    reportdocument.SetParameterValue(1, AcaStart);
                    //    reportdocument.SetParameterValue(2, Fee_Type);
                    //    reportdocument.SetParameterValue(3, Class_Section);
                    //    reportdocument.SetParameterValue(4, Fee_Group);
                    //    reportdocument.SetParameterValue(5, Installment);
                    //    reportdocument.SetParameterValue(6, Account_Type);
                    //    reportdocument.SetParameterValue(7, Fee_Head);
                    //    reportdocument.SetParameterValue(8, InstallmentCount);
                    //    reportdocument.SetParameterValue(9, SchoolID);


                    //    break;

                    case "1039":
                        reportdocument = new ReportDocument();
                        reportdocument.Load(Server.MapPath("/FeeReport/crptStudentLedgerReport.rpt"));
                        reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                        reportdocument.SetParameterValue(0, SchoolID);
                        reportdocument.SetParameterValue(1, AcaStart);
                        reportdocument.SetParameterValue(2, Class_Section);
                        reportdocument.SetParameterValue(3, Fee_Group);

                        break;

                    case "1040":
                        reportdocument = new ReportDocument();
                        reportdocument.Load(Server.MapPath("/FeeReport/crptHeadWiseRecon.rpt"));
                        reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                        reportdocument.SetParameterValue(0, SchoolID);
                        reportdocument.SetParameterValue(1, AcaStart);

                        break;

                    case "1041":
                        if (Concession_Type != "")
                        {
                            string Concession_TypeName = "";
                            List<string> ctid = Concession_Type.Split(',').ToList();
                            List<string> Data = db.FEEConcessionTypeMasters.Where(model => model.SchoolID == SchoolID && ctid.Contains(model.AutoID.ToString())).Select(model => model.CTypeName).ToList();
                            //List<string> Data = (from FCT in db.FEEConcessionTypeMasters where FCT.SchoolID == SchoolID && Concession_Type.Split(',').Contains(FCT.AutoID.ToString()) select FCT.CTypeName).ToList();
                            foreach (string CTypeName in Data)
                            {
                                Concession_TypeName += "," + CTypeName;
                            }
                            VirtualPath += " of Concession Type (" + Concession_TypeName.Substring(1) + ")";
                        }
                        else
                            VirtualPath += " of All Concession Type";
                        ////////////////////////////////////////////////////////////
                        reportdocument = new ReportDocument();
                        reportdocument.Load(Server.MapPath("/FeeReport/crptFeeConcessionDetailsList.rpt"));
                        reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                        reportdocument.SetParameterValue(0, AcaStart);
                        reportdocument.SetParameterValue(1, SchoolID);
                        reportdocument.SetParameterValue(2, Class_Section);
                        reportdocument.SetParameterValue(3, Fee_Group);
                        reportdocument.SetParameterValue(4, Installment);
                        reportdocument.SetParameterValue(5, Concession_Type);

                        break;

                    case "1042":
                        reportdocument = new ReportDocument();
                        reportdocument.Load(Server.MapPath("/FeeReport/crptStudentWiseExcessAmountDetails.rpt"));
                        reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                        reportdocument.SetParameterValue(0, AcaStart);
                        reportdocument.SetParameterValue(1, SchoolID);
                        reportdocument.SetParameterValue(2, ChangeYYYYMMDD(FromDate));
                        reportdocument.SetParameterValue(3, ChangeYYYYMMDD(ToDate));
                        reportdocument.SetParameterValue(4, Class_Section);
                        reportdocument.SetParameterValue(5, Fee_Group);
                        reportdocument.SetParameterValue(6, Installment);

                        break;

                    case "1043":
                        reportdocument = new ReportDocument();
                        reportdocument.Load(Server.MapPath("/FeeReport/crptSecurityDeposit.rpt"));
                        reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                        reportdocument.SetParameterValue(0, AcaStart);
                        reportdocument.SetParameterValue(1, SchoolID);
                        reportdocument.SetParameterValue(2, Class_Section);
                        reportdocument.SetParameterValue(3, Fee_Group);
                        reportdocument.SetParameterValue(4, ChangeYYYYMMDD(FromDate));
                        reportdocument.SetParameterValue(5, ChangeYYYYMMDD(ToDate));

                        break;

                    case "1044":
                        reportdocument = new ReportDocument();
                        reportdocument.Load(Server.MapPath("/FeeReport/crprFeeFixedAmount.rpt"));
                        reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                        reportdocument.SetParameterValue(0, AcaStart);
                        reportdocument.SetParameterValue(1, SchoolID);
                        reportdocument.SetParameterValue(2, Class_Section);
                        reportdocument.SetParameterValue(3, ChangeYYYYMMDD(FromDate));
                        reportdocument.SetParameterValue(4, ChangeYYYYMMDD(ToDate));
                        reportdocument.SetParameterValue(5, Installment);

                        break;

                    case "1045":
                        reportdocument = new ReportDocument();
                        reportdocument.Load(Server.MapPath("/FeeReport/FeeFixedAmountSummary.rpt"));
                        reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                        reportdocument.SetParameterValue(0, AcaStart);
                        reportdocument.SetParameterValue(1, SchoolID);
                        reportdocument.SetParameterValue(2, Class_Section);
                        reportdocument.SetParameterValue(3, ChangeYYYYMMDD(FromDate));
                        reportdocument.SetParameterValue(4, ChangeYYYYMMDD(ToDate));
                        reportdocument.SetParameterValue(5, Installment);

                        break;

                    case "1050":
                        reportdocument = new ReportDocument();
                        reportdocument.Load(Server.MapPath("/FeeReport/crptOnlineTransaction.rpt"));
                        reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                        reportdocument.SetParameterValue(0, AcaStart);
                        reportdocument.SetParameterValue(1, SchoolID);
                        reportdocument.SetParameterValue(2, ChangeYYYYMMDD(FromDate));
                        reportdocument.SetParameterValue(3, ChangeYYYYMMDD(ToDate));
                        reportdocument.SetParameterValue(4, TransationStatus);
                        reportdocument.SetParameterValue(5, PayForFlag);
                        reportdocument.SetParameterValue(6, SchoolID);

                        break;

                    case "1051":
                        reportdocument = new ReportDocument();
                        reportdocument.Load(Server.MapPath("/FeeReport/crptOnlinePay.rpt"));
                        reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                        reportdocument.SetParameterValue(0, ChangeYYYYMMDD(FromDate));
                        reportdocument.SetParameterValue(1, ChangeYYYYMMDD(ToDate));
                        reportdocument.SetParameterValue(2, AcaStart);
                        reportdocument.SetParameterValue(3, SchoolID);
                        reportdocument.SetParameterValue(4, SchoolID);

                        break;


                    case "1057":
                        reportdocument = new ReportDocument();
                        reportdocument.Load(Server.MapPath("/FeeReport/crptFeeHeadWiseCollectionConcession.rpt"));
                        reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                        reportdocument.SetParameterValue(0, AcaStart);
                        reportdocument.SetParameterValue(1, SchoolID);
                        reportdocument.SetParameterValue(2, ChangeYYYYMMDD(FromDate));
                        reportdocument.SetParameterValue(3, ChangeYYYYMMDD(ToDate));
                        reportdocument.SetParameterValue(4, Class_Section);
                        reportdocument.SetParameterValue(5, Fee_Group);
                        reportdocument.SetParameterValue(6, Fee_Type);
                        reportdocument.SetParameterValue(7, Pay_In);
                        reportdocument.SetParameterValue(8, Account_Type);
                        reportdocument.SetParameterValue(9, Fee_Head);

                        break;
                    case "1058":
                        reportdocument = new ReportDocument();
                        reportdocument.Load(Server.MapPath("/FeeReport/crptFeeCollectionDetail.rpt"));
                        reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                        reportdocument.SetParameterValue(0, Installment);
                        reportdocument.SetParameterValue(1, Amount);
                        reportdocument.SetParameterValue(2, AcaStart);
                        reportdocument.SetParameterValue(3, SchoolID);
                        reportdocument.SetParameterValue(4, Fee_Group);
                        reportdocument.SetParameterValue(5, Class_Section);

                        break;


                    case "1059":
                        reportdocument = new ReportDocument();
                        reportdocument.Load(Server.MapPath("/FeeReport/crptFeeRefundSummary.rpt"));
                        reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                        reportdocument.SetParameterValue(0, AcaStart);
                        reportdocument.SetParameterValue(1, SchoolID);
                        reportdocument.SetParameterValue(2, Class_Section);
                        reportdocument.SetParameterValue(3, Fee_Group);
                        reportdocument.SetParameterValue(4, ChangeYYYYMMDD(FromDate));
                        reportdocument.SetParameterValue(5, ChangeYYYYMMDD(ToDate));
                        reportdocument.SetParameterValue(6, Installment);
                        //reportdocument.SetParameterValue(7, SchoolID);

                        break;

                    case "1060":
                        reportdocument = new ReportDocument();
                        reportdocument.Load(Server.MapPath("/FeeReport/crptFeeRefundDetails.rpt"));
                        reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                        reportdocument.SetParameterValue(0, AcaStart);
                        reportdocument.SetParameterValue(1, SchoolID);
                        reportdocument.SetParameterValue(2, Class_Section);
                        reportdocument.SetParameterValue(3, Fee_Group);
                        reportdocument.SetParameterValue(4, ChangeYYYYMMDD(FromDate));
                        reportdocument.SetParameterValue(5, ChangeYYYYMMDD(ToDate));
                        reportdocument.SetParameterValue(6, Installment);
                        //reportdocument.SetParameterValue(7, SchoolID);

                        break;

                    case "1061":
                        reportdocument = new ReportDocument();
                        reportdocument.Load(Server.MapPath("/FeeReport/crptFeeDeleted.rpt"));
                        reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                        reportdocument.SetParameterValue(0, ChangeYYYYMMDD(FromDate));
                        reportdocument.SetParameterValue(1, ChangeYYYYMMDD(ToDate));
                        reportdocument.SetParameterValue(2, AcaStart);
                        reportdocument.SetParameterValue(3, SchoolID);
                        reportdocument.SetParameterValue(4, SchoolID);

                        break;


                    case "1064":
                        reportdocument = new ReportDocument();
                        reportdocument.Load(Server.MapPath("/FeeReport/crptOnlinePaySettled.rpt"));
                        reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                        reportdocument.SetParameterValue(0, AcaStart);
                        reportdocument.SetParameterValue(1, SchoolID);
                        reportdocument.SetParameterValue(2, Payment_Status);
                        reportdocument.SetParameterValue(3, ChangeYYYYMMDD(FromDate));
                        reportdocument.SetParameterValue(4, ChangeYYYYMMDD(ToDate));
                        reportdocument.SetParameterValue(5, SchoolID);

                        break;


                    case "1065":
                        if (Concession_Type != "")
                        {
                            string Concession_TypeName = "";
                            List<string> ctid = Concession_Type.Split(',').ToList();
                            List<string> Data = db.FEEConcessionTypeMasters.Where(model => model.SchoolID == SchoolID && ctid.Contains(model.AutoID.ToString())).Select(model => model.CTypeName).ToList();
                            //List<string> Data = (from FCT in db.FEEConcessionTypeMasters where FCT.SchoolID == SchoolID && Concession_Type.Split(',').Contains(FCT.AutoID.ToString()) select FCT.CTypeName).ToList();
                            foreach (string CTypeName in Data)
                            {
                                Concession_TypeName += "," + CTypeName;
                            }
                            VirtualPath += " of Concession Type (" + Concession_TypeName.Substring(1) + ""; //for Academic Session (" + AcaStart.ToString() + " - " + (AcaStart + 1).ToString() + ")";
                        }
                        else
                            VirtualPath += " of All Concession Type"; //for Academic Session (" + AcaStart.ToString() + " - " + (AcaStart + 1).ToString() + ")";

                        reportdocument = new ReportDocument();
                        reportdocument.Load(Server.MapPath("/FeeReport/crptFEEFullConcessionDetails.rpt"));
                        reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                        reportdocument.SetParameterValue(0, AcaStart);
                        reportdocument.SetParameterValue(1, SchoolID);
                        reportdocument.SetParameterValue(2, Class_Section);
                        reportdocument.SetParameterValue(3, Fee_Group);
                        reportdocument.SetParameterValue(4, Installment);
                        reportdocument.SetParameterValue(5, Concession_Type);

                        break;

                    case "1066":
                        reportdocument = new ReportDocument();
                        reportdocument.Load(Server.MapPath("/FeeReport/crptFeeReceiptGroupCollection.rpt"));
                        reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                        reportdocument.SetParameterValue(0, AcaStart);
                        reportdocument.SetParameterValue(1, SchoolID);
                        reportdocument.SetParameterValue(2, Fee_Type);
                        reportdocument.SetParameterValue(3, Class_Section);
                        reportdocument.SetParameterValue(4, Report_Type);
                        reportdocument.SetParameterValue(5, Fee_Group);
                        reportdocument.SetParameterValue(6, Account_Type);
                        reportdocument.SetParameterValue(7, Pay_In);
                        reportdocument.SetParameterValue(8, Receipt_Mode);
                        reportdocument.SetParameterValue(9, ChangeYYYYMMDD(FromDate));
                        reportdocument.SetParameterValue(10, ChangeYYYYMMDD(ToDate));
                        reportdocument.SetParameterValue(11, Users);


                        break;
                    case "1067":
                        reportdocument = new ReportDocument();
                        reportdocument.Load(Server.MapPath("/FeeReport/crptFeeChequeBounceDetails.rpt"));
                        reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                        reportdocument.SetParameterValue(0, AcaStart);
                        reportdocument.SetParameterValue(1, SchoolID);
                        reportdocument.SetParameterValue(2, Class_Section);
                        reportdocument.SetParameterValue(3, Fee_Group);
                        reportdocument.SetParameterValue(4, ChangeYYYYMMDD(FromDate));
                        reportdocument.SetParameterValue(5, ChangeYYYYMMDD(ToDate));
                        reportdocument.SetParameterValue(6, Fee_Type);
                        reportdocument.SetParameterValue(7, "CCB");
                        reportdocument.SetParameterValue(8, Pay_In);
                        reportdocument.SetParameterValue(9, Receipt_Mode);
                        reportdocument.SetParameterValue(10, Report_Type);
                        reportdocument.SetParameterValue(11, Account_Type);

                        break;
                    case "1068":
                        reportdocument = new ReportDocument();
                        reportdocument.Load(Server.MapPath("/FeeReport/crptFeeClasswiseMonthlyFeeStatus.rpt"));
                        reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                        reportdocument.SetParameterValue(0, AcaStart);
                        reportdocument.SetParameterValue(1, SchoolID);
                        reportdocument.SetParameterValue(2, Fee_Type);
                        reportdocument.SetParameterValue(3, Class_Section);
                        reportdocument.SetParameterValue(4, Fee_Group);
                        reportdocument.SetParameterValue(5, Account_Type);
                        reportdocument.SetParameterValue(6, Receipt_Mode);
                        reportdocument.SetParameterValue(7, ChangeYYYYMMDD(FromDate));
                        reportdocument.SetParameterValue(8, ChangeYYYYMMDD(ToDate));
                        reportdocument.SetParameterValue(9, Student_Status);
                        reportdocument.SetParameterValue(10, Fee_Head);

                        break;
                    case "1069":
                        reportdocument = new ReportDocument();
                        reportdocument.Load(Server.MapPath("/FeeReport/crptFeeActivityReport.rpt"));
                        reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                        reportdocument.SetParameterValue(0, AcaStart);
                        reportdocument.SetParameterValue(1, SchoolID);
                        reportdocument.SetParameterValue(2, Class_Section);
                        reportdocument.SetParameterValue(3, Fee_Group);
                        reportdocument.SetParameterValue(4, Activity_Type);
                        reportdocument.SetParameterValue(5, Installment);
                        reportdocument.SetParameterValue(6, SchoolID);

                        break;


                    case "1070":
                        reportdocument = new ReportDocument();
                        reportdocument.Load(Server.MapPath("/FeeReport/crptFeeFullDefaulterList.rpt"));
                        reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                        reportdocument.SetParameterValue(0, SchoolID);
                        reportdocument.SetParameterValue(1, AcaStart);
                        reportdocument.SetParameterValue(2, Class_Section);
                        reportdocument.SetParameterValue(3, Fee_Group);
                        reportdocument.SetParameterValue(4, Installment);
                        break;
                    case "1071":
                        reportdocument = new ReportDocument();
                        reportdocument.Load(Server.MapPath("/FeeReport/crptFeePayModeWiseDetail.rpt"));
                        reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                        reportdocument.SetParameterValue(0, AcaStart);
                        reportdocument.SetParameterValue(1, SchoolID);
                        reportdocument.SetParameterValue(2, Receipt_Mode);
                        reportdocument.SetParameterValue(3, ChangeYYYYMMDD(FromDate));
                        reportdocument.SetParameterValue(4, ChangeYYYYMMDD(ToDate));
                        break;
                    case "1072":
                        reportdocument = new ReportDocument();
                        reportdocument.Load(Server.MapPath("/FeeReport/crptNoDuesCertificate.rpt"));
                        reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                        reportdocument.SetParameterValue(0, AcaStart);
                        reportdocument.SetParameterValue(1, SchoolID);
                        reportdocument.SetParameterValue(2, AdmNo);
                        reportdocument.SetParameterValue(3, Class_Section);
                        reportdocument.SetParameterValue(4, Fee_Group);
                        break;
                    case "1073":
                        reportdocument = new ReportDocument();
                        reportdocument.Load(Server.MapPath("/FeeReport/crptFeeDefaulterList.rpt"));
                        reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                        reportdocument.SetParameterValue(0, SchoolID);
                        reportdocument.SetParameterValue(1, AcaStart);
                        reportdocument.SetParameterValue(2, Fee_Type);
                        reportdocument.SetParameterValue(3, Class_Section);
                        reportdocument.SetParameterValue(4, Fee_Group);
                        reportdocument.SetParameterValue(5, Installment);
                        reportdocument.SetParameterValue(6, Account_Type);
                        reportdocument.SetParameterValue(7, ChangeYYYYMMDD(ToDate));
                        reportdocument.SetParameterValue(8, Student_Status);
                        reportdocument.SetParameterValue(9, Amount);
                        reportdocument.SetParameterValue(10, AmtType);
                        break;
                    case "1074":
                        reportdocument = new ReportDocument();
                        reportdocument.Load(Server.MapPath("/FeeReport/crptFeeDefaulterSummaryII.rpt"));
                        reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                        reportdocument.SetParameterValue(0, SchoolID);
                        reportdocument.SetParameterValue(1, AcaStart);
                        reportdocument.SetParameterValue(2, Fee_Type);
                        reportdocument.SetParameterValue(3, Class_Section);
                        reportdocument.SetParameterValue(4, Fee_Group);
                        reportdocument.SetParameterValue(5, Installment);
                        reportdocument.SetParameterValue(6, Account_Type);
                        reportdocument.SetParameterValue(7, ChangeYYYYMMDD(ToDate));
                        reportdocument.SetParameterValue(8, Student_Status);
                        reportdocument.SetParameterValue(9, "");
                        break;
                    case "1075":
                        reportdocument = new ReportDocument();
                        reportdocument.Load(Server.MapPath("/FeeReport/crptStudentFeeBook.rpt"));
                        reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                        reportdocument.SetParameterValue(0, AcaStart);
                        reportdocument.SetParameterValue(1, SchoolID);
                        reportdocument.SetParameterValue(2, Fee_Type);
                        reportdocument.SetParameterValue(3, Class_Section);
                        reportdocument.SetParameterValue(4, Report_Type);
                        reportdocument.SetParameterValue(5, Fee_Group);
                        reportdocument.SetParameterValue(6, Account_Type);
                        reportdocument.SetParameterValue(7, Pay_In);
                        reportdocument.SetParameterValue(8, Receipt_Mode);
                        reportdocument.SetParameterValue(9, ChangeYYYYMMDD(FromDate));
                        reportdocument.SetParameterValue(10, ChangeYYYYMMDD(ToDate));
                        reportdocument.SetParameterValue(11, Users);
                        reportdocument.SetParameterValue(12, "SFCS");

                        break;
                    default:
                        return View();
                }
                if (ReportID != "1037" && ReportID != "1025")
                {
                    string[] result = GetReportHeader();
                    if ((VirtualPath + result[0] + result[1]).Length > 190)
                        VirtualPath += result[0] + " for Academic Session (" + AcaStart.ToString() + " - " + (AcaStart + 1).ToString() + ")";
                    else
                        VirtualPath += result[0] + result[1] + " for Academic Session (" + AcaStart.ToString() + " - " + (AcaStart + 1).ToString() + ")";
                    reportdocument.DataDefinition.FormulaFields["UserCaption"].Text = "'" + VirtualPath.Replace("'", "\"") + "'";
                }
                if (finformula(reportdocument, "UserName"))
                    reportdocument.DataDefinition.FormulaFields["UserName"].Text = "'" + db.MTUserMasters.Find(UID).UserName + "'";
                if (finformula(reportdocument, "AdmNo"))
                    reportdocument.DataDefinition.FormulaFields["AdmNo"].Text = "'Adm No.'";

                //Start Work for Parameter of All Header Sub Reports

                if (ReportID != "1050" && ReportID != "1051" && ReportID != "1061" && ReportID != "1064" && ReportID != "1069" && ReportID != "1072")
                {
                    int pcount = reportdocument.ParameterFields.Count;
                    if (ReportID == "1005")
                    {
                        reportdocument.SetParameterValue(pcount - 3, SchoolID);
                        reportdocument.SetParameterValue(pcount - 2, 0);
                    }
                    else
                    {
                        reportdocument.SetParameterValue(pcount - 2, SchoolID);
                        if (Account_Type != "" && Account_Type.IndexOf(',') < 0)
                            reportdocument.SetParameterValue(pcount - 1, Account_Type);
                        else
                            reportdocument.SetParameterValue(pcount - 1, 0);
                    }
                }
                //End Work Parameter of All Header Sub Reports
                return GetFileFormat(FileFormat, VirtualPath, reportdocument, stream, Paper);
            }
            finally
            {
                reportdocument.Close();
                reportdocument.Dispose();
                GC.Collect();
            }
        }






        public ActionResult PettyDisplayReports(int? id, string VirtualPath, string FileFormat)
        {
            GC.Collect();
            ReportID = id.ToString();
            if (CheckSession()) { return RedirectToAction("Logon", "Logon"); }
            ReportDocument reportdocument;
            string Class = "";
            string Users = "";
            string Petty_Head = "";
            string FromDate = "";
            string ToDate = "";
            int AcaStart = (int)Session["AcaStart"];
            int SchoolID = (int)Session["SchoolID"];
            int UID = (int)Session["UID"];

            if (Request.Cookies["Users"] != null)
                Users = Request.Cookies["Users"].Value;
            if (Request.Cookies["Petty_Head"] != null)
                Petty_Head = Request.Cookies["Petty_Head"].Value;
            if (Request.Cookies["FromDate"] != null)
                FromDate = Request.Cookies["FromDate"].Value;
            if (Request.Cookies["ToDate"] != null)
                ToDate = Request.Cookies["ToDate"].Value;
            if (Request.Cookies["Class"] != null)
                Class = Request.Cookies["Class"].Value;

            switch (ReportID)
            {
                case "1034":
                    reportdocument = new ReportDocument();
                    reportdocument.Load(Server.MapPath("/FeeReport/crptFeePettyCollectionSummary.rpt"));
                    reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                    reportdocument.SetParameterValue(0, AcaStart);
                    reportdocument.SetParameterValue(1, SchoolID);
                    reportdocument.SetParameterValue(2, ChangeYYYYMMDD(FromDate));
                    reportdocument.SetParameterValue(3, ChangeYYYYMMDD(ToDate));
                    reportdocument.SetParameterValue(4, Petty_Head);
                    reportdocument.SetParameterValue(5, Class);
                    reportdocument.SetParameterValue(6, "S");
                    reportdocument.SetParameterValue(7, Users);

                    break;

                case "1035":
                    reportdocument = new ReportDocument();
                    reportdocument.Load(Server.MapPath("/FeeReport/crptFeePettyDetails.rpt"));
                    reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                    reportdocument.SetParameterValue(0, AcaStart);
                    reportdocument.SetParameterValue(1, SchoolID);
                    reportdocument.SetParameterValue(2, ChangeYYYYMMDD(FromDate));
                    reportdocument.SetParameterValue(3, ChangeYYYYMMDD(ToDate));
                    reportdocument.SetParameterValue(4, Petty_Head);
                    reportdocument.SetParameterValue(5, Class);
                    reportdocument.SetParameterValue(6, "D");
                    reportdocument.SetParameterValue(7, Users);

                    break;

                case "1036":
                    reportdocument = new ReportDocument();
                    reportdocument.Load(Server.MapPath("/FeeReport/crptFeePettyHeadWiseDetail.rpt"));
                    reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                    reportdocument.SetParameterValue(0, AcaStart);
                    reportdocument.SetParameterValue(1, SchoolID);
                    reportdocument.SetParameterValue(2, ChangeYYYYMMDD(FromDate));
                    reportdocument.SetParameterValue(3, ChangeYYYYMMDD(ToDate));
                    reportdocument.SetParameterValue(4, Petty_Head);
                    reportdocument.SetParameterValue(5, Class);
                    reportdocument.SetParameterValue(6, "D");
                    reportdocument.SetParameterValue(7, Users);

                    break;

                default:
                    return View();
            }
            string[] result = GetReportHeader();
            if ((VirtualPath + result[0] + result[1]).Length > 190)
                VirtualPath += result[0] + " for Academic Session (" + AcaStart.ToString() + " - " + (AcaStart + 1).ToString() + ")";
            else
                VirtualPath += result[0] + result[1] + " for Academic Session (" + AcaStart.ToString() + " - " + (AcaStart + 1).ToString() + ")";
            reportdocument.DataDefinition.FormulaFields["UserCaption"].Text = "'" + VirtualPath + "'";

            reportdocument.DataDefinition.FormulaFields["UserName"].Text = "'" + db.MTUserMasters.Find(UID).UserName + "'";

            //Start Work for Parameter of All Header Sub Reports
            int pcount = reportdocument.ParameterFields.Count;
            reportdocument.SetParameterValue(pcount - 1, SchoolID);
            //End Work Parameter of All Header Sub Reports

            if (FileFormat == "xls")
            {
                stream = reportdocument.ExportToStream(CrystalDecisions.Shared.ExportFormatType.ExcelRecord);
                reportdocument.Close();
                reportdocument.Dispose();
                return File(stream, "application/xls");

            }
            else
            {

                stream = reportdocument.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                reportdocument.Close();
                reportdocument.Dispose();
                return File(stream, "application/pdf");
            }

            // return GetFileFormat(FileFormat, VirtualPath, reportdocument, stream);

        }

        private string[] GetReportHeader()
        {
            string[] result = { "", "" };
            if (Request.Cookies["FromDate"] != null)
            {
                if (Request.Cookies["ToDate"] == null || Request.Cookies["FromDate"].Value == Request.Cookies["ToDate"].Value)
                {
                    result[0] += " for " + Request.Cookies["FromDate"].Value;
                }
                else
                {
                    result[0] += " from " + Request.Cookies["FromDate"].Value + " to " + Request.Cookies["ToDate"].Value;
                }
            }
            foreach (string cokkiekey in Request.Cookies.AllKeys)
            {
                if (cokkiekey != "FromDate" && cokkiekey != "ToDate" && (cokkiekey == "AdmNo" || cokkiekey == "FeeNo" || cokkiekey == "ParentType" || cokkiekey.IndexOf("_Name") > 0))
                {
                    string val = Request.Cookies[cokkiekey].Value;
                    if (val != "")
                    {
                        val = val.IndexOf(',') == 0 ? val.Substring(1) : val;
                        result[1] += " " + cokkiekey.Replace("_Name", "").Replace("_", " ") + " [" + val + "], ";
                    }
                }
            }
            if (result[1] != "")
                result[1] = " of " + result[1].Substring(0, result[1].Length - 2);
            return result;
        }

        private bool finformula(ReportDocument rd, string name)
        {
            for (int i = 0; i < rd.DataDefinition.FormulaFields.Count; i++)
                if (rd.DataDefinition.FormulaFields[i].Name == name) return true;
            return false;
        }
    }


}
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;
using System.Web.Security;
using System.IO;
using CampusCare.Models;
using System.ComponentModel;
using System.Web.Script.Serialization;
using System.Data;
using System.Globalization;
using CrystalDecisions.CrystalReports.Engine;
using CrystalDecisions.Shared;
using System.Data.OleDb;
using System.Net;
using System.Security.Cryptography.X509Certificates;
using System.Net.Security;
using System.Xml;
using System.Transactions;

namespace CampusCare.Controllers
{
    public partial class FeeController : CCWebController
    {
        //public override void fillPermission()
        //{
        //    if (ids == null || ids[0] == "0" || ids[0] == "")
        //    {
        //        ids = db.FillRequestQueryString();
        //    }
        //    ViewData["UserPermission"] = db.FillUserMenuPermission(Convert.ToInt32(Session["UID"]), Convert.ToInt32(ids[1]))[0];
        //}        

        #region Fee Group Master
        [Authorize]
        public ActionResult FeeGroupMaster()
        {
            if (CheckSession()) { return RedirectToAction("Logon", "Logon"); }
            fillPermission();
            List<MTDDLMaster> objddlMster = new List<MTDDLMaster>();
            objddlMster.Add(new MTDDLMaster { DDLID = "Name", DDLName = "Name" });
            ViewBag.FilterDDL = objddlMster.ToList();
            List<MTDDLMaster> objFilter = new List<MTDDLMaster>();

            objFilter.Add(new MTDDLMaster { DDLID = "Contain", DDLName = "Contain" });
            objFilter.Add(new MTDDLMaster { DDLID = "StartWith", DDLName = "Start With" });
            objFilter.Add(new MTDDLMaster { DDLID = "Equal", DDLName = "Equal" });
            ViewBag.FilterType = objFilter;
            ViewData["PageCount"] = 20;
            ViewData["GetData"] = db.fillFeeGroupMasterGrid(Convert.ToInt32(Session["AcaStart"]), Convert.ToInt32(Session["SchoolID"]));
            ViewData["ClassSection"] = db.fillClassSection(0);
            return View();
        }
        [Authorize]
        public JsonResult GetFeeGroupRecord(int AutoID)
        {
            CommonResponse CR = new CommonResponse();
            try
            {
                if (CheckSession())
                {
                    CR.Message = "Login Again";
                    return Json(CR);
                }
                if (db.FEEGroupMasters.Where(model => model.AutoID == AutoID).Count() > 0)
                {
                    CR.Message = "";
                    FEEGroupMaster FGM = db.FEEGroupMasters.Where(model => model.AutoID == AutoID).ToList()[0];
                    object[] obj = new object[5];
                    obj[0] = FGM;
                    ViewData["ClassSection"] = db.fillClassSection(AutoID);
                    obj[1] = DbCampusContext.RenderPertialViewtoString(this, "_FeeGroupMasterClassSection");
                    obj[2] = db.FeeAccTypes.Where(model => model.AutoID == FGM.AccID).ToList()[0].AccName;
                    obj[3] = db.FeeStreamMasters.Where(model => model.AutoID == FGM.StrmID).ToList()[0].FeeStreamName;
                    obj[4] = db.MTAcaYearStyleMasters.Where(model => model.AutoID == FGM.StyleID).ToList()[0].StyleName;
                    CR.Data = obj;
                    return Json(CR);
                }
                else
                {
                    CR.Message = "Record not found";
                    return Json(CR);
                }
            }
            catch (Exception e)
            {
                CR.Message = e.Message;
                return Json(CR);
            }
        }
        [Authorize]
        public JsonResult FeeGroupSave(string para_fm, string[] fd, encodeshdata trdata)
        {
            string[] strmsg = { "", "" };
            try
            {
                trdata.actualdata = para_fm + "#" + "[" + "\"" + string.Join("\",\"", fd) + "\"]";
                if (RequestAuthentication(trdata) == false)
                {
                    strmsg[0] = "Login Again";
                    return Json(strmsg);
                }
                if (CheckSession())
                {
                    strmsg[0] = "Login Again";
                    return Json(strmsg);
                }

                FEEGroupMaster fm = new FEEGroupMaster();
                JavaScriptSerializer json = new JavaScriptSerializer();
                fm = (FEEGroupMaster)json.ConvertToType<FEEGroupMaster>(json.DeserializeObject(para_fm));

                if (ModelState.IsValid)
                {
                    string str = checkStaffData(fm);
                    string strDetails = "";
                    if (str != "")
                    {
                        strmsg[0] = str;
                        return Json(strmsg);
                    }
                    if (fm.AutoID != 0)
                    {
                        FEEGroupMaster FGM = db.FEEGroupMasters.Find(fm.AutoID);
                        if (FGM != null)
                        {
                            List<FEEGroupDetail> obj = db.FEEGroupDetails.Where(model => model.FGID == fm.AutoID).ToList();
                            db.FEEGroupDetails.RemoveRange(obj);
                            FGM.FGName = fm.FGName;
                            FGM.StyleID = fm.StyleID;
                            FGM.AutoID = fm.AutoID;
                            FGM.StrmID = fm.StrmID;
                            FGM.AccID = fm.AccID;
                            FGM.AcaStart = (int)Session["AcaStart"];
                            FGM.EntryUserID = (int)Session["UID"];
                            FGM.EntryDate = DateTime.Now;
                            strDetails = "Fee Group Name : " + fm.FGName + ",Is Modified";
                        }
                        else
                            return Json("Record Not Found");
                    }
                    else
                    {
                        fm.AutoID = (db.FEEGroupMasters.Max(model => (int?)model.AutoID) ?? 0) + 1;
                        fm.AcaStart = (int)Session["AcaStart"];
                        fm.SchoolID = (int)Session["SchoolID"];
                        fm.UpdateUserID = (int)Session["UID"];
                        fm.UpdateDate = DateTime.Now;
                        db.FEEGroupMasters.Add(fm);
                        strDetails = "Fee Group Name : " + fm.FGName + ",Is Added";
                    }
                    db.SaveChanges();
                    for (int i = 0; i < fd.Length; i++)
                    {
                        FEEGroupDetail FGD = new FEEGroupDetail();
                        FGD.FGID = fm.AutoID;
                        FGD.ClassID = Convert.ToInt32(fd[i].Split('^')[0]);
                        FGD.SectionID = Convert.ToInt32(fd[i].Split('^')[1]);
                        db.FEEGroupDetails.Add(FGD);
                    }

                    UserUpdateDetails uud = new UserUpdateDetails();
                    uud.UID = Convert.ToInt32(Session["UID"]);
                    uud.SessionID = Session.SessionID;
                    uud.UpdateDate = DateTime.Now;
                    uud.FormName = ids[2];
                    uud.Details = strDetails;
                    db.UserUpdateDetailss.Add(uud);
                    db.SaveChanges();
                    ViewData["GetData"] = db.fillFeeGroupMasterGrid(Convert.ToInt32(Session["AcaStart"]), Convert.ToInt32(Session["SchoolID"]));
                    strmsg[0] = "Saved Successfully";//?parentid=114&menuid=117&
                    strmsg[1] = DbCampusContext.RenderPertialViewtoString(this, "_FeeGroupMasterGrid").Replace("FeeGroupSave?", "FeeGroupMaster?parentid=" + ids[0] + "&amp;menuid=" + ids[1] + "&amp;");
                    return Json(strmsg);
                }
                else
                {
                    strmsg[0] = ModelState.Values.SelectMany(model => model.Errors).ToList()[0].ErrorMessage;
                    return Json(strmsg);
                }
            }
            catch (Exception ex)
            {
                strmsg[0] = ex.Message;
                return Json(strmsg);
            }
        }

        private string checkStaffData(FEEGroupMaster fm)
        {
            string str = "";
            int acaStart = (int)Session["AcaStart"];
            int schoolId = (int)Session["SchoolID"];
            if (db.FEEGroupMasters.Where(model => (model.FGName == fm.FGName && model.SchoolID == schoolId && model.AcaStart == acaStart && model.AutoID != fm.AutoID)).Count() > 0)
            {
                str = "Fee Group Name already Exists";
            }
            return str;
        }
        [Authorize]
        public JsonResult FeeGroupMasterDelete(int? id)
        {
            string[] str = { "", "" };
            try
            {
                if (CheckSession())
                {
                    str[0] = "Login Again";
                    return Json(str);
                }
                FEEGroupMaster FGM = db.FEEGroupMasters.Find(id);
                List<FEEGroupDetail> FGD = db.FEEGroupDetails.Where(model => model.FGID == id).ToList();
                if (ModelState.IsValid)
                {
                    if (db.spGetPrimaryValueExists("FeeGroupID", "FeeGroupMaster,FeeGroupDetail", FGM.AutoID.ToString())[0].TotalRecords > 0)
                    {
                        str[0] = "Fee Group Already in Use";
                        return Json(str);
                    }
                    db.FEEGroupDetails.RemoveRange(FGD);
                    db.SaveChanges();
                    db.FEEGroupMasters.Remove(FGM);

                    UserUpdateDetails uud = new UserUpdateDetails();
                    uud.UID = Convert.ToInt32(Session["UID"]);
                    uud.SessionID = Session.SessionID;
                    uud.UpdateDate = DateTime.Now;
                    uud.FormName = ids[2];
                    uud.Details = "Fee Structure Delete for Fee Group ID = " + id + "";
                    db.UserUpdateDetailss.Add(uud);

                    db.SaveChanges();
                    ViewData["GetData"] = db.fillFeeGroupMasterGrid(Convert.ToInt32(Session["AcaStart"]), Convert.ToInt32(Session["SchoolID"]));
                    str[0] = "Deleted Successfully";
                    str[1] = DbCampusContext.RenderPertialViewtoString(this, "_FeeGroupMasterGrid").Replace("FeeGroupMasterDelete/" + id.ToString() + "?", "FeeGroupMaster?parentid=" + ids[0] + "&amp;menuid=" + ids[1] + "&amp;");

                    return Json(str);
                }
                else
                {
                    str[0] = ModelState.Values.SelectMany(model => model.Errors).ToList()[0].ErrorMessage;
                    return Json(str);
                }
            }
            catch (Exception ex)
            {
                str[0] = ex.Message;
                return Json(str);
            }
        }
        [Authorize]
        public JsonResult FeeGroupCancel()
        {
            CommonResponse CR = new CommonResponse();
            try
            {
                if (CheckSession())
                {
                    CR.Message = "Login Again";
                    return Json(CR);
                }
                ViewData["ClassSection"] = db.fillClassSection(0);
                object[] obj = new object[1];
                obj[0] = DbCampusContext.RenderPertialViewtoString(this, "_FeeGroupMasterClassSection");
                CR.Message = "";
                CR.Data = obj;
                return Json(CR);
            }
            catch (Exception e)
            {
                CR.Message = e.Message;
                return Json(CR);
            }
        }

        [HttpPost]
        [Authorize]
        public ActionResult FeeGroupFilter(string FilterType, string Value)
        {
            CommonResponse cr = new CommonResponse();
            int intSchoolid = (int)Session["SchoolID"];
            int intAcaStart = (int)Session["AcaStart"];
            //fillPermission();
            object[] obj = new object[1];
            try
            {
                if (CheckSession())
                {
                    cr.Message = "Login Again";
                    return Json(cr);
                }
                if (FilterType == "StartWith" || FilterType == "Equal" || FilterType == "Contain")
                {
                    var FilterData = db.fillFeeGroupMasterFilterGrid(Convert.ToInt32(Session["AcaStart"]), Convert.ToInt32(Session["SchoolID"]), FilterType, Value);
                    ViewData["GetData"] = db.fillFeeGroupMasterFilterGrid(Convert.ToInt32(Session["AcaStart"]), Convert.ToInt32(Session["SchoolID"]), FilterType, Value);
                    ViewData["PageCount"] = FilterData.Count() == 0 ? 1 : FilterData.Count();
                }
                else
                {
                    var FilterData = db.fillFeeGroupMasterFilterGrid(Convert.ToInt32(Session["AcaStart"]), Convert.ToInt32(Session["SchoolID"]), FilterType, Value);
                    ViewData["GetData"] = db.fillFeeGroupMasterFilterGrid(Convert.ToInt32(Session["AcaStart"]), Convert.ToInt32(Session["SchoolID"]), FilterType, Value);
                    ViewData["PageCount"] = 20;
                }
                //                obj[0] = DbCampusContext.RenderPertialViewtoString(this, "_TRBusStopGrid").Replace("FilterAuthor?", "TRBusStopMaster?menuid=" + ids[0] + "&amp;");
                ViewData["UserPermission"] = db.FillUserMenuPermission(Convert.ToInt32(Session["UID"]), Convert.ToInt32(ids[1]))[0];
                obj[0] = DbCampusContext.RenderPertialViewtoString(this, "_FeeGroupMasterGrid").Replace("FeeGroupFilter?", "FeeGroupMaster?menuid=" + ids[1] + "&amp;");
                cr.Data = obj;
                return Json(cr);
            }
            catch (Exception ex)
            {
                cr.Message = ex.Message;
                return Json(cr);

            }
        }
        #endregion

        #region Fee Head Master
        [Authorize]
        public ActionResult FeeHeadMaster()
        {
            if (CheckSession()) { return RedirectToAction("Logon", "Logon"); }
            fillPermission();
            bool FeeDefine;
            if (System.Web.HttpContext.Current.Request.QueryString["page"] == null || TempData["FDefine"] == null || (bool)TempData["FDefine"] == false)
                FeeDefine = false;
            else
                FeeDefine = true;
            List<MTDDLMaster> objddlMster = new List<MTDDLMaster>();
            objddlMster.Add(new MTDDLMaster { DDLID = "Name", DDLName = "Name" });
            ViewBag.FilterDDL = objddlMster.ToList();
            List<MTDDLMaster> objFilter = new List<MTDDLMaster>();
            objFilter.Add(new MTDDLMaster { DDLID = "Contain", DDLName = "Contain" });
            objFilter.Add(new MTDDLMaster { DDLID = "StartWith", DDLName = "Start With" });
            objFilter.Add(new MTDDLMaster { DDLID = "Equal", DDLName = "Equal" });
            ViewBag.FilterType = objFilter;
            ViewData["PageCount"] = 20;
            TempData["FDefine"] = FeeDefine;
            fillFeeHeadgrid(FeeDefine);
            return View();
        }

        private void fillFeeHeadgrid(bool FeeDefine)
        {
            int acastart = (int)Session["AcaStart"];
            int schoolid = (int)Session["SchoolID"];
            ViewData["FDefine"] = FeeDefine;
            if (FeeDefine == false)
                ViewData["GetData"] = db.FeeFillingGridForEntry("FeeHeadMaster", acastart, schoolid, "UD", "", "");
            else
                ViewData["GetData"] = db.FeeFillingGridForEntry("FeeHeadMaster", acastart, schoolid, "SS", "", "");
        }
        [Authorize]
        public JsonResult FeeHeadRecord(bool FeeDefine)
        {
            CommonResponse CR = new CommonResponse();
            try
            {
                if (CheckSession())
                {
                    CR.Message = "Login Again";
                    return Json(CR);
                }

                CR.Message = "";

                fillFeeHeadgrid(FeeDefine);
                TempData["FDefine"] = FeeDefine;
                object[] obj = new object[1];
                obj[0] = DbCampusContext.RenderPertialViewtoString(this, "_FeeHeadMasterGrid").Replace("FeeHeadRecord?", "FeeHeadMaster?parentid=" + ids[0] + "&amp;menuid=" + ids[1] + "&amp;");
                CR.Data = obj;

                return Json(CR);
            }
            catch (Exception e)
            {
                CR.Message = e.Message;
                return Json(CR);
            }
        }

        [HttpGet]
        [Authorize]
        public ActionResult FeeHeadCreate(int? id)
        {
            if (CheckSession()) { return RedirectToAction("Logon", "Logon"); }
            FeeHeadFillingGrid fhm = new FeeHeadFillingGrid();
            fhm.FeeHeadID = 0;
            fhm.PrintOrder = 0;
            ViewData["FeeHeadID"] = id;

            ViewBag.ddl = ddlType();
            if (id != null && id > 0)
            {
                FEEHeadMaster CM = db.FEEHeadMasters.Find(id);
                fhm.FeeHeadName = CM.FHName;
                fhm.PrintCode1 = CM.FPntHead.Split((char)13)[0];
                fhm.PrintCode2 = CM.FPntHead.Split((char)13)[1];
                fhm.FeeRefund = CM.FRefund;
                fhm.PrintOrder = CM.PntOrder;
                fhm.ddlType = CM.Type;
                fhm.FeeHeadID = CM.FHeadID;
                fhm.CertificateApplicable = (bool)CM.CertApl;
                int acaStart = (int)Session["AcaStart"];
                int schoolID = (int)Session["SchoolID"];
                if (CM.FDefine == true && db.FEEYearlySettings.Where(model => model.AcaStart == acaStart && model.SchoolID == schoolID).Count() > 0)
                    ViewData["SFHChange"] = db.FEEYearlySettings.Where(model => model.AcaStart == acaStart && model.SchoolID == schoolID).ToList()[0].SFHChange;
            }
            return PartialView("_FeeHeadMasterEdit", fhm);
        }

        [Authorize]
        public JsonResult FeeHeadSave(string para_fgm, encodeshdata trdata)
        {
            CommonResponse CR = new CommonResponse();
            try
            {
                trdata.actualdata = para_fgm;
                if (RequestAuthentication(trdata) == false)
                {
                    CR.Message = "Login Again";
                    return Json(CR);
                }
                if (CheckSession())
                {
                    CR.Message = "Login Again";
                    return Json(CR);
                }
                FEEHeadMaster fgm = new FEEHeadMaster();
                JavaScriptSerializer json = new JavaScriptSerializer();
                fgm = (FEEHeadMaster)json.ConvertToType<FEEHeadMaster>(json.DeserializeObject(para_fgm));
                if (ModelState.IsValid)
                {
                    string strmsg = CheckFeeHead(fgm);
                    if (strmsg == "" || strmsg == "UpdatePNo")
                    {
                        if (fgm.AutoID != 0)
                        {
                            FEEHeadMaster FH = db.FEEHeadMasters.Find(fgm.AutoID);
                            if (FH == null)
                            {
                                CR.Message = "Record does not exists";
                                return Json(CR);
                            }
                            if (fgm.FDefine == false)
                            {
                                FH.FHName = fgm.FHName;
                                FH.FDefine = fgm.FDefine;
                                FH.FPntHead = fgm.FPntHead.Replace(' ', (char)13);
                                FH.FRefund = fgm.FRefund;
                                FH.PntOrder = fgm.PntOrder;
                                FH.Type = fgm.Type;
                                FH.CertApl = fgm.CertApl;
                            }
                            else
                            {
                                FH.PntOrder = fgm.PntOrder;
                                if (fgm.Type != null && fgm.CertApl != null)
                                {
                                    if (fgm.Type == "")
                                        FH.Type = null;
                                    else
                                        FH.Type = fgm.Type;

                                    FH.CertApl = fgm.CertApl;
                                }
                            }
                            if (strmsg == "UpdatePNo")
                            {
                                int PrePntOrder = FH.PntOrder;
                                int AcaStart = (int)Session["AcaStart"];
                                int SchoolID = (int)Session["SchoolID"];
                                foreach (FEEHeadMaster obj in db.FEEHeadMasters.Where(model => model.PntOrder >= FH.PntOrder && (model.AcaStart == null || model.AcaStart == AcaStart) && model.SchoolID == SchoolID && model.AutoID != FH.AutoID).OrderBy(model => model.PntOrder))
                                {
                                    FEEHeadMaster FHobj = db.FEEHeadMasters.Find(obj.AutoID);
                                    if (PrePntOrder == FHobj.PntOrder)
                                    {
                                        FHobj.PntOrder = FHobj.PntOrder + 1;
                                        PrePntOrder = FHobj.PntOrder;
                                    }
                                    else
                                        break;
                                }
                            }
                            FH.UpdateUserID = (int)Session["UID"];
                            FH.UpdateDate = DateTime.Now;
                        }
                        else if (fgm.FDefine == false)
                        {
                            fgm.FHeadID = (db.FEEHeadMasters.Max(model => (int?)model.FHeadID) ?? 0) + 1;
                            fgm.FPntHead = fgm.FPntHead.Replace(' ', (char)13);
                            fgm.AcaStart = (int)Session["AcaStart"];
                            fgm.SchoolID = (int)Session["SchoolID"];
                            fgm.EntryUserID = (int)Session["UID"];
                            fgm.EntryDate = DateTime.Now;

                            db.FEEHeadMasters.Add(fgm);
                        }
                        db.SaveChanges();
                        fillFeeHeadgrid(fgm.FDefine);
                        CR.Message = "Saved Successfully";

                        object[] objects = new object[1];
                        objects[0] = DbCampusContext.RenderPertialViewtoString(this, "_FeeHeadMasterGrid").Replace("FeeHeadSave?", "FeeHeadMaster?parentid=" + ids[0] + "&amp;menuid=" + ids[1] + "&amp;");

                        CR.Data = objects;
                        return Json(CR);
                    }
                    else
                    {
                        CR.Message = strmsg;
                        return Json(CR);
                    }
                }
                else
                {
                    CR.Message = ModelState.Values.SelectMany(model => model.Errors).ToList()[0].ErrorMessage;
                    return Json(CR);
                }
            }
            catch (Exception ex)
            {
                CR.Message = ex.Message;
                return Json(CR);
            }
        }
        [Authorize]
        public JsonResult FeeHeadDelete(int? id)
        {
            CommonResponse CR = new CommonResponse();
            string[] str = { "", "" };
            try
            {
                if (CheckSession())
                {
                    CR.Message = "Login Again";
                    return Json(CR);
                }
                FEEHeadMaster CM = db.FEEHeadMasters.Find(id);
                if (ModelState.IsValid)
                {
                    int count = (from FAD in db.FEEAccountDetails
                                 join FAM in db.FEEAccountMasters on FAD.BLNo equals FAM.AutoID
                                 where FAM.Cancel == false && FAD.FHeadID == CM.FHeadID
                                 select FAM).Count();
                    if (count > 0)
                    {
                        CR.Message = "Fee Head Already in Use";
                        return Json(CR);
                    }

                    if (db.spGetPrimaryValueExists("FeeHeadID", "FeeHeadMaster,FeeAccountDetail", CM.FHeadID.ToString())[0].TotalRecords > 0)
                    {
                        CR.Message = "Fee Head Already in Use";
                        return Json(CR);
                    }
                    //if (db.spGetPrimaryValueExists("FeeHeadID", "FeeHeadMaster", CM.FHeadID.ToString())[0].TotalRecords > 0)
                    //{
                    //    CR.Message = "Fee Head Already in Use";
                    //    return Json(CR);
                    //}
                    db.FEEHeadMasters.Remove(CM);
                    db.SaveChanges();
                    bool FeeDefine = (bool)TempData["FDefine"];
                    TempData.Keep("FDefine");
                    fillFeeHeadgrid(FeeDefine);

                    CR.Message = "Deleted Successfully";
                    object[] objects = new object[1];
                    objects[0] = DbCampusContext.RenderPertialViewtoString(this, "_FeeHeadMasterGrid").Replace("FeeHeadDelete/" + id.ToString() + "?", "FeeHeadMaster?parentid=" + ids[0] + "&amp;menuid=" + ids[1] + "&amp;");
                    CR.Data = objects;
                    return Json(CR);
                }
                else
                {
                    CR.Message = ModelState.Values.SelectMany(model => model.Errors).ToList()[0].ErrorMessage;
                    return Json(CR);
                }
            }
            catch (Exception ex)
            {
                CR.Message = ex.Message;
                return Json(CR);
            }
        }

        private string CheckFeeHead(FEEHeadMaster fhm)
        {
            string str = "";
            int AcaStart = (int)Session["AcaStart"];
            int SchoolID = (int)Session["SchoolID"];
            if (fhm.FDefine == false)
            {
                if (fhm.FHName == "Grand Total" || db.FEEHeadMasters.Where(model => (model.FHName == fhm.FHName && model.AutoID != fhm.AutoID && model.AcaStart == AcaStart && model.SchoolID == SchoolID)).Count() > 0)
                {
                    str = "Fee Head Name Already Exists";
                }
                else if (db.FEEHeadMasters.Where(model => (model.PntOrder == fhm.PntOrder && model.AutoID != fhm.AutoID && (model.AcaStart == null || model.AcaStart == AcaStart) && model.SchoolID == SchoolID)).Count() > 0)
                {
                    if (fhm.AutoID != 0)
                    {
                        int porder = db.FEEHeadMasters.Where(model => (model.FDefine == true && (model.AcaStart == null || model.AcaStart == AcaStart) && model.SchoolID == SchoolID)).Max(model => (int?)model.PntOrder) ?? 0;
                        if (fhm.PntOrder <= porder)
                        {
                            str = "Priority No should be greater than " + porder + "";
                        }
                        else
                        {
                            str = "UpdatePNo";
                        }
                    }
                    else
                    {
                        str = "Priority No Already Exists";
                    }
                }
                else if (db.FEEHeadMasters.Where(model => (model.Type == fhm.Type && model.Type == "I" && model.AutoID != fhm.AutoID && model.AcaStart == AcaStart && model.SchoolID == SchoolID)).Count() > 0)
                {
                    str = "Only one 'I' type fee head allow ";
                }
                else if (fhm.AutoID != 0)
                {
                    string type = db.FEEHeadMasters.Find(fhm.AutoID).Type;
                    if (type != fhm.Type && db.FEEStructureUserMasters.Where(model => model.FHID == fhm.AutoID).Count() > 0)
                    {
                        str = "You can't modify Fee Head Type";
                    }
                }
            }
            else
            {
                if (db.FEEHeadMasters.Where(model => (model.PntOrder == fhm.PntOrder && model.AutoID != fhm.AutoID && model.SchoolID == SchoolID)).Count() > 0)
                {
                    if (fhm.AutoID != 0)
                    {
                        str = "UpdatePNo";
                    }
                    else
                    {
                        str = "Priority No Already Exists";
                    }
                }
                else if (fhm.Type != null && db.FEEHeadMasters.Where(model => (model.Type == fhm.Type && model.Type == "I" && model.AutoID != fhm.AutoID && model.SchoolID == SchoolID)).Count() > 0)
                {
                    str = "Only one 'I' type fee head allow ";
                }
                else if (fhm.AutoID != 0)
                {
                    string type = db.FEEHeadMasters.Find(fhm.AutoID).Type;
                    if (type != fhm.Type && db.FEEStructureUserMasters.Where(model => model.FHID == fhm.AutoID).Count() > 0)
                    {
                        str = "You can't modify Fee Head Type";
                    }
                }
            }
            return str;
        }



        private List<MTDDLMaster> ddlType()
        {
            List<MTDDLMaster> obj = new List<MTDDLMaster>();
            MTDDLMaster ddl = new MTDDLMaster();
            ddl.DDLID = "";
            ddl.DDLName = "Select";
            obj.Add(ddl);
            ddl = new MTDDLMaster();
            ddl.DDLID = "S";
            ddl.DDLName = "S";
            obj.Add(ddl);
            ddl = new MTDDLMaster();
            ddl.DDLID = "M";
            ddl.DDLName = "M";
            obj.Add(ddl);
            ddl = new MTDDLMaster();
            ddl.DDLID = "A";
            ddl.DDLName = "A";
            obj.Add(ddl);
            ddl = new MTDDLMaster();
            ddl.DDLID = "E";
            ddl.DDLName = "E";
            obj.Add(ddl);
            return obj;
        }


        [HttpPost]
        [Authorize]
        public ActionResult FeeHeadFilter(string FilterType, string Value)
        {
            CommonResponse cr = new CommonResponse();
            int intSchoolid = (int)Session["SchoolID"];
            int intAcaStart = (int)Session["AcaStart"];
            bool FeeDefine;
            if (System.Web.HttpContext.Current.Request.QueryString["page"] == null || TempData["FDefine"] == null || (bool)TempData["FDefine"] == false)
                FeeDefine = false;
            else
                FeeDefine = true;
            ViewData["FDefine"] = FeeDefine;
            object[] obj = new object[1];
            try
            {
                if (CheckSession())
                {
                    cr.Message = "Login Again";
                    return Json(cr);
                }
                ViewData["GetData"] = db.FeeFillingGridForEntry("FeeHeadMaster", intAcaStart, intSchoolid, "UD", FilterType, Value);
                //                obj[0] = DbCampusContext.RenderPertialViewtoString(this, "_TRBusStopGrid").Replace("FilterAuthor?", "TRBusStopMaster?menuid=" + ids[0] + "&amp;");
                ViewData["UserPermission"] = db.FillUserMenuPermission(Convert.ToInt32(Session["UID"]), Convert.ToInt32(ids[1]))[0];
                obj[0] = DbCampusContext.RenderPertialViewtoString(this, "_FeeHeadMasterGrid").Replace("FeeHeadFilter?", "FeeHeadMaster?menuid=" + ids[1] + "&amp;");
                cr.Data = obj;
                return Json(cr);
            }
            catch (Exception ex)
            {
                cr.Message = ex.Message;
                return Json(cr);

            }
        }
        #endregion

        #region Fee Installment Master
        [HttpGet]
        [Authorize]
        public ActionResult FeeInstallmentMaster()
        {
            if (CheckSession()) { return RedirectToAction("Logon", "Logon"); }
            fillPermission();
            int AcaStart = Convert.ToInt32(Session["AcaStart"]);
            int SchoolID = Convert.ToInt32(Session["SchoolID"]);
            ViewData["FeeInstallmentData"] = db.FEEInstallmentMasters.Where(model => model.SchoolID == SchoolID && model.AcaStart == AcaStart).OrderBy(model => model.AutoID).ToList();
            return View("FeeInstallmentMaster");
        }

        [HttpGet]
        [Authorize]
        public ActionResult FeeInstallmentCreate(int? id)
        {
            if (CheckSession()) { return RedirectToAction("Logon", "Logon"); }
            FEEInstallmentMaster rdrFeeInstallment = new FEEInstallmentMaster();
            rdrFeeInstallment.AutoID = 0;
            rdrFeeInstallment.StyleID = 0;
            ViewData["AutoID"] = id;

            ViewBag.ddl = db.MTAcaYearStyleMasters.Where(model => model.AutoID != 0).OrderBy(model => model.AutoID).ToList();
            if (id != null && id > 0)
            {
                FEEInstallmentMaster CM = db.FEEInstallmentMasters.Find(id);
                rdrFeeInstallment.FIName = CM.FIName;
                rdrFeeInstallment.StyleID = CM.StyleID;
                rdrFeeInstallment.AutoID = CM.AutoID;
            }
            return PartialView("_FeeInstallmentCreateEdit", rdrFeeInstallment);
        }

        [HttpPost]
        [Authorize]
        public JsonResult FeeInstallmentCreate(string FeeInstallment, encodeshdata trdata)
        {
            CommonResponse CR = new CommonResponse();
            try
            {
                trdata.actualdata = FeeInstallment;
                if (RequestAuthentication(trdata) == false)
                {
                    CR.Message = "Login Again";
                    return Json(CR);
                }
                if (CheckSession())
                {
                    CR.Message = "Login Again";
                    return Json(CR);
                }
                FEEInstallmentMaster FeeInstallmentmodel = new FEEInstallmentMaster();
                JavaScriptSerializer json = new JavaScriptSerializer();
                FeeInstallmentmodel = (FEEInstallmentMaster)json.ConvertToType<FEEInstallmentMaster>(json.DeserializeObject(FeeInstallment));

                int AcaStart = Convert.ToInt32(Session["AcaStart"]);
                int SchoolID = Convert.ToInt32(Session["SchoolID"]);
                if (ModelState.IsValid)
                {
                    string strmsg = CheckFeeInstallment(FeeInstallmentmodel);
                    if (strmsg == "")
                    {
                        if (FeeInstallmentmodel.AutoID != 0)
                        {
                            FEEInstallmentMaster CM = db.FEEInstallmentMasters.Find(FeeInstallmentmodel.AutoID);
                            if (CM != null)
                            {
                                CM.FIName = FeeInstallmentmodel.FIName;
                                CM.StyleID = FeeInstallmentmodel.StyleID;
                                CM.UpdateUserID = (int)Session["UID"];
                                CM.UpdateDate = DateTime.Now;
                            }
                            else
                            {
                                CR.Message = "Record does not exists";
                                return Json(CR);
                            }
                        }
                        else
                        {
                            FeeInstallmentmodel.AutoID = (db.FEEInstallmentMasters.Max(model => (int?)model.AutoID) ?? 0) + 1;
                            FeeInstallmentmodel.AcaStart = (int)Session["AcaStart"];
                            FeeInstallmentmodel.SchoolID = (int)Session["SchoolID"];
                            FeeInstallmentmodel.EntryUserID = (int)Session["UID"];
                            FeeInstallmentmodel.EntryDate = DateTime.Now;
                            db.FEEInstallmentMasters.Add(FeeInstallmentmodel);
                        }
                        db.SaveChanges();
                        ViewData["FeeInstallmentData"] = db.FEEInstallmentMasters.Where(model => model.SchoolID == SchoolID && model.AcaStart == AcaStart).OrderBy(model => model.AutoID).ToList();
                        CR.Message = "Saved Successfully";


                        object[] objects = new object[1];
                        objects[0] = DbCampusContext.RenderPertialViewtoString(this, "_FeeInstallmentGrid").Replace("FEEInstallmentCreate?", "FeeInstallmentMaster?parentid=" + ids[0] + "&amp;menuid=" + ids[1] + "&amp;");

                        CR.Data = objects;
                        return Json(CR);
                    }
                    else
                    {
                        CR.Message = strmsg;
                        return Json(CR);
                    }
                }
                else
                {
                    CR.Message = ModelState.Values.SelectMany(model => model.Errors).ToList()[0].ErrorMessage;
                    return Json(CR);
                }
            }
            catch (Exception ex)
            {
                CR.Message = ex.Message;
                return Json(CR);
            }
        }

        private string CheckFeeInstallment(FEEInstallmentMaster cm)
        {
            string str = "";
            int AcaStart = (int)Session["AcaStart"];
            int SchoolID = (int)Session["SchoolID"];
            if (db.FEEInstallmentMasters.Where(model => (model.FIName == cm.FIName && model.AutoID != cm.AutoID && model.StyleID == cm.StyleID && model.AcaStart == AcaStart && model.SchoolID == SchoolID)).Count() > 0)
            {
                str = "Fee Installment Name Already Exists";
            }
            return str;
        }

        [HttpPost]
        [Authorize]
        public JsonResult FeeInstallmentDelete(int? id)
        {
            CommonResponse CR = new CommonResponse();
            string[] str = { "", "" };
            try
            {
                if (CheckSession())
                {
                    CR.Message = "Login Again";
                    return Json(CR);
                }
                int AcaStart = Convert.ToInt32(Session["AcaStart"]);
                int SchoolID = Convert.ToInt32(Session["SchoolID"]);
                FEEInstallmentMaster CM = db.FEEInstallmentMasters.Find(id);
                if (ModelState.IsValid)
                {
                    if (db.spGetPrimaryValueExists("FeeInstallmentID", "FEEInstallmentMaster", CM.AutoID.ToString())[0].TotalRecords > 0)
                    {
                        CR.Message = "FeeInstallment Already in Use";
                        return Json(CR);
                    }
                    db.FEEInstallmentMasters.Remove(CM);
                    db.SaveChanges();
                    ViewData["AutoID"] = null;
                    ViewData["FeeInstallmentData"] = db.FEEInstallmentMasters.Where(model => model.SchoolID == SchoolID && model.AcaStart == AcaStart).OrderBy(model => model.AutoID).ToList();

                    CR.Message = "Deleted Successfully";
                    object[] objects = new object[1];
                    objects[0] = DbCampusContext.RenderPertialViewtoString(this, "_FeeInstallmentGrid").Replace("FeeInstallmentDelete/" + id.ToString() + "?", "FeeInstallmentMaster?parentid=" + ids[0] + "&amp;menuid=" + ids[1] + "&amp;");
                    CR.Data = objects;
                    return Json(CR);
                }

                else
                {
                    CR.Message = ModelState.Values.SelectMany(model => model.Errors).ToList()[0].ErrorMessage;
                    return Json(CR);
                }
            }
            catch (Exception ex)
            {
                CR.Message = ex.Message;
                return Json(CR);
            }

        }
        #endregion

        #region Fee Account Master
        [HttpGet]
        [Authorize]
        public ActionResult FeeAccountMaster()
        {
            if (CheckSession()) { return RedirectToAction("Logon", "Logon"); }
            fillPermission();
            int SchoolID = Convert.ToInt32(Session["SchoolID"]);
            ViewData["GetData"] = db.FeeAccTypes.Where(model => model.SchoolID == SchoolID).OrderBy(model => model.AccName).ToList();
            return View("FeeAccountMaster");
        }

        [HttpGet]
        [Authorize]
        public ActionResult FeeAccountCreate(int? id)
        {
            if (CheckSession()) { return RedirectToAction("Logon", "Logon"); }
            FeeAccType rdrFeeAccount = new FeeAccType();
            rdrFeeAccount.AutoID = 0;
            ViewData["FAID"] = id;
            if (id != null && id > 0)
            {
                FeeAccType CM = db.FeeAccTypes.Find(id);
                rdrFeeAccount.AccName = CM.AccName;
                rdrFeeAccount.RepHeader = CM.RepHeader;
                rdrFeeAccount.AutoID = CM.AutoID;
                rdrFeeAccount.Picture = CM.Picture;
            }
            return PartialView("_FeeAccountCreateEdit", rdrFeeAccount);
        }

        [HttpPost]
        [Authorize]
        public JsonResult FeeAccountCreate(string FAT, HttpPostedFileBase imgAcc, string trdata)
        {
            string[] str = { "", "" };
            try
            {
                JavaScriptSerializer json = new JavaScriptSerializer();
                encodeshdata TRData = new encodeshdata();
                TRData = (encodeshdata)json.ConvertToType<encodeshdata>(json.DeserializeObject(trdata));
                TRData.actualdata = FAT;
                if (RequestAuthentication(TRData) == false)
                {
                    str[0] = "Login Again";
                    return Json(str);
                }
                if (CheckSession())
                {
                    str[0] = "Login Again";
                    return Json(str);
                }
                FeeAccType FeeAccountmodel = new FeeAccType();
                FeeAccountmodel = (FeeAccType)json.ConvertToType<FeeAccType>(json.DeserializeObject(FAT));
                byte[] ImageByte = null;
                if (imgAcc != null)
                {
                    BinaryReader reader = new BinaryReader(imgAcc.InputStream);
                    ImageByte = reader.ReadBytes(imgAcc.ContentLength);
                }
                int SchoolID = Convert.ToInt32(Session["SchoolID"]);
                if (ModelState.IsValid)
                {
                    string strmsg = CheckFeeAccount(FeeAccountmodel);
                    if (strmsg == "")
                    {
                        if (FeeAccountmodel.AutoID != 0)
                        {
                            FeeAccType CM = db.FeeAccTypes.Find(FeeAccountmodel.AutoID);
                            if (CM != null)
                            {
                                CM.AccName = FeeAccountmodel.AccName;
                                CM.RepHeader = FeeAccountmodel.RepHeader;
                                CM.UpdateUserID = (int)Session["UID"];
                                CM.UpdateDate = DateTime.Now;
                                if (ImageByte != null)
                                    CM.Picture = ImageByte;
                            }
                            else
                            {
                                str[0] = "Record does not exists";
                                return Json(str);
                            }
                        }
                        else
                        {
                            FeeAccountmodel.AutoID = (db.FeeAccTypes.Max(model => (int?)model.AutoID) ?? 0) + 1;
                            FeeAccountmodel.SchoolID = (int)Session["SchoolID"];
                            FeeAccountmodel.EntryUserID = (int)Session["UID"];
                            FeeAccountmodel.EntryDate = DateTime.Now;
                            if (ImageByte != null)
                                FeeAccountmodel.Picture = ImageByte;
                            db.FeeAccTypes.Add(FeeAccountmodel);
                        }
                        db.SaveChanges();
                        ViewData["GetData"] = db.FeeAccTypes.Where(model => model.SchoolID == SchoolID).OrderBy(model => model.AccName).ToList();
                        str[0] = "Saved Successfully";

                        str[1] = DbCampusContext.RenderPertialViewtoString(this, "_FeeAccountGrid").Replace("FeeAccountCreate?", "FeeAccountMaster?parentid=" + ids[0] + "&amp;menuid=" + ids[1] + "&amp;");

                        return Json(str);
                    }
                    else
                    {
                        str[0] = strmsg;
                        return Json(str);
                    }
                }
                else
                {
                    str[0] = ModelState.Values.SelectMany(model => model.Errors).ToList()[0].ErrorMessage;
                    return Json(str);
                }
            }
            catch (Exception ex)
            {
                str[0] = ex.Message;
                return Json(str);
            }
        }

        private string CheckFeeAccount(FeeAccType cm)
        {
            string str = "";
            int SchoolID = (int)Session["SchoolID"];
            if (db.FeeAccTypes.Where(model => (model.AccName == cm.AccName && model.AutoID != cm.AutoID && model.SchoolID == SchoolID)).Count() > 0)
            {
                str = "Fee Account Name Already Exists";
            }
            return str;
        }

        [HttpPost]
        [Authorize]
        public JsonResult FeeAccountDelete(int? id)
        {
            CommonResponse CR = new CommonResponse();
            string[] str = { "", "" };
            try
            {
                if (CheckSession())
                {
                    CR.Message = "Login Again";
                    return Json(CR);
                }
                int SchoolID = Convert.ToInt32(Session["SchoolID"]);
                FeeAccType CM = db.FeeAccTypes.Find(id);
                if (ModelState.IsValid)
                {
                    if (db.spGetPrimaryValueExists("FeeAccID", "FeeAccType", CM.AutoID.ToString())[0].TotalRecords > 0)
                    {
                        CR.Message = "Fee Account Already in Use";
                        return Json(CR);
                    }
                    db.FeeAccTypes.Remove(CM);
                    db.SaveChanges();
                    ViewData["GetData"] = db.FeeAccTypes.Where(model => model.SchoolID == SchoolID).OrderBy(model => model.AccName).ToList();

                    CR.Message = "Deleted Successfully";
                    object[] objects = new object[1];
                    objects[0] = DbCampusContext.RenderPertialViewtoString(this, "_FeeAccountGrid").Replace("FeeAccountDelete/" + id.ToString() + "?", "FeeAccountMaster?parentid=" + ids[0] + "&amp;menuid=" + ids[1] + "&amp;");
                    CR.Data = objects;
                    return Json(CR);
                }
                else
                {
                    CR.Message = ModelState.Values.SelectMany(model => model.Errors).ToList()[0].ErrorMessage;
                    return Json(CR);
                }
            }
            catch (Exception ex)
            {
                CR.Message = ex.Message;
                return Json(CR);
            }

        }
        #endregion

        #region Fee Yearly Setting
        [Authorize]
        public ActionResult FeeYearlySetting()
        {
            if (CheckSession()) { return RedirectToAction("Logon", "Logon"); }
            fillPermission();
            int AcaStart = (int)Session["AcaStart"];
            int SchoolID = (int)Session["SchoolID"];
            FEEYearlySetting FYS = new FEEYearlySetting();
            if (db.FEEYearlySettings.Where(model => model.AcaStart == AcaStart && model.SchoolID == SchoolID).Count() > 0)
                FYS = db.FEEYearlySettings.Where(model => model.AcaStart == AcaStart && model.SchoolID == SchoolID).ToList()[0];
            else
                FYS.AutoID = 0;
            ViewData["GetData"] = FYS;
            ViewBag.ddlFeeReceipt = (from MM in db.MTReportSettingMasters
                                     where MM.CertficateName == "FeeReceipt"
                                     select new MTDDLMaster() { DDLID = MM.AutoID.ToString(), DDLName = MM.ReportName }).ToList();
            ViewBag.ddlTutionCertificate = (from MM in db.MTReportSettingMasters
                                            where MM.CertficateName == "TuitionFeeCertificate"
                                            select new MTDDLMaster() { DDLID = MM.AutoID.ToString(), DDLName = MM.ReportName }).ToList();

            if (db.FEEYearlySettings.Where(model => model.AcaStart == AcaStart && model.SchoolID == SchoolID).Count() > 0)
            {
                var FeeReceipt = (from FY in db.FEEYearlySettings
                                  join RS in db.MTReportSettingMasters on FY.FeeReceiptID equals RS.AutoID
                                  where FY.AcaStart == AcaStart && FY.SchoolID == SchoolID && RS.CertficateName == "FeeReceipt"
                                  select new { RS.AutoID }
                                    ).FirstOrDefault();
                ViewData["FeeReceipt"] = FeeReceipt.AutoID;

                var TuitionFeeCertificate = (from FY in db.FEEYearlySettings
                                             join RS in db.MTReportSettingMasters on FY.TuitionCertID equals RS.AutoID
                                             where FY.AcaStart == AcaStart && FY.SchoolID == SchoolID && RS.CertficateName == "TuitionFeeCertificate"
                                             select new { RS.AutoID }
                                          ).FirstOrDefault();
                ViewData["TuitionFeeCertificate"] = TuitionFeeCertificate.AutoID;
            }
            else
            {
                ViewData["FeeReceipt"] = 1;
                ViewData["TuitionFeeCertificate"] = 6;
            }

            return View("FeeYearlySetting");
        }
        [Authorize]
        public JsonResult GetFeeYearlySetting()
        {
            CommonResponse cm = new CommonResponse();
            try
            {
                if (CheckSession())
                {
                    cm.Message = "Login Again";
                    return Json(cm);
                }
                int AcaStart = (int)Session["AcaStart"];
                int SchoolID = (int)Session["SchoolID"];
                FEEYearlySetting FYS = new FEEYearlySetting();
                if (db.FEEYearlySettings.Where(model => model.AcaStart == AcaStart && model.SchoolID == SchoolID).Count() > 0)
                    FYS = db.FEEYearlySettings.Where(model => model.AcaStart == AcaStart && model.SchoolID == SchoolID).ToList()[0];
                else
                    FYS.AutoID = 0;
                ViewData["GetData"] = FYS;
                cm.Message = "";

                object[] objects = new object[1];
                objects[0] = FYS;
                //objects[0] = DbCampusContext.RenderPertialViewtoString(this, "_FeeYearlySettingCreateEdit");
                cm.Data = objects;
                return Json(cm);
            }
            catch (Exception ex)
            {
                cm.Message = ex.Message;
                return Json(cm);
            }
        }
        [Authorize]
        public JsonResult FeeYearlySettingSave(string para_FYS, encodeshdata trdata)
        {
            try
            {
                trdata.actualdata = para_FYS;
                if (RequestAuthentication(trdata) == false)
                {
                    return Json("Login Again");
                }
                if (CheckSession())
                {
                    return Json("Login Again");
                }
                FEEYearlySetting FYS = new FEEYearlySetting();
                JavaScriptSerializer json = new JavaScriptSerializer();
                FYS = (FEEYearlySetting)json.ConvertToType<FEEYearlySetting>(json.DeserializeObject(para_FYS));

                if (ModelState.IsValid)
                {
                    if (FYS.AutoID != 0)
                    {
                        FEEYearlySetting CM = db.FEEYearlySettings.Find(FYS.AutoID);
                        CM.AmexAmt = FYS.AmexAmt;
                        CM.AnlFeeDAmt = FYS.AnlFeeDAmt;
                        CM.AnlFeeDDate = FYS.AnlFeeDDate;
                        CM.BusCardFee = FYS.BusCardFee;
                        CM.FineAmount = FYS.FineAmount;
                        CM.FMRemark = FYS.FMRemark;
                        CM.FPaidSMS = FYS.FPaidSMS;
                        CM.FRemark = FYS.FRemark;
                        CM.FRNo = FYS.FRNo;
                        CM.PRNo = FYS.PRNo;
                        CM.VisaAmt = FYS.VisaAmt;
                        CM.PackDate = FYS.PackDate;
                        CM.FeeReceiptID = FYS.FeeReceiptID;
                        CM.TuitionCertID = FYS.TuitionCertID;
                        CM.UpdateUserID = (int)Session["UID"];
                        CM.UpdateDate = DateTime.Now;
                    }
                    else
                    {
                        int acaStart = Convert.ToInt32(Session["AcaStart"]);
                        int schoolid = Convert.ToInt32(Session["SchoolID"]);
                        if (db.FEEYearlySettings.Where(model => model.AcaStart == acaStart && model.SchoolID == schoolid)
                            .Distinct().Count() == 0)
                        {
                            FYS.AutoID = (db.FEEYearlySettings.Max(model => (int?)model.AutoID) ?? 0) + 1;
                            FYS.SchoolID = (int)Session["SchoolID"];
                            FYS.AcaStart = (int)Session["AcaStart"];
                            FYS.SFHChange = false;
                            FYS.EntryUserID = (int)Session["UID"];
                            FYS.EntryDate = DateTime.Now;
                            db.FEEYearlySettings.Add(FYS);
                        }
                    }
                    db.SaveChanges();
                    return Json("Saved Successfully");
                }
                else
                {
                    return Json(ModelState.Values.SelectMany(model => model.Errors).ToList()[0].ErrorMessage);
                }
            }
            catch (Exception ex)
            {
                return Json(ex.Message);
            }
        }

        [HttpPost]
        [Authorize]
        public JsonResult FeeYearlySettingDelete(int? id)
        {
            try
            {
                if (CheckSession())
                {
                    return Json("Login Again");
                }
                FEEYearlySetting FYS = db.FEEYearlySettings.Find(id);
                if (ModelState.IsValid)
                {
                    db.FEEYearlySettings.Remove(FYS);
                    db.SaveChanges();
                    return Json("Deleted Successfully");
                }
                else
                {
                    return Json(ModelState.Values.SelectMany(model => model.Errors).ToList()[0].ErrorMessage);
                }
            }
            catch (Exception ex)
            {
                return Json(ex.Message);
            }
        }
        #endregion

        #region Fee Fine Setting
        [Authorize]
        public ActionResult FeeFineSettingMaster()
        {
            if (CheckSession()) { return RedirectToAction("Logon", "Logon"); }
            fillPermission();
            List<MTDDLMaster> objddlMster = new List<MTDDLMaster>();
            objddlMster.Add(new MTDDLMaster { DDLID = "Name", DDLName = "Name" });
            ViewBag.FilterDDL = objddlMster.ToList();
            List<MTDDLMaster> objFilter = new List<MTDDLMaster>();

            objFilter.Add(new MTDDLMaster { DDLID = "Contain", DDLName = "Contain" });
            objFilter.Add(new MTDDLMaster { DDLID = "StartWith", DDLName = "Start With" });
            objFilter.Add(new MTDDLMaster { DDLID = "Equal", DDLName = "Equal" });
            ViewBag.FilterType = objFilter;
            ViewData["PageCount"] = 20;
            ViewBag.ddl = fillFineType();

            int FeeHeadID = 4;

            if (System.Web.HttpContext.Current.Request.QueryString["page"] != null && TempData["FeeHeadID"] != null)
                FeeHeadID = (int)TempData["FeeHeadID"];
            TempData["FeeHeadID"] = FeeHeadID;
            ViewData["GetData"] = db.fillFeeFineSettingGrid(Convert.ToInt32(Session["AcaStart"]), Convert.ToInt32(Session["SchoolID"]), FeeHeadID);
            return View("FeeFineSetting");
        }
        [Authorize]
        public JsonResult GetFeeFineSettingData(int FeeHeadID)
        {
            CommonResponse cm = new CommonResponse();
            try
            {
                if (CheckSession())
                {
                    cm.Message = "Login Again";
                    return Json(cm);
                }
                cm.Message = "";
                return GetFeeFineSettingDataCommon(FeeHeadID, cm);
            }
            catch (Exception ex)
            {
                cm.Message = ex.Message;
                return Json(cm);
            }
        }
        [Authorize]
        public JsonResult GetFeeFineSettingDataCommon(int FeeHeadID, CommonResponse cm, string route = "")
        {

            TempData["FeeHeadID"] = FeeHeadID;
            if (FeeHeadID != 3)
                ViewData["GetData"] = db.fillFeeFineSettingGrid(Convert.ToInt32(Session["AcaStart"]), Convert.ToInt32(Session["SchoolID"]), FeeHeadID);
            if (route == "")
                route = RouteData.Values["action"].ToString();


            object[] objects = new object[1];
            if (FeeHeadID != 3)
                objects[0] = DbCampusContext.RenderPertialViewtoString(this, "_FeeFineSettingGrid").Replace(route + "?", "FeeFineSettingMaster?parentid=" + ids[0] + "&amp;menuid=" + ids[1] + "&amp;");
            else
            {
                List<FEEStructureSystem> FSS = db.FEEStructureSystems.Where(model => model.FHID == FeeHeadID && model.FGID == 0).ToList();
                if (FSS.Count > 0)
                    objects[0] = FSS[0].AutoID.ToString() + "^" + Convert.ToDecimal(FSS[0].Amt).ToString("0");
                else
                    objects[0] = "New";
            }
            cm.Data = objects;
            return Json(cm);
        }
        [Authorize]
        public JsonResult FeeFineSettingEdit(int AutoID)
        {
            CommonResponse cm = new CommonResponse();
            try
            {
                if (CheckSession())
                {
                    cm.Message = "Login Again";
                    return Json(cm);
                }

                cm.Message = "";

                object[] objects = new object[3];
                FEEStructureSystem FSS = db.FEEStructureSystems.Where(model => model.AutoID == AutoID).ToList()[0];
                objects[0] = FSS;
                if (db.FEEGroupMasters.Where(model => model.AutoID == FSS.FGID).Count() > 0)
                    objects[1] = db.FEEGroupMasters.Where(model => model.AutoID == FSS.FGID).ToList()[0].FGName;
                if (db.FEEInstallmentMasters.Where(model => model.AutoID == FSS.FIID).Count() > 0)
                    objects[2] = db.FEEInstallmentMasters.Where(model => model.AutoID == FSS.FIID).ToList()[0].FIName;
                cm.Data = objects;
                return Json(cm);
            }
            catch (Exception ex)
            {
                cm.Message = ex.Message;
                return Json(cm);
            }
        }
        [Authorize]
        public JsonResult FeeFineApplyToAll(string FGID, string OldFGID, string FHID, string FIID, string tType, string Date, encodeshdata trdata)
        {
            CommonResponse CR = new CommonResponse();
            try
            {
                int oldFGID = Convert.ToInt32(OldFGID);
                int FeeHeadID = Convert.ToInt32(FHID);
                int FeeFIID = Convert.ToInt32(FIID);
                //string DDate = Convert.ToDateTime(Date,cinfo).ToString(YYY)
                string DDate = ChangeYYYYMMDD(Date);
                string Type = tType.ToString();
                //FEEStructureSystem CM = db.FEEStructureSystems.Find(oldFGID);
                trdata.actualdata = FGID + "#" + oldFGID.ToString() + "#" + FeeFIID.ToString() + "#" + Type.ToString() + "#" + Date;
                if (RequestAuthentication(trdata) == false)
                {
                    return Json("Login Again");
                }
                if (CheckSession())
                {
                    return Json("Login Again");
                }
                if (db.FeeFineAssign(FGID, oldFGID, FeeFIID, (int)Session["UID"], Type, DDate) > 0)
                {
                    db.SaveChanges();
                    CR.Message = "Saved Successfully";
                    return GetFeeFineSettingDataCommon(FeeHeadID, CR);
                    //ViewData["GetData"] = db.fillFeeFineSettingGrid(Convert.ToInt32(Session["AcaStart"]), Convert.ToInt32(Session["SchoolID"]), FeeHeadID);
                    //object[] objects = new object[1];
                    //objects[0] = DbCampusContext.RenderPertialViewtoString(this, "_FeeFineSettingGrid").Replace("FeeFineApplyToAll?", "FeeFineSettingMaster?parentid=" + ids[0] + "&amp;menuid=" + ids[1] + "&amp;");

                    //CR.Data = objects;
                    //return Json(CR);
                    //return Json("Saved Successfully");
                }
                else
                {
                    CR.Message = "Record not found";
                    return Json(CR);
                }
            }
            catch (Exception e)
            {
                CR.Message = e.Message;
                return Json(CR);
            }
        }


        [Authorize]
        public JsonResult FeeFineSettingSave(string para_FSS, encodeshdata trdata)
        {
            CommonResponse obj = new CommonResponse();
            try
            {
                trdata.actualdata = para_FSS;
                if (RequestAuthentication(trdata) == false)
                {
                    obj.Message = "Login Again";
                    return Json(obj);
                }
                if (CheckSession())
                {
                    obj.Message = "Login Again";
                    return Json(obj);
                }
                FEEStructureSystem FSS = new FEEStructureSystem();
                JavaScriptSerializer json = new JavaScriptSerializer();
                FSS = (FEEStructureSystem)json.ConvertToType<FEEStructureSystem>(json.DeserializeObject(para_FSS));

                string msg = CheckFeeFineSetting(FSS);
                if (msg != "")
                {
                    obj.Message = msg;
                    return Json(obj);
                }
                if (ModelState.IsValid)
                {
                    if (FSS.AutoID != 0)
                    {
                        FEEStructureSystem CM = db.FEEStructureSystems.Find(FSS.AutoID);
                        if (CM != null)
                        {
                            CM.FGID = FSS.FGID;
                            CM.FHID = FSS.FHID;
                            CM.FIID = FSS.FIID;
                            CM.Type = FSS.Type;
                            CM.Amt = FSS.Amt;
                            CM.DDate = FSS.DDate;
                            CM.UpdateUserID = (int)Session["UID"];
                            CM.UpdateDate = DateTime.Now;


                            UserUpdateDetails uud = new UserUpdateDetails();
                            uud.UID = Convert.ToInt32(Session["UID"]);
                            uud.SessionID = Session.SessionID;
                            uud.UpdateDate = DateTime.Now;
                            uud.FormName = ids[2];
                            uud.Details = "Fee Fine Setting Update for Fee Head ID = " + FSS.FHID + ",Fee Group ID=" + FSS.FGID + ",Installment ID=" + FSS.FIID + "";
                            db.UserUpdateDetailss.Add(uud);
                        }
                        else
                        {
                            obj.Message = "Record does not exists";
                            return Json(obj);
                        }
                    }
                    else
                    {
                        FSS.EntryUserID = (int)Session["UID"];
                        FSS.EntryDate = DateTime.Now;
                        db.FEEStructureSystems.Add(FSS);


                        UserUpdateDetails uud = new UserUpdateDetails();
                        uud.UID = Convert.ToInt32(Session["UID"]);
                        uud.SessionID = Session.SessionID;
                        uud.UpdateDate = DateTime.Now;
                        uud.FormName = ids[2];
                        uud.Details = "Fee Fine Setting Create for Fee Head ID = " + FSS.FHID + ",Fee Group ID=" + FSS.FGID + ",Installment ID=" + FSS.FIID + "";
                        db.UserUpdateDetailss.Add(uud);

                    }

                    db.SaveChanges();
                    obj.Message = "Saved Successfully";
                    return GetFeeFineSettingDataCommon(FSS.FHID, obj);
                }
                else
                {
                    obj.Message = ModelState.Values.SelectMany(model => model.Errors).ToList()[0].ErrorMessage;
                    return Json(obj);
                }
            }
            catch (Exception ex)
            {
                return Json(ex.Message);
            }
        }

        private string CheckFeeFineSetting(FEEStructureSystem FSS)
        {
            string msg = "";
            if (db.FEEStructureSystems.Where(model => model.AutoID != FSS.AutoID && model.DDate == FSS.DDate && model.FGID == FSS.FGID && model.FIID == FSS.FIID && model.FHID == FSS.FHID).Count() > 0)
            {
                if (FSS.FHID == 3)
                    msg = "Cheque bounce setting already exists";
                else
                    msg = "Only one entry possible in same date";
            }
            else if (FSS.FHID == 4 && FSS.Type != "4" && db.FEEStructureSystems.Where(model => model.AutoID != FSS.AutoID && model.Type == FSS.Type && model.FGID == FSS.FGID && model.FIID == FSS.FIID && model.FHID == FSS.FHID).Count() > 0)
            {
                msg = "Late Fine already assign";
            }
            return msg;
        }

        [HttpPost]
        [Authorize]
        public JsonResult FeeFineSettingDelete(int? id)
        {
            CommonResponse obj = new CommonResponse();
            try
            {
                if (CheckSession())
                {
                    obj.Message = "Login Again";
                    return Json(obj);
                }
                FEEStructureSystem FSS = db.FEEStructureSystems.Find(id);
                if (ModelState.IsValid)
                {
                    db.FEEStructureSystems.Remove(FSS);

                    UserUpdateDetails uud = new UserUpdateDetails();
                    uud.UID = Convert.ToInt32(Session["UID"]);
                    uud.SessionID = Session.SessionID;
                    uud.UpdateDate = DateTime.Now;
                    uud.FormName = ids[2];
                    uud.Details = "Fee Fine Setting Delete for Fee Head ID = " + FSS.FHID + ",Fee Group ID=" + FSS.FGID + ",Installment ID=" + FSS.FIID + "";
                    db.UserUpdateDetailss.Add(uud);

                    db.SaveChanges();
                    obj.Message = "Deleted Successfully";
                    return GetFeeFineSettingDataCommon(FSS.FHID, obj, "FeeFineSettingDelete/" + id.ToString());
                }
                else
                {
                    obj.Message = ModelState.Values.SelectMany(model => model.Errors).ToList()[0].ErrorMessage;
                    return Json(obj);
                }
            }
            catch (Exception ex)
            {
                obj.Message = ex.Message;
                return Json(obj);
            }
        }

        [HttpPost]
        [Authorize]
        public ActionResult FilterFine(string FilterType, string Value)
        {
            CommonResponse cr = new CommonResponse();
            int intSchoolid = (int)Session["SchoolID"];
            int intAcaStart = (int)Session["AcaStart"];
            int FeeHeadID = 4;
            //fillPermission();
            object[] obj = new object[1];
            try
            {
                if (CheckSession())
                {
                    cr.Message = "Login Again";
                    return Json(cr);
                }
                if (FilterType == "StartWith" || FilterType == "Equal" || FilterType == "Contain")
                {
                    var FilterData = db.fillFeeFineSettingFilterGrid(Convert.ToInt32(Session["AcaStart"]), Convert.ToInt32(Session["SchoolID"]), FeeHeadID, FilterType, Value);
                    ViewData["GetData"] = db.fillFeeFineSettingFilterGrid(Convert.ToInt32(Session["AcaStart"]), Convert.ToInt32(Session["SchoolID"]), FeeHeadID, FilterType, Value);
                    ViewData["PageCount"] = FilterData.Count() == 0 ? 1 : FilterData.Count();
                }
                else
                {
                    var FilterData = db.fillFeeFineSettingGrid(Convert.ToInt32(Session["AcaStart"]), Convert.ToInt32(Session["SchoolID"]), FeeHeadID);
                    ViewData["GetData"] = db.fillFeeFineSettingGrid(Convert.ToInt32(Session["AcaStart"]), Convert.ToInt32(Session["SchoolID"]), FeeHeadID);
                    ViewData["PageCount"] = 20;
                }
                //                obj[0] = DbCampusContext.RenderPertialViewtoString(this, "_TRBusStopGrid").Replace("FilterAuthor?", "TRBusStopMaster?menuid=" + ids[0] + "&amp;");
                ViewData["UserPermission"] = db.FillUserMenuPermission(Convert.ToInt32(Session["UID"]), Convert.ToInt32(ids[1]))[0];
                obj[0] = DbCampusContext.RenderPertialViewtoString(this, "_FeeFineSettingGrid").Replace("FilterFine?", "FeeFineSetting?menuid=" + ids[1] + "&amp;");
                cr.Data = obj;
                return Json(cr);
            }
            catch (Exception ex)
            {
                cr.Message = ex.Message;
                return Json(cr);

            }
        }
        #endregion

        #region Fee Exam Subject (NOT IN USE)

        public ActionResult FeeExamSubjectMaster()
        {
            if (CheckSession()) { return RedirectToAction("Logon", "Logon"); }
            fillPermission();
            int AcaStart = Convert.ToInt32(Session["AcaStart"]);
            int SchoolID = Convert.ToInt32(Session["SchoolID"]);
            ViewData["GetData"] = db.FEEInstallmentMasters.Where(model => model.AcaStart == AcaStart && model.SchoolID == SchoolID).OrderBy(model => model.AutoID).Select(model => new GetFeeExamSubjectData { FIID = model.AutoID, FIName = model.FIName, Amount = "0.00", MaxAmt = "NP" }).ToList();
            return View("FeeExamSubjectMaster");
        }

        public JsonResult GetFeeExamSubject(int ExamGroupID, int FeeHeadID)
        {
            CommonResponse cm = new CommonResponse();
            try
            {
                if (CheckSession())
                {
                    cm.Message = "Login Again";
                    return Json(cm);
                }
                cm.Message = "";
                object[] objects = new object[1];
                objects[0] = db.FeeExamSubjectData(Convert.ToInt32(Session["SchoolID"]), Convert.ToInt32(Session["AcaStart"]), FeeHeadID, ExamGroupID);
                cm.Data = objects;
                return Json(cm);
            }
            catch (Exception ex)
            {
                cm.Message = ex.Message;
                return Json(cm);
            }
        }

        public JsonResult FeeExamSubjectSave(List<FeeExamsubjectMaster> FES)
        {
            CommonResponse obj = new CommonResponse();
            try
            {
                if (CheckSession())
                {
                    obj.Message = "Login Again";
                    return Json(obj);
                }
                if (ModelState.IsValid)
                {
                    int AcaStart = (int)Session["AcaStart"];
                    int SchoolID = (int)Session["SchoolID"];
                    int FEGroupID = (int)FES[0].FEGroupID;
                    int FHID = (int)FES[0].FHID;
                    List<FeeExamsubjectMaster> objExam = db.FeeExamsubjectMasters.Where(model => model.FEGroupID == FEGroupID && model.FHID == FHID && model.AcaStart == AcaStart && model.SchoolID == SchoolID).ToList();
                    db.FeeExamsubjectMasters.RemoveRange(objExam);

                    db.SaveChanges();
                    int maxid = db.FeeExamsubjectMasters.Max(model => (int?)model.AutoID) ?? 0;
                    foreach (FeeExamsubjectMaster fs in FES)
                    {
                        if (fs.Amount != null && fs.Amount != 0)
                        {
                            fs.AutoID += maxid;
                            fs.AcaStart = (int)Session["AcaStart"];
                            fs.SchoolID = (int)Session["SchoolID"];
                            fs.EntryUserId = (int)Session["UID"];
                            fs.EntryDate = DateTime.Now;
                            db.FeeExamsubjectMasters.Add(fs);
                        }
                    }
                    UserUpdateDetails uud = new UserUpdateDetails();
                    uud.UID = Convert.ToInt32(Session["UID"]);
                    uud.SessionID = Session.SessionID;
                    uud.UpdateDate = DateTime.Now;
                    uud.FormName = ids[2];
                    uud.Details = "Fee Exam Subject for Fee Head ID = " + FES[0].FHID + ",Fee Group ID=" + FES[0].FEGroupID + ",Installment ID=" + FES[0].FIID + "";
                    db.UserUpdateDetailss.Add(uud);
                    db.SaveChanges();

                    obj.Message = "Saved Successfully";
                    return Json(obj);
                }
                else
                {
                    obj.Message = ModelState.Values.SelectMany(model => model.Errors).ToList()[0].ErrorMessage;
                    return Json(obj);
                }
            }
            catch (Exception ex)
            {
                obj.Message = ex.Message;
                return Json(obj);
            }
        }

        #endregion

        #region Fee Petty Head Master
        [HttpGet]
        [Authorize]
        public ActionResult PettyHeadMaster()
        {
            if (CheckSession()) { return RedirectToAction("Logon", "Logon"); }
            fillPermission();
            int SchoolID = Convert.ToInt32(Session["SchoolID"]);
            ViewData["GetData"] = db.FEEPettyHeadMasters.Where(model => model.SchoolID == SchoolID).OrderBy(model => model.PtyNo).ToList();
            return View("PettyHeadMaster");
        }

        [HttpGet]
        [Authorize]
        public ActionResult PettyHeadCreate(int? id)
        {
            if (CheckSession()) { return RedirectToAction("Logon", "Logon"); }
            FEEPettyHeadMaster rdrFeeAccount = new FEEPettyHeadMaster();
            rdrFeeAccount.AutoID = 0;
            ViewData["AutoID"] = id;
            if (id != null && id > 0)
            {
                FEEPettyHeadMaster CM = db.FEEPettyHeadMasters.Find(id);
                rdrFeeAccount.PHName = CM.PHName;
                rdrFeeAccount.Amt = CM.Amt;
                rdrFeeAccount.PtyNo = CM.PtyNo;
                rdrFeeAccount.AutoID = CM.AutoID;
            }
            return PartialView("_PettyHeadCreateEdit", rdrFeeAccount);
        }

        [HttpPost]
        [Authorize]
        public JsonResult PettyHeadCreate(string FeePettyHead, encodeshdata trdata)
        {
            CommonResponse CR = new CommonResponse();
            try
            {
                trdata.actualdata = FeePettyHead;
                if (RequestAuthentication(trdata) == false)
                {
                    CR.Message = "Login Again";
                    return Json(CR);
                }
                if (CheckSession())
                {
                    CR.Message = "Login Again";
                    return Json(CR);
                }
                FEEPettyHeadMaster FeePettyHeadmodel = new FEEPettyHeadMaster();
                JavaScriptSerializer json = new JavaScriptSerializer();
                FeePettyHeadmodel = (FEEPettyHeadMaster)json.ConvertToType<FEEPettyHeadMaster>(json.DeserializeObject(FeePettyHead));

                int SchoolID = Convert.ToInt32(Session["SchoolID"]);
                if (ModelState.IsValid)
                {
                    string strmsg = CheckFeePettyHead(FeePettyHeadmodel);
                    if (strmsg == "")
                    {
                        if (FeePettyHeadmodel.AutoID != 0)
                        {
                            FEEPettyHeadMaster CM = db.FEEPettyHeadMasters.Find(FeePettyHeadmodel.AutoID);
                            if (CM != null)
                            {
                                CM.PHName = FeePettyHeadmodel.PHName;
                                CM.PtyNo = FeePettyHeadmodel.PtyNo;
                                CM.Amt = FeePettyHeadmodel.Amt;
                                CM.UpdateUserID = (int)Session["UID"];
                                CM.UpdateDate = DateTime.Now;
                            }
                            else
                            {
                                CR.Message = "Record does not exists";
                                return Json(CR);
                            }
                        }
                        else
                        {
                            FeePettyHeadmodel.AutoID = (db.FEEPettyHeadMasters.Max(model => (int?)model.AutoID) ?? 0) + 1;
                            FeePettyHeadmodel.SchoolID = (int)Session["SchoolID"];
                            FeePettyHeadmodel.EntryUserID = (int)Session["UID"];
                            FeePettyHeadmodel.EntryDate = DateTime.Now;
                            db.FEEPettyHeadMasters.Add(FeePettyHeadmodel);
                        }
                        db.SaveChanges();
                        ViewData["GetData"] = db.FEEPettyHeadMasters.Where(model => model.SchoolID == SchoolID).OrderBy(model => model.PtyNo).ToList();
                        CR.Message = "Saved Successfully";
                        object[] objects = new object[1];
                        objects[0] = DbCampusContext.RenderPertialViewtoString(this, "_PettyHeadGrid").Replace("PettyHeadCreate?", "PettyHeadMaster?parentid=" + ids[0] + "&amp;menuid=" + ids[1] + "&amp;");

                        CR.Data = objects;
                        return Json(CR);
                    }
                    else
                    {
                        CR.Message = strmsg;
                        return Json(CR);
                    }
                }
                else
                {
                    CR.Message = ModelState.Values.SelectMany(model => model.Errors).ToList()[0].ErrorMessage;
                    return Json(CR);
                }
            }
            catch (Exception ex)
            {
                CR.Message = ex.Message;
                return Json(CR);
            }
        }

        private string CheckFeePettyHead(FEEPettyHeadMaster cm)
        {
            string str = "";
            int SchoolID = (int)Session["SchoolID"];
            if (db.FEEPettyHeadMasters.Where(model => (model.PHName == cm.PHName && model.AutoID != cm.AutoID && model.SchoolID == SchoolID)).Count() > 0)
            {
                str = "Fee Account Name Already Exists";
            }
            if (db.FEEPettyHeadMasters.Where(model => (model.PtyNo == cm.PtyNo && model.AutoID != cm.AutoID && model.SchoolID == SchoolID)).Count() > 0)
            {
                str = "Priority No Already Exists";
            }
            return str;
        }

        [HttpPost]
        [Authorize]
        public JsonResult PettyHeadDelete(int? id)
        {
            CommonResponse CR = new CommonResponse();
            string[] str = { "", "" };
            try
            {
                if (CheckSession())
                {
                    CR.Message = "Login Again";
                    return Json(CR);
                }
                int SchoolID = Convert.ToInt32(Session["SchoolID"]);
                FEEPettyHeadMaster CM = db.FEEPettyHeadMasters.Find(id);
                if (ModelState.IsValid)
                {
                    if (db.spGetPrimaryValueExists("PettyHeadID", "FEEPettyHeadMaster", CM.AutoID.ToString())[0].TotalRecords > 0)
                    {
                        CR.Message = "Petty Head Already in Use";
                        return Json(CR);
                    }
                    db.FEEPettyHeadMasters.Remove(CM);
                    db.SaveChanges();
                    ViewData["GetData"] = db.FEEPettyHeadMasters.Where(model => model.SchoolID == SchoolID).OrderBy(model => model.PtyNo).ToList();

                    CR.Message = "Deleted Successfully";
                    object[] objects = new object[1];
                    objects[0] = DbCampusContext.RenderPertialViewtoString(this, "_PettyHeadGrid").Replace("PettyHeadDelete/" + id.ToString() + "?", "PettyHeadMaster?parentid=" + ids[0] + "&amp;menuid=" + ids[1] + "&amp;");
                    CR.Data = objects;
                    return Json(CR);
                }
                else
                {
                    CR.Message = ModelState.Values.SelectMany(model => model.Errors).ToList()[0].ErrorMessage;
                    return Json(CR);
                }
            }
            catch (Exception ex)
            {
                CR.Message = ex.Message;
                return Json(CR);
            }

        }
        #endregion

        #region Fee Activity Master
        [Authorize]
        public ActionResult FeeActivityMaster()
        {
            if (CheckSession()) { return RedirectToAction("Logon", "Logon"); }
            fillPermission();
            int AcaStart = Convert.ToInt32(Session["AcaStart"]);
            int SchoolID = Convert.ToInt32(Session["SchoolID"]);
            ViewData["GetData"] = db.fillFeeActivityMasterGrid(AcaStart, SchoolID, 0);
            return View("FeeActivityMaster");
        }
        [Authorize]
        public JsonResult GetFeeActivity(int FeeHeadID)
        {
            CommonResponse cm = new CommonResponse();
            try
            {
                if (CheckSession())
                {
                    cm.Message = "Login Again";
                    return Json(cm);
                }
                cm.Message = "";
                object[] objects = new object[1];
                objects[0] = db.fillFeeActivityMasterGrid(Convert.ToInt32(Session["AcaStart"]), Convert.ToInt32(Session["SchoolID"]), FeeHeadID);
                cm.Data = objects;
                return Json(cm);
            }
            catch (Exception ex)
            {
                cm.Message = ex.Message;
                return Json(cm);
            }
        }
        [Authorize]
        public JsonResult FeeActivitySave(string para_FES, encodeshdata trdata)
        {
            CommonResponse obj = new CommonResponse();
            try
            {
                trdata.actualdata = para_FES;
                if (RequestAuthentication(trdata) == false)
                {
                    obj.Message = "Login Again";
                    return Json(obj);
                }
                if (CheckSession())
                {
                    obj.Message = "Login Again";
                    return Json(obj);
                }
                List<FeeActivityMaster> FES = new List<FeeActivityMaster>();
                JavaScriptSerializer json = new JavaScriptSerializer();
                FES = (List<FeeActivityMaster>)json.ConvertToType<List<FeeActivityMaster>>(json.DeserializeObject(para_FES));

                if (ModelState.IsValid)
                {
                    int AcaStart = (int)Session["AcaStart"];
                    int SchoolID = (int)Session["SchoolID"];
                    int FHID = (int)FES[0].FHID;
                    List<FeeActivityMaster> objExam = db.FeeActivityMasters.Where(model => model.FHID == FHID && model.AcaStart == AcaStart && model.SchoolID == SchoolID).ToList();
                    db.FeeActivityMasters.RemoveRange(objExam);

                    foreach (FeeActivityMaster fs in FES)
                    {
                        if (fs.Amount != null && fs.Amount != 0)
                        {
                            fs.AcaStart = (int)Session["AcaStart"];
                            fs.SchoolID = (int)Session["SchoolID"];
                            fs.EntryUserId = (int)Session["UID"];
                            fs.EntryDate = DateTime.Now;
                            string str = CheckFeeActivityMaster(fs);
                            if (str != "")
                            {
                                obj.Message = str;
                                return Json(obj);
                            }
                            else
                                db.FeeActivityMasters.Add(fs);
                        }
                    }
                    UserUpdateDetails uud = new UserUpdateDetails();
                    uud.UID = Convert.ToInt32(Session["UID"]);
                    uud.SessionID = Session.SessionID;
                    uud.UpdateDate = DateTime.Now;
                    uud.FormName = ids[2];
                    uud.Details = "Fee Activity for Fee Head ID = " + FES[0].FHID + ",Installment ID=" + FES[0].FIID + "";
                    db.UserUpdateDetailss.Add(uud);
                    db.SaveChanges();

                    obj.Message = "Saved Successfully";
                    return Json(obj);
                }
                else
                {
                    obj.Message = ModelState.Values.SelectMany(model => model.Errors).ToList()[0].ErrorMessage;
                    return Json(obj);
                }
            }
            catch (Exception ex)
            {
                obj.Message = ex.Message;
                return Json(obj);
            }
        }

        private string CheckFeeActivityMaster(FeeActivityMaster obj)
        {
            string str = "";
            int count = (from FAM in db.FEEAccountMasters
                         join FAD in db.FEEAccountDetails on FAM.AutoID equals FAD.BLNo
                         where FAM.AcaStart == obj.AcaStart && FAM.Cancel == false && FAM.SchoolID == obj.SchoolID && FAD.FHeadID == obj.FHID && FAD.FIID == obj.FIID && FAD.Amount > obj.Amount
                         select FAM).Count();
            if (count > 0)
            {
                str = "You cannot modify this record";
            }
            return str;
        }

        #endregion

        #region Fee Concession Settings Master
        [Authorize]
        public ActionResult FeeConcessionSettings()
        {
            if (CheckSession()) { return RedirectToAction("Logon", "Logon"); }
            fillPermission();
            int AcaStart = Convert.ToInt32(Session["AcaStart"]);
            int SchoolID = Convert.ToInt32(Session["SchoolID"]);
            ViewData["GetData"] = db.fillFeeConcessionSettingsGrid(AcaStart, SchoolID, 0);
            return View("FeeConcessionSettings");
        }
        [Authorize]
        public JsonResult GetFeeConcessionSettings(int FeeConcessTypeID)
        {
            CommonResponse cm = new CommonResponse();
            try
            {
                if (CheckSession())
                {
                    cm.Message = "Login Again";
                    return Json(cm);
                }
                cm.Message = "";
                object[] objects = new object[1];
                objects[0] = db.fillFeeConcessionSettingsGrid(Convert.ToInt32(Session["AcaStart"]), Convert.ToInt32(Session["SchoolID"]), FeeConcessTypeID);
                cm.Data = objects;
                return Json(cm);
            }
            catch (Exception ex)
            {
                cm.Message = ex.Message;
                return Json(cm);
            }
        }
        [Authorize]
        public JsonResult FeeConcessionSettingsSave(string para_FCS, encodeshdata trdata)
        {
            CommonResponse obj = new CommonResponse();
            try
            {
                trdata.actualdata = para_FCS;
                if (RequestAuthentication(trdata) == false)
                {
                    obj.Message = "Login Again";
                    return Json(obj);
                }
                if (CheckSession())
                {
                    obj.Message = "Login Again";
                    return Json(obj);
                }
                List<FeeConcessionSettings> FCS = new List<FeeConcessionSettings>();
                JavaScriptSerializer json = new JavaScriptSerializer();
                FCS = (List<FeeConcessionSettings>)json.ConvertToType<List<FeeConcessionSettings>>(json.DeserializeObject(para_FCS));

                if (ModelState.IsValid)
                {
                    int AcaStart = (int)Session["AcaStart"];
                    int SchoolID = (int)Session["SchoolID"];
                    int FeeConcessTypeID = (int)FCS[0].FeeConcessTypeID;
                    List<FeeConcessionSettings> objExam = db.FeeConcessionSettingss.Where(model => model.FeeConcessTypeID == FeeConcessTypeID && model.AcaStart == AcaStart && model.SchoolID == SchoolID).ToList();
                    db.FeeConcessionSettingss.RemoveRange(objExam);

                    foreach (FeeConcessionSettings fs in FCS)
                    {
                        if (fs.Perct != null && fs.Perct != 0 && fs.Perct <= 100)
                        {
                            fs.AcaStart = (int)Session["AcaStart"];
                            fs.SchoolID = (int)Session["SchoolID"];
                            fs.EntryUserID = (int)Session["UID"];
                            fs.EntryDate = DateTime.Now;
                            db.FeeConcessionSettingss.Add(fs);
                        }
                    }
                    UserUpdateDetails uud = new UserUpdateDetails();
                    uud.UID = Convert.ToInt32(Session["UID"]);
                    uud.SessionID = Session.SessionID;
                    uud.UpdateDate = DateTime.Now;
                    uud.FormName = ids[2];
                    uud.Details = "Fee Concession for Fee Concession Type ID=" + FCS[0].FeeConcessTypeID + ",Fee Head ID = " + FCS[0].FHID + "";
                    db.UserUpdateDetailss.Add(uud);
                    db.SaveChanges();

                    obj.Message = "Saved Successfully";
                    return Json(obj);
                }
                else
                {
                    obj.Message = ModelState.Values.SelectMany(model => model.Errors).ToList()[0].ErrorMessage;
                    return Json(obj);
                }
            }
            catch (Exception ex)
            {
                obj.Message = ex.Message;
                return Json(obj);
            }
        }

        #endregion

        #region Fee Structure Master
        [Authorize]
        public ActionResult FeeStructureMaster()
        {
            if (CheckSession()) { return RedirectToAction("Logon", "Logon"); }
            fillPermission();
            int acastart = (int)Session["AcaStart"];
            int schoolid = (int)Session["SchoolID"];
            List<MTDDLMaster> obj = new List<MTDDLMaster>();
            MTDDLMaster fm = new MTDDLMaster();
            fm.DDLID = "0";
            fm.DDLName = "Select Fee Group";
            obj.Add(fm);
            obj.AddRange(db.FEEGroupMasters.Where(model => model.AcaStart == acastart && model.SchoolID == schoolid).OrderBy(model => model.FGName).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.FGName }).ToList());
            ViewBag.ddlFeeGroup = obj;
            return View();
        }
        [Authorize]
        public JsonResult FeeStructureRecord(int FGID)
        {
            CommonResponse CR = new CommonResponse();
            try
            {
                if (CheckSession())
                {
                    CR.Message = "Login Again";
                    return Json(CR);
                }
                if (db.FEEGroupMasters.Where(model => model.AutoID == FGID).Count() > 0)
                {
                    CR.Message = "";

                    int acastart = (int)Session["AcaStart"];
                    int schoolid = (int)Session["SchoolID"];

                    if (db.FEEStructureUserMasters.Where(model => model.FGID == FGID).Count() == 0)
                    {
                        CR.Message = "New";
                    }

                    FEEHeadMaster fm = new FEEHeadMaster();
                    fm.AutoID = 0;
                    fm.FHName = "";
                    ViewBag.ddlType = fillFeeInstallmentType();
                    ViewBag.GetData = db.FeeBindFeeStructure(FGID, acastart, schoolid).Tables[0];
                    object[] obj = new object[1];
                    obj[0] = DbCampusContext.RenderPertialViewtoString(this, "_FeeStructureMasterGrid").Replace("FeeStructureRecord", "FeeStructureMaster");
                    CR.Data = obj;

                    return Json(CR);
                }
                else
                {
                    CR.Message = "Record not found";
                    return Json(CR);
                }
            }
            catch (Exception e)
            {
                CR.Message = e.Message;
                return Json(CR);
            }
        }
        [Authorize]
        public JsonResult FeeStructureSave(string[][] main, string[] inst, int FeeGroupId, encodeshdata trdata)
        {
            string strDetails = "";
            try
            {
                trdata.actualdata = GetMultidimentionalArrayInString(main) + "#" + "[" + "\"" + string.Join("\",\"", inst) + "\"]" + "#" + FeeGroupId.ToString();
                if (RequestAuthentication(trdata) == false)
                {
                    return Json("Login Again");
                }
                if (CheckSession())
                {
                    return Json("Login Again");
                }
                if (ModelState.IsValid)
                {

                    using (TransactionScope transaction = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = System.Transactions.IsolationLevel.Serializable }))
                    {

                        int AcaStart = (int)Session["AcaStart"];
                        int SchoolID = (int)Session["SchoolID"];
                        db.SpGetDue(FeeGroupId, AcaStart, SchoolID);
                        foreach (string[] fsm in main)
                        {
                            int StrID = 0;
                            //decimal sum = 0;
                            //for (int i = 3; i < fsm.Count(); i++)
                            //{
                            //    if (fsm[i].Trim() != "")
                            //        sum += Convert.ToDecimal(fsm[i]);
                            //}
                            //if (sum > 0)
                            //{
                            FEEStructureUserMaster obj;
                            int id = Convert.ToInt32(fsm[2]);
                            if (id != 0)
                            {
                                obj = db.FEEStructureUserMasters.Find(id);
                                StrID = Convert.ToInt32(fsm[2]);
                                obj.FGID = FeeGroupId;
                                obj.FHID = Convert.ToInt32(fsm[0]);
                                obj.Type = fsm[1];
                                obj.UpdateUserID = (int)Session["UID"];
                                obj.UpdateDate = DateTime.Now;

                                //db.FEEStructureUserDetails.RemoveRange(db.FEEStructureUserDetails.Where(model => model.StructureID == StrID));
                                strDetails = "Fee Structure Modified For FeeGroupID=" + FeeGroupId + " AND FeeHeadId=" + fsm[0] + "";

                                List<FEEStructureUserDetail> sd = new List<FEEStructureUserDetail>();
                                for (int i = 0; i < inst.Count(); i++)
                                {
                                    if (fsm[i + 3].Trim() != "" && Convert.ToDecimal(fsm[i + 3]) > 0)
                                    {
                                        int FeeInstallmentID = Convert.ToInt32(inst[i]);
                                        FEEStructureUserDetail fsd = db.FEEStructureUserDetails.Where(model => model.StructureID == StrID && model.FIID == FeeInstallmentID).FirstOrDefault();
                                        if (fsd == null)
                                        {
                                            fsd = new FEEStructureUserDetail();
                                            fsd.FIID = Convert.ToInt32(inst[i]);
                                            fsd.StructureID = StrID;
                                            fsd.Amount = Convert.ToDecimal(fsm[i + 3]);
                                            sd.Add(fsd);
                                        }
                                        else
                                        {
                                            fsd.Amount = Convert.ToDecimal(fsm[i + 3]);
                                        }
                                        if (CheckStructure(obj, fsd) != "")
                                        {
                                            return Json("You Cannot Modify This Record");
                                        }
                                    }
                                    else
                                    {
                                        int FeeInstallmentID = Convert.ToInt32(inst[i]);
                                        FEEStructureUserDetail fsd = db.FEEStructureUserDetails.Where(model => model.StructureID == StrID && model.FIID == FeeInstallmentID).FirstOrDefault();
                                        if (fsd != null)
                                        {
                                            fsd.Amount = 0;
                                            if (CheckStructure(obj, fsd) != "")
                                            {
                                                return Json("You Cannot Modify This Record");
                                            }
                                            db.FEEStructureUserDetails.Remove(fsd);
                                        }
                                    }
                                }
                                db.FEEStructureUserDetails.AddRange(sd);
                                db.SaveChanges();
                                if (db.FEEStructureUserDetails.Where(model => model.StructureID == StrID).Count() == 0)
                                {
                                    db.FEEStructureUserMasters.Remove(obj);
                                }
                            }
                            else
                            {
                                StrID = (db.FEEStructureUserMasters.Max(model => (int?)model.AutoID) ?? 0) + 1;
                                obj = new FEEStructureUserMaster();
                                obj.AutoID = StrID;
                                obj.FGID = FeeGroupId;
                                obj.FHID = Convert.ToInt32(fsm[0]);
                                obj.Type = fsm[1];
                                obj.EntryUserID = (int)Session["UID"];
                                obj.EntryDate = DateTime.Now;
                                strDetails = "Fee Structure Added For FeeGroupID=" + FeeGroupId + " AND FeeHeadId=" + fsm[0] + "";
                                int count = 0;
                                List<FEEStructureUserDetail> sd = new List<FEEStructureUserDetail>();
                                for (int i = 0; i < inst.Count(); i++)
                                {
                                    if (fsm[i + 3].Trim() != "" && Convert.ToDecimal(fsm[i + 3]) > 0)
                                    {
                                        FEEStructureUserDetail fsd = new FEEStructureUserDetail();
                                        fsd.FIID = Convert.ToInt32(inst[i]);
                                        fsd.StructureID = StrID;
                                        fsd.Amount = Convert.ToDecimal(fsm[i + 3]);
                                        if (CheckStructure(obj, fsd) != "")
                                        {
                                            return Json("You Cannot Modify This Record");
                                        }
                                        sd.Add(fsd);
                                        count++;
                                    }
                                }
                                if (count > 0)
                                {
                                    db.FEEStructureUserMasters.Add(obj);
                                    db.SaveChanges();
                                    db.FEEStructureUserDetails.AddRange(sd);
                                }
                            }
                            //}
                            //else
                            //{
                            //    StrID = Convert.ToInt32(fsm[2]);
                            //    if (StrID > 0)
                            //    {
                            //        db.FEEStructureUserDetails.RemoveRange(db.FEEStructureUserDetails.Where(model => model.StructureID == StrID));
                            //        db.SaveChanges();
                            //        db.FEEStructureUserMasters.Remove(db.FEEStructureUserMasters.Find(StrID));
                            //    }
                            //}
                        }
                        UserUpdateDetails uud = new UserUpdateDetails();
                        uud.UID = Convert.ToInt32(Session["UID"]);
                        uud.SessionID = Session.SessionID;
                        uud.UpdateDate = DateTime.Now;
                        uud.FormName = ids[2];
                        uud.Details = strDetails;
                        db.UserUpdateDetailss.Add(uud);
                        db.SaveChanges();
                        transaction.Complete();
                        return Json("Saved Successfully");
                    }
                }
                else
                {
                    return Json(ModelState.Values.SelectMany(model => model.Errors).ToList()[0].ErrorMessage);
                }
            }
            catch (Exception ex)
            {
                return Json(ex.Message);
            }
        }
        [Authorize]
        public JsonResult FeeStructureDelete(int id)
        {
            try
            {
                if (CheckSession())
                {
                    return Json("Login Again");
                }
                int count = 0;
                List<FEEStructureUserMaster> FSM = db.FEEStructureUserMasters.Where(model => model.FGID == id).ToList();

                if (ModelState.IsValid)
                {
                    foreach (FEEStructureUserMaster fm in FSM)
                    {
                        //foreach (FEEStructureUserDetail fd in FSD)
                        //{
                        //    if (CheckStructureDelete(fm, fd) == "")
                        //    {
                        //        db.FEEStructureUserDetails.Remove(fd);
                        //        count++;
                        //    }
                        //}
                        List<FEEStructureUserDetail> FSD = db.FEEStructureUserDetails.Where(model => model.StructureID == fm.AutoID).ToList();
                        int chkdel = 0;
                        for (int i = 0; i < FSD.Count; i++)
                        {
                            if (CheckStructureDelete(fm, FSD[i]) == "")
                            {
                                db.FEEStructureUserDetails.Remove(FSD[i]);
                                chkdel++;
                                count++;
                            }
                        }
                        if (chkdel == FSD.Count)
                            db.FEEStructureUserMasters.Remove(fm);
                    }
                    if (count > 0)
                    {
                        UserUpdateDetails uud = new UserUpdateDetails();
                        uud.UID = Convert.ToInt32(Session["UID"]);
                        uud.SessionID = Session.SessionID;
                        uud.UpdateDate = DateTime.Now;
                        uud.FormName = ids[2];
                        uud.Details = "Fee Structure Delete for Fee Group ID = " + id + "";
                        db.UserUpdateDetailss.Add(uud);
                        db.SaveChanges();
                        return Json("Deleted Successfully");
                    }
                    else
                        return Json("All Records in Use");
                }
                else
                {
                    return Json(ModelState.Values.SelectMany(model => model.Errors).ToList()[0].ErrorMessage);
                }
            }
            catch (Exception ex)
            {
                return Json(ex.Message);
            }
        }
        private string CheckStructure(FEEStructureUserMaster fsm, FEEStructureUserDetail fsd)
        {
            int acaStart = (int)Session["AcaStart"];
            int schoolId = (int)Session["SchoolID"];

            if (db.FeeStructureMasterCheck(fsm.FGID, fsd.FIID, fsm.FHID, fsd.Amount, acaStart, schoolId).Single().TotalRecords > 0)
            {
                return "You Cannot Modify This Record";
            }
            else
                return "";
        }

        private string CheckStructureDelete(FEEStructureUserMaster fsm, FEEStructureUserDetail fsd)
        {
            int acaStart = (int)Session["AcaStart"];
            int schoolId = (int)Session["SchoolID"];
            if (db.FeeStructureMasterCheck(fsm.FGID, fsd.FIID, fsm.FHID, 0, acaStart, schoolId).Single().TotalRecords > 0)
            {
                return "You Cannot Delete This Record";
            }
            else
                return "";
        }

        [Authorize]
        public JsonResult FeeGroupApplyToAll(string FGID, int oldFGID, encodeshdata trdata)
        {
            try
            {
                trdata.actualdata = FGID + "#" + oldFGID.ToString();
                if (RequestAuthentication(trdata) == false)
                {
                    return Json("Login Again");
                }
                if (CheckSession())
                {
                    return Json("Login Again");
                }
                if (db.FeeStructureAmountAssignment(FGID, oldFGID, (int)Session["UID"]) > 0)
                {
                    return Json("Saved Successfully");
                }
                else
                {
                    return Json("Record not found");
                }
            }
            catch (Exception e)
            {
                return Json(e.Message);
            }
        }
        #endregion

        #region Fee Concession Entry
        [Authorize]
        public ActionResult FeeConcessionEntry()
        {
            if (CheckSession()) { return RedirectToAction("Logon", "Logon"); }
            fillPermission();
            return View("FeeConcessionEntry");
        }
        [Authorize]
        public JsonResult FeeConcessionRecord(int StdID, int FGID)
        {
            CommonResponse CR = new CommonResponse();
            try
            {
                if (CheckSession())
                {
                    CR.Message = "Login Again";
                    return Json(CR);
                }

                int acastart = (int)Session["AcaStart"];
                int schoolid = (int)Session["SchoolID"];

                DataSet ds = db.FeeBindConcessionEntry(StdID, acastart, schoolid);
                if (ds.Tables.Count > 0)
                    ViewData["GetData"] = ds.Tables[0];
                else
                {
                    CR.Message = "Fee structure not define";
                    return Json(CR);
                }
                object[] obj = new object[3];
                obj[0] = DbCampusContext.RenderPertialViewtoString(this, "_FeeConcessionEntryGrid");
                List<FEEConcessionMaster> FCM = db.FEEConcessionMasters.Where(model => model.StdID == StdID && model.AcaStart == acastart).ToList();
                if (FCM.Count > 0)
                {
                    obj[1] = db.FEEConcessionTypeMasters.Find(FCM[0].FCTypeID);
                    obj[2] = FCM[0].AutoID;
                    CR.Message = "";
                }
                else
                    CR.Message = "New";
                CR.Data = obj;

                return Json(CR);
            }
            catch (Exception e)
            {
                CR.Message = e.Message;
                return Json(CR);
            }
        }
        [Authorize]
        public JsonResult FeeConcessionSave(string para_FCM, string para_FCD, encodeshdata trdata)
        {
            try
            {
                trdata.actualdata = para_FCM + "#" + para_FCD;
                if (RequestAuthentication(trdata) == false)
                {
                    return Json("Login Again");
                }
                if (CheckSession())
                {
                    return Json("Login Again");
                }
                FEEConcessionMaster FCM = new FEEConcessionMaster();
                JavaScriptSerializer json = new JavaScriptSerializer();
                FCM = (FEEConcessionMaster)json.ConvertToType<FEEConcessionMaster>(json.DeserializeObject(para_FCM));

                List<FEEConcessionDetail> FCD = new List<FEEConcessionDetail>();
                FCD = (List<FEEConcessionDetail>)json.ConvertToType<List<FEEConcessionDetail>>(json.DeserializeObject(para_FCD));

                if (ModelState.IsValid)
                {

                    using (TransactionScope transaction = new TransactionScope())
                    {
                        if (FCM.AutoID != 0)
                        {
                            FEEConcessionMaster FCMObj = db.FEEConcessionMasters.Find(FCM.AutoID);
                            if (FCMObj != null)
                            {
                                FCMObj.FCTypeID = FCM.FCTypeID;
                                FCMObj.StdID = FCM.StdID;
                                FCMObj.UpdateUserID = (int)Session["UID"];
                                FCMObj.UpdateDate = DateTime.Now;

                                List<FEEConcessionDetail> objDetail = db.FEEConcessionDetails.Where(model => model.ConID == FCM.AutoID).ToList();
                                db.FEEConcessionDetails.RemoveRange(objDetail);
                            }
                            else
                            {
                                return Json("Record does not exists");
                            }
                        }
                        else
                        {
                            int AcaStart = (int)Session["AcaStart"];
                            FEEConcessionMaster FCMObj = db.FEEConcessionMasters.Where(model => model.AcaStart == AcaStart && model.StdID == FCM.StdID).FirstOrDefault();
                            if (FCMObj == null)
                            {
                                FCM.AutoID = (db.FEEConcessionMasters.Max(model => (int?)model.AutoID) ?? 0) + 1;
                                FCM.AcaStart = AcaStart;
                                FCM.EntryUserID = (int)Session["UID"];
                                FCM.EntryDate = DateTime.Now;
                                db.FEEConcessionMasters.Add(FCM);
                            }
                            else
                            {
                                FCMObj.FCTypeID = FCM.FCTypeID;
                                FCMObj.StdID = FCM.StdID;
                                FCMObj.UpdateUserID = (int)Session["UID"];
                                FCMObj.UpdateDate = DateTime.Now;

                                List<FEEConcessionDetail> objDetail = db.FEEConcessionDetails.Where(model => model.ConID == FCMObj.AutoID).ToList();
                                db.FEEConcessionDetails.RemoveRange(objDetail);
                            }
                        }
                        List<FEEConcessionDetail> fsSave = new List<FEEConcessionDetail>();
                        foreach (FEEConcessionDetail fs in FCD)
                        {
                            if (fs.Amount != 0)
                            {
                                string str = CheckFeeConcessionEntry(FCM, fs);
                                if (str != "")
                                {
                                    return Json(str);
                                }
                                else
                                {
                                    fs.ConID = FCM.AutoID;
                                    fsSave.Add(fs);
                                }
                            }
                        }
                        if (fsSave.Count() > 0)
                        {
                            db.SaveChanges();
                            db.FEEConcessionDetails.AddRange(fsSave);
                        }
                        UserUpdateDetails uud = new UserUpdateDetails();
                        uud.UID = Convert.ToInt32(Session["UID"]);
                        uud.SessionID = Session.SessionID;
                        uud.UpdateDate = DateTime.Now;
                        uud.FormName = ids[2];
                        uud.Details = "Fee Concession Entry for StudentID=" + FCM.StdID + "";
                        db.UserUpdateDetailss.Add(uud);
                        db.SaveChanges();
                        transaction.Complete();
                        return Json("Saved Successfully");
                    }
                }
                else
                {
                    return Json(ModelState.Values.SelectMany(model => model.Errors).ToList()[0].ErrorMessage);
                }
            }
            catch (Exception ex)
            {
                return Json(ex.Message);
            }
        }
        [Authorize]
        public JsonResult FeeConcessionDelete(int id)
        {
            try
            {
                if (CheckSession())
                {
                    return Json("Login Again");
                }
                FEEConcessionMaster FCM = db.FEEConcessionMasters.Find(id);
                if (FCM != null)
                {
                    int count = 0;
                    List<FEEConcessionDetail> FCD = db.FEEConcessionDetails.Where(model => model.ConID == id).ToList();
                    if (ModelState.IsValid)
                    {
                        foreach (FEEConcessionDetail fd in FCD)
                        {
                            if (CheckFeeConcessionDelete(FCM, fd) == "Remove")
                            {
                                db.FEEConcessionDetails.Remove(fd);
                                count++;
                            }
                        }
                        if (count > 0)
                        {
                            db.SaveChanges();
                            if (db.FEEConcessionDetails.Where(model => model.ConID == id).Count() == 0)
                            {
                                db.FEEConcessionMasters.Remove(FCM);
                            }
                            UserUpdateDetails uud = new UserUpdateDetails();
                            uud.UID = Convert.ToInt32(Session["UID"]);
                            uud.SessionID = Session.SessionID;
                            uud.UpdateDate = DateTime.Now;
                            uud.FormName = ids[2];
                            uud.Details = "Fee Concession Delete for StudentID = " + FCM.StdID + "";
                            db.UserUpdateDetailss.Add(uud);
                            db.SaveChanges();
                            return Json("Deleted Successfully");
                        }
                        else
                            return Json("All Concession Entry in Use");
                    }
                    else
                    {
                        return Json(ModelState.Values.SelectMany(model => model.Errors).ToList()[0].ErrorMessage);
                    }
                }
                else
                {
                    return Json("Record not Found");
                }
            }
            catch (Exception ex)
            {
                return Json(ex.Message);
            }
        }

        public string CheckFeeConcessionEntry(FEEConcessionMaster FCM, FEEConcessionDetail FCD)
        {
            int acaStart = (int)Session["AcaStart"];
            int schoolId = (int)Session["SchoolID"];
            var obj = from Main in
                          (from FAM in db.FEEAccountMasters
                           join FAD in db.FEEAccountDetails on FAM.AutoID equals FAD.BLNo
                           where FAM.AcaStart == acaStart && FAM.SchoolID == schoolId && FAD.ChqBounce == false && FAM.Cancel == false &&
                           FAD.Type == 0 && FAM.StdID == FCM.StdID && FAD.FIID == FCD.FIID && FAD.FHeadID == FCD.FHID
                           select new { FAD.ConAmount })
                      group Main by Main.ConAmount into m
                      select new { ConAmt = m.Sum(model => model.ConAmount) };

            foreach (var rdata in obj)
            {
                if (rdata.ConAmt > FCD.Amount)
                {
                    return "Concession Amount could not less than To Be Paid Concession Amount";
                }
            }
            if (db.FEEFixedAmounts.Where(model => model.StdID == FCM.StdID && model.FHID == FCD.FHID && model.FIID == FCD.FIID && model.AcaStart == acaStart).Count() > 0)
            {
                return "Concession entry not allow if Fee Fixed entry already exists";
            }
            return "";
        }

        public string CheckFeeConcessionDelete(FEEConcessionMaster FCM, FEEConcessionDetail FCD)
        {
            int acaStart = (int)Session["AcaStart"];
            int schoolId = (int)Session["SchoolID"];
            int FeeCount = (from FAM in db.FEEAccountMasters
                            join FAD in db.FEEAccountDetails on FAM.AutoID equals FAD.BLNo
                            where FAM.AcaStart == acaStart && FAM.SchoolID == schoolId && FAD.ChqBounce == false && FAM.Cancel == false &&
                            FAD.Type == 0 && FAM.StdID == FCM.StdID && FAD.FIID == FCD.FIID && FAD.FHeadID == FCD.FHID
                            select new { FAD.ConAmount }).ToList().Count();

            if (FeeCount == 0)
            {
                return "Remove";
            }

            return "";
        }
        #endregion

        #region Fee Fixed Entry
        [Authorize]
        public ActionResult FeeFixedAmountEntry(int? id)
        {
            if (CheckSession()) { return RedirectToAction("Logon", "Logon"); }
            fillPermission();
            return View("FeeFixedAmountEntry");
        }
        [Authorize]
        public JsonResult FeeFixedAmountClassWiseRecord(int FHID, int FIID, int ClassID, int SectionID)
        {
            CommonResponse CR = new CommonResponse();
            try
            {
                if (CheckSession())
                {
                    CR.Message = "Login Again";
                    return Json(CR);
                }

                int acastart = (int)Session["AcaStart"];
                int schoolid = (int)Session["SchoolID"];

                ViewData["GetData"] = db.FeeFixedAmountEntryClassWise(acastart, schoolid, FHID, FIID, ClassID, SectionID);
                ViewData["Type"] = 1;
                object[] obj = new object[2];
                obj[0] = DbCampusContext.RenderPertialViewtoString(this, "_FeeFixedAmountEntryGrid");
                obj[1] = 1;

                CR.Message = "";
                CR.Data = obj;

                return Json(CR);
            }
            catch (Exception e)
            {
                CR.Message = e.Message;
                return Json(CR);
            }
        }
        [Authorize]
        public JsonResult FeeFixedAmountStudentWiseRecord(int FIID, int SID)
        {
            CommonResponse CR = new CommonResponse();
            try
            {
                if (CheckSession())
                {
                    CR.Message = "Login Again";
                    return Json(CR);
                }

                int acastart = (int)Session["AcaStart"];
                int schoolid = (int)Session["SchoolID"];

                ViewData["GetData"] = db.FeeFixedAmountEntryStudentWise(acastart, schoolid, FIID, SID);
                ViewData["Type"] = 2;
                object[] obj = new object[2];
                obj[0] = DbCampusContext.RenderPertialViewtoString(this, "_FeeFixedAmountEntryGrid");
                obj[1] = 2;
                CR.Message = "";
                CR.Data = obj;

                return Json(CR);
            }
            catch (Exception e)
            {
                CR.Message = e.Message;
                return Json(CR);
            }
        }
        [Authorize]
        public JsonResult FeeFixedAmountSave(string para_FFA, string saveDetails, encodeshdata trdata)
        {
            try
            {
                trdata.actualdata = para_FFA + "#" + saveDetails;
                if (RequestAuthentication(trdata) == false)
                {
                    return Json("Login Again");
                }
                if (CheckSession())
                {
                    return Json("Login Again");
                }
                List<FEEFixedAmount> FFA = new List<FEEFixedAmount>();
                JavaScriptSerializer json = new JavaScriptSerializer();
                FFA = (List<FEEFixedAmount>)json.ConvertToType<List<FEEFixedAmount>>(json.DeserializeObject(para_FFA));

                if (ModelState.IsValid)
                {
                    int MaxAutoID = (db.FEEFixedAmounts.Max(model => (int?)model.AutoID) ?? 0) + 1;
                    foreach (FEEFixedAmount fa in FFA)
                    {
                        if (fa.AutoID != 0)
                        {
                            FEEFixedAmount FCMObj = db.FEEFixedAmounts.Find(fa.AutoID);
                            if (FCMObj != null)
                            {
                                if (fa.Amt != null && fa.Amt != 0)
                                {
                                    FCMObj.Amt = fa.Amt;
                                    FCMObj.StdID = fa.StdID;
                                    FCMObj.FHID = fa.FHID;
                                    FCMObj.FIID = fa.FIID;
                                    FCMObj.Remark = fa.Remark;
                                    FCMObj.EntryUserID = (int)Session["UID"];
                                    FCMObj.EntryDate = DateTime.Now;
                                }
                                else
                                {
                                    db.FEEFixedAmounts.Remove(FCMObj);
                                }
                            }
                            else
                            {
                                return Json("Record does not exists");
                            }
                        }
                        else
                        {
                            if (fa.Amt != null && fa.Amt != 0)
                            {
                                FEEFixedAmount FCMObj = db.FEEFixedAmounts.Where(model => model.StdID == fa.StdID && model.FHID == fa.FHID && model.FIID == fa.FIID).FirstOrDefault();
                                if (FCMObj == null)
                                {
                                    fa.AutoID = MaxAutoID;
                                    fa.AcaStart = (int)Session["AcaStart"];
                                    fa.EntryUserID = (int)Session["UID"];
                                    fa.EntryDate = DateTime.Now;
                                    db.FEEFixedAmounts.Add(fa);
                                    MaxAutoID++;
                                }
                                else
                                {
                                    FCMObj.Amt = fa.Amt;
                                    FCMObj.StdID = fa.StdID;
                                    FCMObj.FHID = fa.FHID;
                                    FCMObj.FIID = fa.FIID;
                                    FCMObj.Remark = fa.Remark;
                                    FCMObj.EntryUserID = (int)Session["UID"];
                                    FCMObj.EntryDate = DateTime.Now;
                                }
                            }
                        }
                    }
                    UserUpdateDetails uud = new UserUpdateDetails();
                    uud.UID = Convert.ToInt32(Session["UID"]);
                    uud.SessionID = Session.SessionID;
                    uud.UpdateDate = DateTime.Now;
                    uud.FormName = ids[2];
                    uud.Details = saveDetails;
                    db.UserUpdateDetailss.Add(uud);
                    db.SaveChanges();

                    return Json("Saved Successfully");
                }
                else
                {
                    return Json(ModelState.Values.SelectMany(model => model.Errors).ToList()[0].ErrorMessage);
                }
            }
            catch (Exception ex)
            {
                return Json(ex.Message);
            }
        }
        [Authorize]
        public JsonResult FeeFixedAmountDelete(int StdID, int FIID, string deleteDetails)
        {
            try
            {
                if (CheckSession())
                {
                    return Json("Login Again");
                }
                int count = 0;
                List<FEEFixedAmount> FFA = db.FEEFixedAmounts.Where(model => model.StdID == StdID && model.FIID == FIID).ToList();
                if (ModelState.IsValid == true)
                {
                    foreach (FEEFixedAmount fa in FFA)
                    {
                        if (CheckFixedDelete(fa) == "")
                        {
                            db.FEEFixedAmounts.Remove(fa);
                            count++;
                        }
                    }
                    if (count > 0)
                    {
                        fillUserUpdateDetails(deleteDetails);
                        db.SaveChanges();
                        return Json("Deleted Successfully");
                    }
                    else
                        return Json("All Records in Use");
                }
                else
                {
                    return Json(ModelState.Values.SelectMany(model => model.Errors).ToList()[0].ErrorMessage);
                }
            }
            catch (Exception ex)
            {
                return Json(ex.Message);
            }
        }

        private string CheckFixedDelete(FEEFixedAmount fa)
        {
            int acaStart = (int)Session["AcaStart"];
            int schoolId = (int)Session["SchoolID"];
            if (db.FeeFixedDeleteCheck(fa.StdID, fa.FHID, fa.FIID, acaStart, schoolId).Single().TotalRecords > 0)
            {
                return "You Cannot Delete This Record";
            }
            else
                return "";
        }
        #endregion

        #region Fee Collection Entry
        [Authorize]
        public ActionResult FeeCollectionEntry()
        {
            string curdate = DateTime.Now.ToString("MM/dd/yyyy");
            if (CheckSession()) { return RedirectToAction("Logon", "Logon"); }
            fillPermission();
            ViewBag.ddlPaymode = db.FeePayModeMasters.Where(model => model.AutoID != 8).OrderBy(model => model.AutoID).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.PayModeName }).ToList();
            ViewBag.ddlBankName = db.FEEBankMasters.Where(model => model.AutoID != 0).OrderBy(model => model.FBName).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.FBName }).ToList();
            //DataSet ds = db.spFeeCollectionEntry(1, 11, 2013, "", 1, 12, "1", "DE", "01/05/2015");
            int intSchoolid = (int)Session["SchoolID"];
            int intAcaStart = (int)Session["AcaStart"];
            int UID = (int)Session["UID"];
            //DataSet ds = db.spFeeCollectionEntry(intSchoolid, 0, intAcaStart, "", 0, 0, 1, "DE", curdate);
            //ViewData["FeeCollectionMonth"] = ds.Tables[1].Rows;
            Session["CurrentDate"] = DateTime.Now.ToString("dd/MM/yyyy");
            //var obj = (from FeeDue in ds.Tables[2].Select().ToList()
            //           select new FeebindGridData() { FeeInstallmentID = (int)FeeDue.ItemArray.GetValue(0), FeeInstallmentName = FeeDue.ItemArray.GetValue(1).ToString(), PaidAmt = (int)FeeDue.ItemArray.GetValue(2), LateFee = (int)FeeDue.ItemArray.GetValue(3), Readmission = (int)FeeDue.ItemArray.GetValue(4) }).ToList();
            List<FeebindGridData> lst = new List<FeebindGridData>();
            ViewData["FeeCollectionMonth"] = lst;
            var RecDate = Convert.ToDateTime(Session["CurrentDate"], cinfo);

            var TCol = (from fa in
                            (from FAM in db.FEEAccountMasters
                             join FAD in db.FEEAccountDetails on FAM.AutoID equals FAD.BLNo
                             where FAM.AcaStart == intAcaStart && FAM.RDate == RecDate && FAM.Cancel == false && FAD.ChqBounce == false && FAM.SchoolID == intSchoolid
                             && FAM.EntryUserID == UID
                             select new { FAD.Amount, FAD.ConAmount, FAM.RDate })
                        group fa by fa.RDate into famt
                        from fa in famt
                        select new { amt = ((System.Decimal?)famt.Sum(model => model.Amount) ?? ((System.Decimal?)0)) - ((System.Decimal?)famt.Sum(model => model.ConAmount) ?? (System.Decimal?)0) }).ToList();
            var maxRec = 0;
            if (db.FEEAccountMasters.Where(model => model.AcaStart == intAcaStart && model.SchoolID == intSchoolid && model.Cancel == false).Count() != 0)
            {
                maxRec = db.FEEAccountMasters.Where(model => model.AcaStart == intAcaStart && model.SchoolID == intSchoolid && model.Cancel == false).Max(model => model.URNo);
            }
            if (TCol.Count == 0)
            {
                ViewData["TColl"] = "0" + '^' + maxRec.ToString();
            }
            else
            {
                ViewData["TColl"] = Convert.ToInt32(TCol[0].amt).ToString() + '^' + maxRec.ToString();
            }

            return View();
        }
        [Authorize]
        public JsonResult FillFeeCollectionDetails(int StdID, string RecDate, int FeeType, string FeeGroup)
        {

            CommonResponse CR = new CommonResponse();
            try
            {
                if (CheckSession())
                {
                    CR.Message = "Login Again";
                    return Json(CR);
                }
                int intSchoolid = (int)Session["SchoolID"];
                int intAcaStart = (int)Session["AcaStart"];
                int intPreviousAcaStart = (int)Session["AcaStart"] - 1;
                int UID = (int)Session["UID"];
                int? Discount = 0;
                int discAmt = 0;
                var RDate = Convert.ToDateTime(RecDate, cinfo);
                RecDate = Convert.ToDateTime(RecDate, cinfo).ToString("MM/dd/yyyy");
                var DiscDate = db.FEEYearlySettings.Where(model => model.AcaStart == intAcaStart && model.SchoolID == intSchoolid).ToList()[0].AnlFeeDDate;
                DateTime AnnualDDate = Convert.ToDateTime(DiscDate, cinfo);
                int intMinMonth = db.FEEInstallmentMasters.Where(model => model.SchoolID == intSchoolid && model.AcaStart == intAcaStart).Min(model => model.AutoID);
                int intMaxMonth = db.FEEInstallmentMasters.Where(model => model.SchoolID == intSchoolid && model.AcaStart == intAcaStart).Max(model => model.AutoID);
                if (AnnualDDate > RDate)
                {
                    Discount = db.FEEYearlySettings.Where(model => model.SchoolID == intSchoolid && model.AcaStart == intAcaStart).Select(model => model.AnlFeeDAmt).ToList()[0];
                    discAmt = Convert.ToInt16(Discount);
                }

                DataSet ds = db.spFeeCollectionEntry(intSchoolid, StdID, intAcaStart, FeeGroup, intMinMonth, intMaxMonth, FeeType, "DE", RecDate);
                var DueData = (from FeeDue in ds.Tables[2].Select().ToList()
                               select new FeebindGridData() { FeeInstallmentID = (int)FeeDue.ItemArray.GetValue(0), FeeInstallmentName = FeeDue.ItemArray.GetValue(1).ToString(), PaidAmt = (int)FeeDue.ItemArray.GetValue(2), LateFee = (int)FeeDue.ItemArray.GetValue(3), Readmission = (int)FeeDue.ItemArray.GetValue(4) }).ToList();

                ViewData["FeeCollectionMonth"] = DueData;
                var SibInfo = (from ss in ds.Tables[0].Select().ToList()
                               select new FeebindGridData() { StudentID = (int)ss.ItemArray.GetValue(0), AdmissionNo = ss.ItemArray.GetValue(1).ToString(), FeeNo = ss.ItemArray.GetValue(2).ToString(), SName = ss.ItemArray.GetValue(3).ToString() }).ToList();

                ViewData["FeeSibInfo"] = SibInfo;
                var FeeCollDetails = (from FeeDueDetail in ds.Tables[3].Select().ToList()
                                      select new FeebindGridData() { FeeInstallmentID = (int)FeeDueDetail.ItemArray.GetValue(0), FeeInstallmentName = FeeDueDetail.ItemArray.GetValue(1).ToString(), FeeHeadID = (int)FeeDueDetail.ItemArray.GetValue(2), FeeHeadName = FeeDueDetail.ItemArray.GetValue(3).ToString(), Amt = (int)FeeDueDetail.ItemArray.GetValue(4), ConAmt = (int)FeeDueDetail.ItemArray.GetValue(5), PaidAmt = (int)FeeDueDetail.ItemArray.GetValue(6) }).ToList();

                ViewData["FeeCollDetails"] = FeeCollDetails;
                var ExcessDetails = (from Excess in ds.Tables[1].Select("FeeHeadID=2").ToList()
                                     select new FeebindGridData() { FeeHeadID = (int?)Excess.ItemArray.GetValue(0), Amt = (int?)Excess.ItemArray.GetValue(1), BillNo = (int?)Excess.ItemArray.GetValue(2), ReceiptNo = Excess.ItemArray.GetValue(3).ToString() }).Where(model => model.FeeHeadID == 2).ToList();

                ViewData["FeeExcessDetails"] = ExcessDetails;
                var CBDetails = (from CbDe in ds.Tables[1].Select("FeeHeadID=3").ToList()
                                 select new FeebindGridData() { FeeHeadID = (int?)CbDe.ItemArray.GetValue(0), Amt = (int?)CbDe.ItemArray.GetValue(1), BillNo = (int?)CbDe.ItemArray.GetValue(2), ReceiptNo = CbDe.ItemArray.GetValue(3).ToString() }).Where(model => model.FeeHeadID == 3).ToList();

                ViewData["FeeCBDetails"] = CBDetails;

                var TCol = (from fa in
                                (from FAM in db.FEEAccountMasters
                                 join FAD in db.FEEAccountDetails on FAM.AutoID equals FAD.BLNo
                                 where FAM.AcaStart == intAcaStart && FAM.RDate == RDate && FAM.Cancel == false && FAD.ChqBounce == false && FAM.SchoolID == intSchoolid
                                 && FAM.EntryUserID == UID
                                 select new { FAD.Amount, FAD.ConAmount, FAM.RDate })
                            group fa by fa.RDate into famt
                            from fa in famt
                            select new { amt = ((System.Decimal?)famt.Sum(model => model.Amount) ?? ((System.Decimal?)0)) - ((System.Decimal?)famt.Sum(model => model.ConAmount) ?? (System.Decimal?)0) }).ToList();
                var maxRec = 0;
                if (db.FEEAccountMasters.Where(model => model.AcaStart == intAcaStart && model.SchoolID == intSchoolid && model.Cancel == false).Count() != 0)
                {
                    maxRec = db.FEEAccountMasters.Where(model => model.AcaStart == intAcaStart && model.SchoolID == intSchoolid && model.Cancel == false).Max(model => model.URNo);
                }
                var ToAmt = "0^0";
                if (TCol.Count == 0)
                {
                    ToAmt = "0^" + maxRec.ToString();
                }
                else
                {
                    ToAmt = Convert.ToInt32(TCol[0].amt).ToString() + '^' + maxRec.ToString();
                }
                int PreviousDue = 0;

                if (db.SIStudentYearWiseDetails.Where(model => model.AcaStarting == intPreviousAcaStart && model.SchID == intSchoolid && model.StudID == StdID).Count() > 0)
                {
                    DataSet PreviousDueds = db.spFeeGetPreviousAmount(intSchoolid, StdID.ToString(), intPreviousAcaStart);

                    for (int a = 0; a < PreviousDueds.Tables[0].Rows.Count; a++)
                    {
                        PreviousDue = PreviousDue + Convert.ToInt32(PreviousDueds.Tables[0].Rows[a][0]);
                    }
                }

                object[] obj = new object[13];
                obj[0] = DbCampusContext.RenderPertialViewtoString(this, "_FeeCollectionMonthGrid");
                obj[1] = SibInfo;
                obj[2] = ExcessDetails;
                obj[3] = CBDetails;
                if (db.FEEStructureSystems.Where(model => model.FHID == 3).Count() > 0)
                {
                    obj[4] = db.FEEStructureSystems.Where(model => model.FHID == 3).ToList()[0].Amt;
                }
                else
                {
                    obj[4] = 0;
                }

                obj[5] = db.SIStudentYearWiseDetails.Where(model => model.StudID == StdID && model.AcaStarting == intAcaStart && model.SchID == intSchoolid).ToList()[0].FeeRemark;
                //obj[6] = db.FEEYearlySettings.Where(model => model.AcaStart == intAcaStart && model.SchoolID == intSchoolid).ToList()[0].VisaAmt;
                //obj[7] = db.FEEYearlySettings.Where(model => model.AcaStart == intAcaStart && model.SchoolID == intSchoolid).ToList()[0].AmexAmt;

                var RecCount = 0;

                RecCount = (from FAM in db.FEEAccountMasters
                            join FAD in db.FEEAccountDetails on FAM.AutoID equals FAD.BLNo
                            where FAM.StdID == StdID && FAM.AcaStart == intAcaStart && FAM.SchoolID == intSchoolid && FAM.Cancel == false && FAD.ChqBounce == false
                            select new { FAM.AutoID }).ToList().Count();
                var showDis = 0;
                int i;
                int TSum = 0;
                int TotDue = 0;
                if (RecCount == 0)
                {
                    for (i = 0; i < ds.Tables[3].Rows.Count; i++)
                    {
                        TotDue = TotDue + Convert.ToInt32(ds.Tables[3].Rows[i][4]);
                        TSum = TSum + Convert.ToInt32(ds.Tables[3].Rows[i][4]);
                    }
                }
                if (TSum > 0)
                {
                    showDis = Convert.ToInt32(discAmt);
                }



                if (db.FEEYearlySettings.Where(model => model.AcaStart == intAcaStart && model.SchoolID == intSchoolid).Count() > 0)
                {
                    obj[6] = db.FEEYearlySettings.Where(model => model.AcaStart == intAcaStart && model.SchoolID == intSchoolid).ToList()[0].VisaAmt;
                    obj[7] = db.FEEYearlySettings.Where(model => model.AcaStart == intAcaStart && model.SchoolID == intSchoolid).ToList()[0].AmexAmt;
                }
                else
                {
                    obj[6] = 0;
                    obj[7] = 0;
                }

                obj[8] = ToAmt;
                obj[9] = showDis;
                obj[10] = TotDue;
                obj[11] = db.SIStudentYearWiseDetails.Where(model => model.AcaStarting == intAcaStart && model.SchID == intSchoolid && model.StudID == StdID).ToList()[0].StudStatus;

                if (PreviousDue > 0)
                {
                    obj[12] = "Previous Year Due";
                }
                else
                {
                    obj[12] = "";
                }
                CR.Data = obj;
                CR.Message = "";
                return Json(CR);

            }
            catch (Exception ex)
            {
                CR.Message = ex.Message;
                return Json(CR);
            }
        }




        [Authorize]
        public JsonResult FeeCollectionSave(string[] StudentDetail, string[] PayAmount, string[] OtherAmount, int intbounceReceipt, string[] ExcessAmount, List<FeebindGridData> partialDetails, string FeeRemarks)
        {
            CommonResponse CR = new CommonResponse();
            try
            {
                if (CheckSession())
                {
                    CR.Message = "Login Again";
                    return Json(CR);
                }
                var RDate = Convert.ToDateTime(StudentDetail[0].Split('^')[1], cinfo);
                int intSchoolid = (int)Session["SchoolID"];
                int intAcaStart = (int)Session["AcaStart"];
                int intStudentID = Convert.ToInt32(StudentDetail[0].Split('^')[0]);
                int intUserID = Convert.ToInt32(Session["UID"]);
                if (db.FEEYearlySettings.Where(model => model.AcaStart == intAcaStart && model.SchoolID == intSchoolid && model.PackDate > RDate).Count() > 0)
                {
                    CR.Message = "Please Check Fee Pack Date";
                    return Json(CR);
                }
                if (StudentDetail[0].Split('^')[4] != "")
                {
                    int UserReceiptNo = Convert.ToInt32(StudentDetail[0].Split('^')[4]);
                    if (db.FEEAccountMasters.Where(model => model.AcaStart == intAcaStart && model.SchoolID == intSchoolid && model.Cancel == false && model.URNo == UserReceiptNo).Count() > 0)
                    {
                        CR.Message = "Receipt No Already Exists";
                        return Json(CR);
                    }
                }
                PayAmountDetail PAD;
                List<PayAmountDetail> PD = db.PayAmountDetails.Where(model => model.SessionID == Session.SessionID.ToString() && model.FormName == "Fee Collection").ToList();
                List<FeeAmountDetail> FD = db.FeeAmountDetails.Where(model => model.SessionID == Session.SessionID.ToString() && model.FormName == "Fee Collection").ToList();
                List<ExcessAmount> EAD = db.ExcessAmounts.Where(model => model.SessionID == Session.SessionID.ToString() && model.FormName == "Fee Collection").ToList();
                db.PayAmountDetails.RemoveRange(PD);
                db.FeeAmountDetails.RemoveRange(FD);
                db.ExcessAmounts.RemoveRange(EAD);
                if (ModelState.IsValid)
                {
                    int intRowid = 1;
                    foreach (string PA in PayAmount) // Paymode Details
                    {
                        PAD = new PayAmountDetail();
                        //PAD.AutoID = intAutoid;
                        PAD.RowID = intRowid;
                        PAD.BankID = (PA.Split('^')[3] == "" ? 0 : Convert.ToInt32(PA.Split('^')[3]));
                        PAD.Amount = Convert.ToDecimal(PA.Split('^')[4]);
                        PAD.ChqDate = (PA.Split('^')[2] == "" ? DateTime.Now : Convert.ToDateTime(PA.Split('^')[2], cinfo));
                        PAD.ChqNumber = PA.Split('^')[1].ToString();
                        PAD.FormName = "Fee Collection";
                        PAD.PModeID = Convert.ToInt32(PA.Split('^')[0]);
                        PAD.SessionID = Session.SessionID.ToString();
                        PAD.StudentId = intStudentID;
                        db.PayAmountDetails.Add(PAD);
                        intRowid++;
                        //intAutoid++;
                    }

                    FeeAmountDetail FAD;
                    foreach (string OA in OtherAmount[0].Split('^'))  // For Other Fee Payment like Late Fee, Readmission etc.
                    {
                        FAD = new FeeAmountDetail();
                        var intAmt = (OA.Split('#')[1] == "" ? 0 : Convert.ToInt32(OA.Split('#')[1]));
                        if (intAmt > 0)
                        {
                            if (OA.Split('#')[0] != "2")
                            {
                                //FAD.AutoID = intAutoid;
                                FAD.FHeadID = Convert.ToInt32(OA.Split('#')[0]);

                                if (OA.Split('#')[0] != "5")
                                {
                                    FAD.ConAmt = Convert.ToDecimal(OA.Split('#')[2]);
                                    FAD.DueAmt = intAmt;
                                    FAD.TotalAmt = intAmt;
                                }
                                else
                                {
                                    FAD.ConAmt = intAmt;
                                    FAD.DueAmt = 0;
                                    FAD.TotalAmt = intAmt * -1;
                                }
                                FAD.FeeInstallmentID = 0;
                                FAD.FormName = "Fee Collection";
                                FAD.SessionID = Session.SessionID.ToString();
                                FAD.StudentId = intStudentID;
                                db.FeeAmountDetails.Add(FAD);
                                //intAutoid++;
                            }
                            else
                            {
                                FAD.FHeadID = 2;
                                FAD.ConAmt = Convert.ToDecimal(OA.Split('#')[2]);
                                FAD.DueAmt = Math.Abs(intAmt);
                                FAD.TotalAmt = Math.Abs(intAmt);
                                FAD.FeeInstallmentID = 0;
                                FAD.FormName = "Fee Collection";
                                FAD.SessionID = Session.SessionID.ToString();
                                FAD.StudentId = intStudentID;
                                db.FeeAmountDetails.Add(FAD);
                            }

                        }
                        if (intAmt < 0 && OA.Split('#')[0] == "2")
                        {
                            //FAD.AutoID = intAutoid;
                            FAD.FHeadID = 2;
                            FAD.ConAmt = Convert.ToDecimal(OA.Split('#')[2]);
                            FAD.DueAmt = Math.Abs(intAmt);
                            FAD.TotalAmt = Math.Abs(intAmt);
                            FAD.FeeInstallmentID = 0;
                            FAD.FormName = "Fee Collection";
                            FAD.SessionID = Session.SessionID.ToString();
                            FAD.StudentId = intStudentID;
                            db.FeeAmountDetails.Add(FAD);
                            //intAutoid++;
                        }
                    }

                    if (partialDetails != null)
                    {
                        foreach (var item in partialDetails)  // For Partial Payment
                        {
                            FAD = new FeeAmountDetail();
                            FAD.FHeadID = item.FeeHeadID;
                            FAD.FeeInstallmentID = item.FeeInstallmentID;
                            FAD.DueAmt = Convert.ToDecimal(item.Amt);
                            FAD.ConAmt = Convert.ToDecimal(item.ConAmt);
                            FAD.TotalAmt = Convert.ToDecimal(item.PaidAmt);
                            FAD.FormName = "Fee Collection";
                            FAD.SessionID = Session.SessionID.ToString();
                            FAD.StudentId = intStudentID;
                            db.FeeAmountDetails.Add(FAD);
                        }
                    }

                    if (ExcessAmount != null)
                    {
                        ExcessAmount EA;
                        foreach (string EAA in ExcessAmount)
                        {
                            EA = new ExcessAmount();
                            EA.BillNo = Convert.ToInt32(EAA.Split('#')[0]);
                            EA.AdjustedAmt = Convert.ToDecimal(EAA.Split('#')[1]);
                            EA.StudentId = intStudentID;
                            EA.SessionID = Session.SessionID.ToString();
                            EA.FormName = "Fee Collection";
                            db.ExcessAmounts.Add(EA);
                        }
                    }
                    db.SaveChanges();
                    if (FeeRemarks == "1")
                    {
                        SIStudentYearWiseDetail SY = db.SIStudentYearWiseDetails.Where(model => model.StudID == intStudentID && model.SchID == intSchoolid && model.AcaStarting == intAcaStart).ToList()[0];
                        SY.FeeRemark = StudentDetail[0].Split('^')[7].Replace("'", "''").ToString();
                        db.SaveChanges();
                    }
                    var varParam = "";
                    if (StudentDetail[0].Split('^')[4] == "") // For Automatic Generating Receipt no
                    {
                        varParam = "" + intStudentID.ToString() + "," + intSchoolid.ToString() + "," + intAcaStart.ToString() + "," + Convert.ToInt32(StudentDetail[0].Split('^')[5]) + "," + Convert.ToInt32(StudentDetail[0].Split('^')[6]) + "," + Convert.ToInt32(StudentDetail[0].Split('^')[3]) + ",'" + Convert.ToDateTime(StudentDetail[0].Split('^')[1], cinfo).ToString("yyyy-MM-dd") + "'," + Convert.ToInt32(StudentDetail[0].Split('^')[2]) + ",'#SRNO@','#URNO@'," + intUserID.ToString() + ",'" + StudentDetail[0].Split('^')[7].Replace("'", "''").ToString() + "'," + intbounceReceipt + ",'" + Session.SessionID.ToString() + "','Fee Collection'";
                    }
                    else // For Manual Receipt no
                    {
                        varParam = "" + intStudentID.ToString() + "," + intSchoolid.ToString() + "," + intAcaStart.ToString() + "," + Convert.ToInt32(StudentDetail[0].Split('^')[5]) + "," + Convert.ToInt32(StudentDetail[0].Split('^')[6]) + "," + Convert.ToInt32(StudentDetail[0].Split('^')[3]) + ",'" + Convert.ToDateTime(StudentDetail[0].Split('^')[1], cinfo).ToString("yyyy-MM-dd") + "'," + Convert.ToInt32(StudentDetail[0].Split('^')[2]) + ",'#SRNO@','" + StudentDetail[0].Split('^')[4].ToString() + "'," + intUserID.ToString() + ",'" + StudentDetail[0].Split('^')[7].Replace("'", "''").ToString() + "'," + intbounceReceipt + ",'" + Session.SessionID.ToString() + "','Fee Collection'";
                    }


                    object[] obj = new object[3];
                    int maxsysRecNo = db.spFeeParentFeeEntry(varParam, intSchoolid, intAcaStart, Session.SessionID.ToString(), "Fee Collection").FirstOrDefault();
                    if (db.FEEYearlySettings.Where(model => model.AcaStart == intAcaStart && model.SchoolID == intSchoolid && model.FeeFATransfer == true).Count() > 0)
                    {
                        db.FeeFAEntry(maxsysRecNo, intSchoolid, intAcaStart, intUserID);
                    }
                    obj[1] = DbCampusContext.RenderPertialViewtoString(this, "_FeeCollectionMonthGrid");
                    var TCol = (from fa in
                                    (from FAM in db.FEEAccountMasters
                                     join FAAD in db.FEEAccountDetails on FAM.AutoID equals FAAD.BLNo
                                     where FAM.AcaStart == intAcaStart && FAM.RDate == RDate && FAM.Cancel == false && FAAD.ChqBounce == false && FAM.SchoolID == intSchoolid
                                     && FAM.EntryUserID == intUserID
                                     select new { FAAD.Amount, FAAD.ConAmount, FAM.RDate })
                                group fa by fa.RDate into famt
                                from fa in famt
                                select new { amt = ((System.Decimal?)famt.Sum(model => model.Amount) ?? ((System.Decimal?)0)) - ((System.Decimal?)famt.Sum(model => model.ConAmount) ?? (System.Decimal?)0) }).ToList();
                    var maxRec = 0;
                    int maxBillNo = 0;
                    FEEAccountMaster FAMObj = db.FEEAccountMasters.Where(model => model.AcaStart == intAcaStart && model.SchoolID == intSchoolid && model.RNo == maxsysRecNo).FirstOrDefault();
                    if (FAMObj != null)
                    {
                        maxRec = FAMObj.URNo;
                        maxBillNo = FAMObj.AutoID;
                    }
                    var ToAmt = "0^0";
                    if (TCol.Count == 0)
                    {
                        ToAmt = "0^" + maxRec.ToString() + '^' + maxBillNo.ToString();
                    }
                    else
                    {
                        ToAmt = Convert.ToInt32(TCol[0].amt).ToString() + '^' + maxRec.ToString() + '^' + maxBillNo.ToString();
                    }
                    obj[2] = ToAmt;
                    CR.Data = obj;
                    CR.Message = "Saved Sucessfully";
                }

                return Json(CR);

            }
            catch (Exception ex)
            {
                CR.Message = ex.Message;
                return Json(CR);
            }
        }
        [Authorize]
        public ActionResult FillFeeHeadDetails(int StdID, int intMonth, string RecDate, int FeeType, string FCD)
        {

            CommonResponse CR = new CommonResponse();
            try
            {

                if (CheckSession())
                {
                    CR.Message = "Login Again";
                    return Json(CR);
                }
                List<FeebindGridData> lst = new List<FeebindGridData>(); ;
                if (FCD != "[]" && FCD != null && FCD != "")
                {
                    JavaScriptSerializer json = new JavaScriptSerializer();
                    lst = (List<FeebindGridData>)json.ConvertToType<List<FeebindGridData>>(json.DeserializeObject(FCD));
                }

                int intSchoolid = (int)Session["SchoolID"];
                int intAcaStart = (int)Session["AcaStart"];
                if (FeeType == 4)
                {
                    if (db.FEEHeadMasters.Where(model => model.Type == "M" && model.AcaStart == intAcaStart).Count() < 1)
                    {
                        CR.Message = "Please Create atleast one 'M' type Head";
                        return Json(CR);
                    }
                }
                RecDate = Convert.ToDateTime(RecDate, cinfo).ToString("MM/dd/yyyy");
                //DataSet ds = db.spFeeCollectionEntry(intSchoolid, StdID, intAcaStart, "", intMinMonth, intMaxMonth, FeeType, "DE", RecDate);
                DataSet ds = db.spFeeCollectionEntry(intSchoolid, StdID, intAcaStart, "", intMonth, intMonth, FeeType, "DE", RecDate);


                var FeeCollDetails = (from FeeDueDetail in ds.Tables[3].Select().ToList()
                                      select new FeebindGridData() { FeeInstallmentID = (int)FeeDueDetail.ItemArray.GetValue(0), FeeInstallmentName = FeeDueDetail.ItemArray.GetValue(1).ToString(), FeeHeadID = (int)FeeDueDetail.ItemArray.GetValue(2), FeeHeadName = FeeDueDetail.ItemArray.GetValue(3).ToString(), Amt = (int)FeeDueDetail.ItemArray.GetValue(4), ConAmt = (int)FeeDueDetail.ItemArray.GetValue(5), PaidAmt = (int)FeeDueDetail.ItemArray.GetValue(6) }).ToList();

                if (lst.Count > 0)
                {

                    var obj = (from FCC in FeeCollDetails
                               //           join FSL in lst on FCC.FeeHeadID equals FSL.FeeHeadID
                               //           into FSL_join
                               //           from FSL in FSL_join.DefaultIfEmpty()                               
                               select new FeebindGridData()
                               {
                                   FeeInstallmentID = FCC.FeeInstallmentID,
                                   FeeInstallmentName = FCC.FeeInstallmentName,
                                   FeeHeadID = FCC.FeeHeadID,
                                   FeeHeadName = FCC.FeeHeadName,
                                   Amt = FCC.Amt,
                                   ConAmt = FCC.ConAmt,
                                   PaidAmt = (lst.Where(model => model.FeeHeadID == FCC.FeeHeadID && model.FeeInstallmentID == FCC.FeeInstallmentID).Max(model => model.PaidAmt) ?? FCC.PaidAmt)
                               });
                    FeeCollDetails = obj.ToList();

                }
                ViewData["FeeCollDetails"] = FeeCollDetails;

                return PartialView("_FeeCollectionDetail");

            }
            catch (Exception)
            {
                return View();
            }
        }
        [Authorize]
        public ActionResult FillTodayCollection(string RecDate, int UID, int RVal)
        {

            CommonResponse CR = new CommonResponse();
            try
            {
                if (CheckSession())
                {
                    CR.Message = "Login Again";
                    return Json(CR);
                }
                var RDate = DateTime.Today;
                int intSchoolid = (int)Session["SchoolID"];
                int intAcaStart = (int)Session["AcaStart"];
                if (RecDate != "")
                {
                    RDate = Convert.ToDateTime(RecDate, cinfo);
                }
                List<FeebindGridData> lst = new List<FeebindGridData>(); ;
                var AccountData = (from fd in
                                       (from FAM in db.FEEAccountMasters
                                        join FAD in db.FEEAccountDetails on FAM.AutoID equals FAD.BLNo
                                        join SYD in db.SIStudentYearWiseDetails on FAM.StdID equals SYD.StudID
                                        where FAM.RDate == RDate && FAM.SchoolID == SYD.SchID && FAM.AcaStart == SYD.AcaStarting && FAM.SchoolID == intSchoolid
                                        && FAM.AcaStart == intAcaStart && FAM.Cancel == false && FAD.ChqBounce == false
                                        select new { FAM.URNo, SYD.AdmNo, FAD.Amount, FAD.ConAmount, FAM.AutoID })
                                   group fd by new
                                   {
                                       fd.URNo,
                                       fd.AdmNo,
                                       fd.AutoID
                                   } into g
                                   select new FeebindGridData()
                                   {
                                       BillNo = g.Key.AutoID,
                                       ReceiptNoToday = g.Key.URNo,
                                       AdmissionNo = g.Key.AdmNo,
                                       Amt = ((int?)g.Sum(p => (p.Amount - p.ConAmount)) ?? (int?)0)
                                   }).OrderBy(model => model.ReceiptNoToday).ToList();

                var aa = (from FAM in db.FEEAccountMasters
                          join FAD in db.FEEAccountDetails on FAM.AutoID equals FAD.BLNo
                          join SYD in db.SIStudentYearWiseDetails on FAM.StdID equals SYD.StudID
                          where FAM.RDate == RDate && FAM.SchoolID == SYD.SchID && FAM.AcaStart == SYD.AcaStarting && FAM.SchoolID == intSchoolid
                          && FAM.AcaStart == intAcaStart && FAM.Cancel == false && FAD.ChqBounce == false
                          select new { FAM.URNo, SYD.AdmNo, FAD.Amount, FAD.ConAmount, FAM.RDate }).ToList();
                if (aa.Count() > 0)
                {
                    ViewData["TotalColl"] = (from fd in
                                                 (from FAM in db.FEEAccountMasters
                                                  join FAD in db.FEEAccountDetails on FAM.AutoID equals FAD.BLNo
                                                  join SYD in db.SIStudentYearWiseDetails on FAM.StdID equals SYD.StudID
                                                  where FAM.RDate == RDate && FAM.SchoolID == SYD.SchID && FAM.AcaStart == SYD.AcaStarting && FAM.SchoolID == intSchoolid
                                                  && FAM.AcaStart == intAcaStart && FAM.Cancel == false
                                                  select new { FAM.URNo, SYD.AdmNo, FAD.Amount, FAD.ConAmount, FAM.RDate })
                                             group fd by new
                                             {
                                                 fd.RDate
                                             } into g
                                             select new
                                             {
                                                 TotalAmount = ((int?)g.Sum(p => (p.Amount - p.ConAmount)) ?? (int?)0)
                                             }).ToList()[0].TotalAmount;
                }
                else
                {
                    ViewData["TotalColl"] = "0";
                }

                if (UID != 0)
                {
                    AccountData = (from fd in
                                       (from FAM in db.FEEAccountMasters
                                        join FAD in db.FEEAccountDetails on FAM.AutoID equals FAD.BLNo
                                        join SYD in db.SIStudentYearWiseDetails on FAM.StdID equals SYD.StudID
                                        where FAM.RDate == RDate && FAM.SchoolID == SYD.SchID && FAM.AcaStart == SYD.AcaStarting && FAM.SchoolID == intSchoolid
                                        && FAM.AcaStart == intAcaStart && FAM.Cancel == false && FAM.EntryUserID == UID && FAD.ChqBounce == false
                                        select new { FAM.URNo, SYD.AdmNo, FAD.Amount, FAD.ConAmount, FAM.AutoID })
                                   group fd by new
                                   {
                                       fd.URNo,
                                       fd.AdmNo,
                                       fd.AutoID
                                   } into g
                                   select new FeebindGridData()
                                   {
                                       BillNo = g.Key.AutoID,
                                       ReceiptNoToday = g.Key.URNo,
                                       AdmissionNo = g.Key.AdmNo,
                                       Amt = ((int?)g.Sum(p => (p.Amount - p.ConAmount)) ?? (int?)0)
                                   }).OrderBy(model => model.ReceiptNoToday).ToList();

                    aa = (from FAM in db.FEEAccountMasters
                          join FAD in db.FEEAccountDetails on FAM.AutoID equals FAD.BLNo
                          join SYD in db.SIStudentYearWiseDetails on FAM.StdID equals SYD.StudID
                          where FAM.RDate == RDate && FAM.SchoolID == SYD.SchID && FAM.AcaStart == SYD.AcaStarting && FAM.SchoolID == intSchoolid
                          && FAM.AcaStart == intAcaStart && FAM.Cancel == false && FAM.EntryUserID == UID && FAD.ChqBounce == false
                          select new { FAM.URNo, SYD.AdmNo, FAD.Amount, FAD.ConAmount, FAM.RDate }).ToList();

                    if (aa.Count > 0)
                    {
                        ViewData["TotalColl"] = (from fd in
                                                     (from FAM in db.FEEAccountMasters
                                                      join FAD in db.FEEAccountDetails on FAM.AutoID equals FAD.BLNo
                                                      join SYD in db.SIStudentYearWiseDetails on FAM.StdID equals SYD.StudID
                                                      where FAM.RDate == RDate && FAM.SchoolID == SYD.SchID && FAM.AcaStart == SYD.AcaStarting && FAM.SchoolID == intSchoolid
                                                      && FAM.AcaStart == intAcaStart && FAM.Cancel == false && FAM.EntryUserID == UID && FAD.ChqBounce == false
                                                      select new { FAM.URNo, SYD.AdmNo, FAD.Amount, FAD.ConAmount, FAM.RDate })
                                                 group fd by new
                                                 {
                                                     fd.RDate
                                                 } into g
                                                 select new
                                                 {
                                                     TotalAmount = ((int?)g.Sum(p => (((int?)p.Amount ?? (int?)0) -

                                                         ((int?)p.ConAmount) ?? (int?)0)) ?? (int?)0)
                                                 }).ToList()[0].TotalAmount;
                    }
                    else
                    {
                        ViewData["TotalColl"] = 0;
                    }
                }
                ViewData["FeeTodayColl"] = AccountData;
                if (RVal == 0)
                {
                    return PartialView("_FeeCollectionToday");
                }
                else
                {
                    object[] obj = new object[1];
                    obj[0] = DbCampusContext.RenderPertialViewtoString(this, "_FeeCollectionToday");
                    CR.Data = obj;
                    CR.Message = "";
                    return Json(CR);
                }


            }
            catch (Exception ex)
            {
                return View();
            }
        }

        //public JsonResult FeeCollectionReceipt(int StdID)
        //{
        //    //return FeeReceiptDetailsRecord(StdID, "Summ");
        //    CommonResponse CR = new CommonResponse();
        //    try
        //    {
        //        if (CheckSession())
        //        {
        //            CR.Message = "Login Again";
        //            return Json(CR);
        //        }
        //        ViewData["Type"] = "Summ";
        //        ViewData["StudentID"] = StdID; // db.SIStudentYearWiseDetails.Where(model => model.StudID == StdID && model.AcaStarting == acastart && model.SchID == schoolid).ToList()[0].FeesNo;
        //        TempData["StudentID"] = StdID;
        //        object[] obj = new object[2];
        //        obj[0] = DbCampusContext.RenderPertialViewtoString(this, "_FeeReceiptMain");  

        //        CR.Message = "";
        //        CR.Data = obj;
        //        return Json(CR);
        //    }
        //    catch (Exception e)
        //    {
        //        CR.Message = e.Message;
        //        return Json(CR);
        //    }

        //}
        [Authorize]
        public JsonResult FeeCollectionFixed(int StdID, int FIID)
        {
            CommonResponse CR = new CommonResponse();
            try
            {
                if (CheckSession())
                {
                    CR.Message = "Login Again";
                    return Json(CR);
                }
                ViewData["UserPermission"] = db.FillUserMenuPermission(Convert.ToInt32(Session["UID"]), "mnuFixedAmount")[0];
                TempData["StudentID"] = StdID;
                ViewData["FIID"] = FIID;
                int acastart = (int)Session["AcaStart"];
                int schoolid = (int)Session["SchoolID"];

                ViewData["GetData"] = db.FeeFixedAmountEntryStudentWise(acastart, schoolid, FIID, StdID);
                object[] obj = new object[1];
                obj[0] = DbCampusContext.RenderPertialViewtoString(this, "_FeeCollectionFixed");
                CR.Message = "";
                CR.Data = obj;
                return Json(CR);
            }
            catch (Exception e)
            {
                CR.Message = e.Message;
                return Json(CR);
            }

        }
        #endregion

        #region Fee Cheque Bounce
        [Authorize]
        public ActionResult FeeChequeBounce()
        {
            if (CheckSession()) { return RedirectToAction("Logon", "Logon"); }
            fillPermission();
            return View("FeeChequeBounce");
        }
        [Authorize]
        public JsonResult FeeChequeBounceRecord(string id, string type)
        {
            CommonResponse CR = new CommonResponse();
            try
            {
                if (CheckSession())
                {
                    CR.Message = "Login Again";
                    return Json(CR);
                }

                int acastart = (int)Session["AcaStart"];
                int schoolid = (int)Session["SchoolID"];
                List<FeeChequeDetails> fcd = db.FeeChequeDetails(schoolid, acastart, id, type);
                if (fcd.Count > 0)
                {
                    ViewData["GetData"] = fcd;
                    object[] obj = new object[2];
                    obj[0] = DbCampusContext.RenderPertialViewtoString(this, "_FeeChequeBounceGrid");
                    if (type == "ChqNo")
                    {
                        var data = from FAM in db.FEEAccountMasters join FAB in db.FeeAccountBanks on FAM.AutoID equals FAB.BLNo where FAB.Status == false && FAM.Cancel == false && FAB.ChqNo == id && FAM.AcaStart == acastart && FAM.SchoolID == schoolid select FAM.StdID;
                        obj[1] = (data.ToList().Max(model => (int?)model.Value) ?? 0).ToString();
                    }
                    CR.Message = "";
                    CR.Data = obj;
                }
                else
                    CR.Message = "Record not found";
                return Json(CR);
            }
            catch (Exception e)
            {
                CR.Message = e.Message;
                return Json(CR);
            }
        }
        [Authorize]
        public JsonResult FeeChequeBounceSave(int[] BNo, string BDate, string Reason, encodeshdata trdata)
        {
            try
            {
                trdata.actualdata = "[" + "\"" + string.Join("\",\"", BNo) + "\"]" + "#" + BDate;
                if (RequestAuthentication(trdata) == false)
                {
                    return Json("Login Again");
                }
                if (CheckSession())
                {
                    return Json("Login Again");
                }
                int intSchoolid = (int)Session["SchoolID"];
                int intAcaStart = (int)Session["AcaStart"];
                int intUserID = Convert.ToInt32(Session["UID"]);
                if (ModelState.IsValid)
                {
                    foreach (int FBID in BNo)
                    {
                        FeeAccountBank FAB = db.FeeAccountBanks.Find(FBID);
                        if (FAB != null)
                        {
                            FAB.Status = true;
                            FAB.CBDate = Convert.ToDateTime(BDate);
                            FAB.Reason = Reason;
                            List<FEEAccountDetail> FAD = db.FEEAccountDetails.Where(model => model.FBID == FBID).ToList();
                            foreach (FEEAccountDetail fd in FAD)
                            {
                                fd.ChqBounce = true;
                            }
                            FEEAccountMaster FAM = db.FEEAccountMasters.Find(FAB.BLNo);

                            UserUpdateDetails uud = new UserUpdateDetails();
                            uud.UID = Convert.ToInt32(Session["UID"]);
                            uud.SessionID = Session.SessionID;
                            uud.UpdateDate = DateTime.Now;
                            uud.FormName = ids[2];
                            uud.Details = "Fee Cheque No " + FAB.ChqNo + ",Cheque Date " + FAB.ChqDate + ",Reciept No " + FAM.RNo + ",Reciept Date " + FAM.RDate + ", Is Bounced";
                            db.UserUpdateDetailss.Add(uud);
                        }
                        else
                        {
                            return Json("Record does not exists");
                        }
                        db.SaveChanges();
                        if (db.FeeFATransBills.Where(model => model.BillNo == FAB.BLNo).Count() > 0)
                        {
                            db.FeeFAEntryReverse(Convert.ToInt32(FAB.BLNo), intSchoolid, intAcaStart, intUserID);
                        }
                    }


                    return Json("Saved Successfully");
                }
                else
                {
                    return Json(ModelState.Values.SelectMany(model => model.Errors).ToList()[0].ErrorMessage);
                }
            }
            catch (Exception ex)
            {
                return Json(ex.Message);
            }
        }
        #endregion

        #region Fee Petty Collection
        [Authorize]
        public ActionResult FeePettyAccount()
        {
            if (CheckSession()) { return RedirectToAction("Logon", "Logon"); }
            fillPermission();
            ViewBag.ddlPaymode = db.FeePayModeMasters.Where(model => model.AutoID != 8).OrderBy(model => model.AutoID).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.PayModeName }).ToList();
            ViewBag.ddlBankName = db.FEEBankMasters.Where(model => model.AutoID != 0).OrderBy(model => model.FBName).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.FBName }).ToList();

            if (System.Web.HttpContext.Current.Request.QueryString["page"] == null)
                BindPettyReceiptGetData(DateTime.Now);
            else
                BindPettyReceiptGetData(null);
            return View("FeePettyAccount");
        }

        public void BindPettyReceiptGetData(DateTime? RecDate)
        {
            if (RecDate != null)
            {
                ViewData["GetData"] = db.fillPettyReceiptDetails((int)Session["SchoolID"], (int)Session["AcaStart"], ((DateTime)RecDate).Date);
                TempData["RecDate"] = RecDate;
            }
            else
            {
                ViewData["GetData"] = db.fillPettyReceiptDetails((int)Session["SchoolID"], (int)Session["AcaStart"], ((DateTime)TempData["RecDate"]).Date);
                TempData.Keep("RecDate");
            }
        }
        [Authorize]
        public JsonResult FeePettyReceiptRecord(int? id)
        {
            CommonResponse CR = new CommonResponse();
            try
            {
                if (CheckSession())
                {
                    CR.Message = "Login Again";
                    return Json(CR);
                }
                object[] obj = new object[4];
                FEEPettyAccountMaster PAM = db.FEEPettyAccountMasters.Find(id);
                if (PAM != null)
                {
                    obj[0] = PAM;
                    var qry = from PD in db.FEEPettyAccountDetails join PH in db.FEEPettyHeadMasters on PD.PHID equals PH.AutoID where PD.PID == id select new { PD.PHID, PH.PHName, PD.Amount };
                    obj[1] = qry.ToList();
                    obj[2] = (PAM.CLID != null && PAM.CLID != 0) ? db.MTClassMasters.Find(PAM.CLID).ClassName : "";
                    obj[3] = (PAM.BID != 0) ? db.FEEBankMasters.Find(PAM.BID).FBName : "";//PAM.BID != null && 
                    CR.Message = "";
                    CR.Data = obj;
                }
                else
                {
                    CR.Message = "Record not found";
                }
                return Json(CR);
            }
            catch (Exception e)
            {
                CR.Message = e.Message;
                return Json(CR);
            }
        }
        [Authorize]
        public JsonResult FeePettyAccountRecord(DateTime RecDate)
        {
            CommonResponse CR = new CommonResponse();
            try
            {
                if (CheckSession())
                {
                    CR.Message = "Login Again";
                    return Json(CR);
                }
                object[] obj = new object[1];
                BindPettyReceiptGetData(RecDate);
                obj[0] = DbCampusContext.RenderPertialViewtoString(this, "_FeePettyAccountGrid").Replace("FeePettyAccountRecord?", "FeePettyAccount?parentid=" + ids[0] + "&amp;menuid=" + ids[1] + "&amp;");
                CR.Message = "";
                CR.Data = obj;
                return Json(CR);
            }
            catch (Exception e)
            {
                CR.Message = e.Message;
                return Json(CR);
            }
        }
        [Authorize]
        public JsonResult FeePettyAccountSave(string para_PAM, string para_PAD, encodeshdata trdata)
        {
            CommonResponse CR = new CommonResponse();
            try
            {
                trdata.actualdata = para_PAM + "#" + para_PAD;
                if (RequestAuthentication(trdata) == false)
                {
                    CR.Message = "Login Again";
                    return Json(CR);
                }
                if (CheckSession())
                {
                    CR.Message = "Login Again";
                    return Json(CR);
                }
                FEEPettyAccountMaster PAM = new FEEPettyAccountMaster();
                JavaScriptSerializer json = new JavaScriptSerializer();
                PAM = (FEEPettyAccountMaster)json.ConvertToType<FEEPettyAccountMaster>(json.DeserializeObject(para_PAM));

                List<FEEPettyAccountDetail> PAD = new List<FEEPettyAccountDetail>();
                PAD = (List<FEEPettyAccountDetail>)json.ConvertToType<List<FEEPettyAccountDetail>>(json.DeserializeObject(para_PAD));

                if (ModelState.IsValid)
                {
                    int acastart = (int)Session["AcaStart"];
                    int schoolid = (int)Session["SchoolID"];
                    string msg = "";
                    if (PAM.AutoID != 0)
                    {
                        if (PAM.RNo == 0)
                        {
                            CR.Message = "Please enter valid Receipt No";
                            return Json(CR);
                        }
                        else
                        {
                            if (db.FEEPettyAccountMasters.Where(model => model.RNo == PAM.RNo && model.AutoID != PAM.AutoID).Count() > 0)
                            {
                                CR.Message = "Receipt No Already Exists";
                                return Json(CR);
                            }
                        }
                        FEEPettyAccountMaster PAMObj = db.FEEPettyAccountMasters.Find(PAM.AutoID);
                        if (PAMObj != null)
                        {
                            PAMObj.CLID = PAM.CLID;
                            PAMObj.Depby = PAM.Depby;
                            PAMObj.SName = PAM.SName;
                            PAMObj.PMID = PAM.PMID;
                            PAMObj.RDate = PAM.RDate;
                            PAMObj.Remarks = PAM.Remarks;
                            PAMObj.RNo = PAM.RNo;
                            if (PAM.PMID == 1)
                            {
                                PAMObj.BID = 0;
                                PAMObj.ChqDate = null;
                                PAMObj.ChqNo = null;
                            }
                            else
                            {
                                PAMObj.BID = PAM.BID;
                                PAMObj.ChqDate = PAM.ChqDate;
                                PAMObj.ChqNo = PAM.ChqNo;
                            }
                            PAMObj.ChqBounce = false;
                            PAMObj.Can = false;

                            PAMObj.UpdateUserID = (int)Session["UID"];
                            PAMObj.UpdateDate = DateTime.Now;

                            List<FEEPettyAccountDetail> objDetail = db.FEEPettyAccountDetails.Where(model => model.PID == PAM.AutoID).ToList();
                            db.FEEPettyAccountDetails.RemoveRange(objDetail);
                            msg = "Fee Petty Account Entry on Date " + PAM.RDate + ",Deposited By=" + PAM.Depby + " and Receipt No=" + PAM.RNo + ",Is Modified";
                            db.SaveChanges();
                        }
                        else
                        {
                            CR.Message = "Record does not exists";
                            return Json(CR);
                        }
                    }
                    else
                    {
                        PAM.AutoID = (db.FEEPettyAccountMasters.Max(model => (int?)model.AutoID) ?? 0) + 1;
                        if (PAM.RNo == 0)
                            PAM.RNo = (db.FEEPettyAccountMasters.Where(model => model.AcaStart == acastart && model.SchoolID == schoolid).Max(model => (int?)model.RNo) ?? 0) + 1;
                        else
                        {
                            if (db.FEEPettyAccountMasters.Where(model => model.RNo == PAM.RNo).Count() > 0)
                            {
                                CR.Message = "Receipt No Already Exists";
                                return Json(CR);
                            }
                        }
                        if (PAM.PMID == 1)
                        {
                            PAM.BID = 0;
                            PAM.ChqDate = null;
                            PAM.ChqNo = null;
                        }
                        PAM.ChqBounce = false;
                        PAM.Can = false;
                        PAM.AcaStart = acastart;
                        PAM.SchoolID = schoolid;
                        PAM.EntryUserID = (int)Session["UID"];
                        PAM.EntryDate = DateTime.Now;
                        db.FEEPettyAccountMasters.Add(PAM);
                        msg = "Fee Petty Account Entry on Date " + PAM.RDate + ",Deposited By=" + PAM.Depby + " and Receipt No=" + PAM.RNo + ",Is Added";
                        db.SaveChanges();
                    }
                    int count = 0;
                    foreach (FEEPettyAccountDetail fs in PAD)
                    {
                        if (fs.Amount != 0)
                        {
                            fs.PID = PAM.AutoID;
                            db.FEEPettyAccountDetails.Add(fs);
                            count++;
                            //fsSave.Add(fs);
                            db.SaveChanges();
                        }
                    }
                    if (count > 0)
                    {
                        fillUserUpdateDetails(msg);
                        db.SaveChanges();
                        CR.Message = "Saved Successfully";
                        object[] obj = new object[2];
                        BindPettyReceiptGetData(null);
                        obj[0] = DbCampusContext.RenderPertialViewtoString(this, "_FeePettyAccountGrid").Replace("FeePettyAccountRecord?", "FeePettyAccount?parentid=" + ids[0] + "&amp;menuid=" + ids[1] + "&amp;");
                        obj[1] = PAM.AutoID;
                        CR.Data = obj;
                        return Json(CR);
                    }
                    else
                    {
                        CR.Message = "Record not valid";
                        return Json(CR);
                    }
                }
                else
                {
                    CR.Message = ModelState.Values.SelectMany(model => model.Errors).ToList()[0].ErrorMessage;
                    return Json(CR);
                }
            }
            catch (Exception ex)
            {
                CR.Message = ex.Message;
                return Json(CR);
            }
        }
        [Authorize]
        public JsonResult FeePettyReceiptDelete(int? id)
        {
            CommonResponse CR = new CommonResponse();
            try
            {
                if (CheckSession())
                {
                    CR.Message = "Login Again";
                    return Json(CR);
                }
                FEEPettyAccountMaster PAM = db.FEEPettyAccountMasters.Find(id);
                if (PAM != null)
                {
                    db.FEEPettyAccountDetails.RemoveRange(db.FEEPettyAccountDetails.Where(model => model.PID == (int)id));
                    db.FEEPettyAccountMasters.Remove(PAM);
                    fillUserUpdateDetails("Fee Petty Account Entry on Date " + PAM.RDate + " and Receipt No=" + PAM.RNo + ",Is Deleted");
                    db.SaveChanges();
                    CR.Message = "Deleted Successfully";
                    object[] obj = new object[1];
                    BindPettyReceiptGetData(null);
                    obj[0] = DbCampusContext.RenderPertialViewtoString(this, "_FeePettyAccountGrid").Replace("FeePettyAccountRecord?", "FeePettyAccount?parentid=" + ids[0] + "&amp;menuid=" + ids[1] + "&amp;");
                    CR.Data = obj;
                    return Json(CR);
                }
                else
                {
                    CR.Message = "Record not found";
                }
                return Json(CR);
            }
            catch (Exception e)
            {
                CR.Message = e.Message;
                return Json(CR);
            }
        }

        //public JsonResult FeePettyReceiptCancelled(int? id)
        //{
        //    CommonResponse CR = new CommonResponse();
        //    try
        //    {
        //        if (CheckSession())
        //        {
        //            CR.Message = "Login Again";
        //            return Json(CR);
        //        }
        //        FEEPettyAccountMaster PAM = db.FEEPettyAccountMasters.Find(id);
        //        if (PAM != null)
        //        {
        //            PAM.Can = true;
        //            fillUserUpdateDetails("Fee Petty Account Entry on Date " + PAM.RDate + " and Receipt No=" + PAM.RNo + ",Is Cancelled");
        //            db.SaveChanges();
        //            CR.Message = "Cancelled Successfully";
        //            object[] obj = new object[1];
        //            BindPettyReceiptGetData(null);
        //            obj[0] = DbCampusContext.RenderPertialViewtoString(this, "_FeePettyAccountGrid").Replace("FeePettyAccountRecord?", "FeePettyAccount?parentid=" + ids[0] + "&amp;menuid=" + ids[1] + "&amp;");
        //            CR.Data = obj;
        //            return Json(CR);
        //        }
        //        else
        //        {
        //            CR.Message = "Record not found";
        //        }
        //        return Json(CR);
        //    }
        //    catch (Exception e)
        //    {
        //        CR.Message = e.Message;
        //        return Json(CR);
        //    }
        //}
        [Authorize]
        public JsonResult FeePettyReceiptChqBounce(int? id)
        {
            CommonResponse CR = new CommonResponse();
            try
            {
                if (CheckSession())
                {
                    CR.Message = "Login Again";
                    return Json(CR);
                }
                FEEPettyAccountMaster PAM = db.FEEPettyAccountMasters.Find(id);
                if (PAM != null)
                {
                    PAM.ChqBounce = true;
                    fillUserUpdateDetails("Fee Petty Account Entry on Date " + PAM.RDate + " and Receipt No=" + PAM.RNo + ",Is Bounced");
                    db.SaveChanges();
                    CR.Message = "Cheque Bounce Successfully";
                    object[] obj = new object[1];
                    BindPettyReceiptGetData(null);
                    obj[0] = DbCampusContext.RenderPertialViewtoString(this, "_FeePettyAccountGrid").Replace("FeePettyAccountRecord?", "FeePettyAccount?parentid=" + ids[0] + "&amp;menuid=" + ids[1] + "&amp;");
                    CR.Data = obj;
                    return Json(CR);
                }
                else
                {
                    CR.Message = "Record not found";
                }
                return Json(CR);
            }
            catch (Exception e)
            {
                CR.Message = e.Message;
                return Json(CR);
            }
        }
        [Authorize]
        public ActionResult FeePettyReceiptPrint(int? id, string trdata)
        {
            ReportDocument reportdocument = new ReportDocument();
            try
            {
                encodeshdata obj = new encodeshdata();
                obj.ImageData = trdata;
                obj.actualdata = id.ToString();
                //if (RequestAuthentication(obj) == false)
                //{
                //    return RedirectToAction("Logout", "Logon");
                //}
                if (CheckSession())
                {
                    return RedirectToAction("Logout", "Logon");
                }

                int acastart = (int)Session["AcaStart"];
                int schoolid = (int)Session["SchoolID"];

                reportdocument.Load(Server.MapPath("/FeeReport/crptFeePettyReceipt.rpt"));
                reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                reportdocument.SetParameterValue(0, acastart);
                reportdocument.SetParameterValue(1, schoolid);
                reportdocument.SetParameterValue(2, 0);
                reportdocument.SetParameterValue(3, id.ToString());
                reportdocument.SetParameterValue(4, schoolid);

                reportdocument.PrintOptions.PaperSize = PaperSize.PaperA5;
                Stream stream = reportdocument.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                return File(stream, "application/pdf");
            }
            finally
            {
                reportdocument.Close();
                reportdocument.Dispose();
            }
        }

        #endregion

        #region Fee Group Shifting
        [Authorize]
        public ActionResult FeeGroupShifting()
        {
            if (CheckSession()) { return RedirectToAction("Logon", "Logon"); }
            fillPermission();
            return View("FeeGroupShifting");
        }
        [Authorize]
        public JsonResult FeeGroupShiftingRecord(string id)
        {
            CommonResponse CR = new CommonResponse();
            try
            {
                if (CheckSession())
                {
                    CR.Message = "Login Again";
                    return Json(CR);
                }

                int acastart = (int)Session["AcaStart"];
                int schoolid = (int)Session["SchoolID"];
                int StdID = Convert.ToInt32(id);
                List<object> fgs = new List<object>(from FGS in db.FEEGroupShiftingDetails join FGM in db.FEEGroupMasters on FGS.OldFGID equals FGM.AutoID join FIM in db.FEEInstallmentMasters on FGS.MonID equals FIM.AutoID where FGS.StdID == StdID && FGS.AcaStart == acastart && FGS.SchoolID == schoolid orderby FGS.MonID select new { FGS.AutoID, FGS.FGChgDate, FGM.FGName, FIM.FIName });
                object[] obj = new object[1];
                if (fgs.Count > 0)
                {
                    ViewData["GetData"] = fgs;
                    obj[0] = DbCampusContext.RenderPertialViewtoString(this, "_FeeGroupShiftingGrid");
                }
                else
                    obj[0] = "";
                CR.Message = "";
                CR.Data = obj;

                return Json(CR);
            }
            catch (Exception e)
            {
                CR.Message = e.Message;
                return Json(CR);
            }
        }
        [Authorize]
        public JsonResult FeeGroupShiftingSave(string para_FGS, int NewFGID, encodeshdata trdata)
        {
            try
            {
                trdata.actualdata = para_FGS + "#" + NewFGID.ToString();
                if (RequestAuthentication(trdata) == false)
                {
                    return Json("Login Again");
                }
                if (CheckSession())
                {
                    return Json("Login Again");
                }
                FEEGroupShiftingDetail FGS = new FEEGroupShiftingDetail();
                JavaScriptSerializer json = new JavaScriptSerializer();
                FGS = (FEEGroupShiftingDetail)json.ConvertToType<FEEGroupShiftingDetail>(json.DeserializeObject(para_FGS));

                if (ModelState.IsValid)
                {
                    int acastart = (int)Session["AcaStart"];
                    int schoolid = (int)Session["SchoolID"];
                    string strmsg = CheckFeeGroupShifting(FGS);
                    if (strmsg == "")
                    {
                        List<SIStudentYearWiseDetail> SYD = db.SIStudentYearWiseDetails.Where(model => model.StudID == FGS.StdID && model.AcaStarting == acastart && model.SchID == schoolid).ToList();
                        if (SYD.Count > 0)
                        {
                            SIStudentYearWiseDetail syd = SYD[0];

                            FGS.AutoID = (db.FEEGroupShiftingDetails.Max(model => (int?)model.AutoID) ?? 0) + 1;
                            FGS.OldFGID = syd.FeeGrpID;
                            FGS.AcaStart = acastart;
                            FGS.SchoolID = schoolid;
                            FGS.EntryUserID = (int)Session["UID"];
                            FGS.EntryDate = DateTime.Now;
                            db.FEEGroupShiftingDetails.Add(FGS);

                            syd.FeeGrpID = NewFGID;
                            syd.UpdateUID = (int)Session["UID"];
                            syd.UpDate = DateTime.Now;

                            List<FEEGroupMaster> FG = db.FEEGroupMasters.Where(model => model.AutoID == NewFGID && model.AcaStart == acastart && model.SchoolID == schoolid).ToList();
                            if (FG.Count() > 0)
                            {
                                FEEGroupMaster fg = FG[0];
                                syd.StrmID = fg.StrmID;
                            }

                            fillUserUpdateDetails("Fee Group Shifting for Fee No =" + syd.FeesNo + ",Is Added");
                            db.SaveChanges();
                            return Json("Saved Successfully");
                        }
                        else
                        {
                            return Json("Student Not Found");
                        }
                    }
                    else
                        return Json(strmsg);
                }
                else
                {
                    return Json(ModelState.Values.SelectMany(model => model.Errors).ToList()[0].ErrorMessage);
                }
            }
            catch (Exception ex)
            {
                return Json(ex.Message);
            }
        }
        [Authorize]
        public JsonResult FeeGroupShiftingDelete(int? id)
        {
            CommonResponse CR = new CommonResponse();
            try
            {
                if (CheckSession())
                {
                    CR.Message = "Login Again";
                    return Json(CR);
                }
                int acastart = (int)Session["AcaStart"];
                int schoolid = (int)Session["SchoolID"];
                FEEGroupShiftingDetail FGS = db.FEEGroupShiftingDetails.Find(id);
                if (ModelState.IsValid)
                {
                    string strmsg = CheckFeeGroupShiftingDelete(FGS);
                    if (strmsg == "")
                    {
                        List<SIStudentYearWiseDetail> SYD = db.SIStudentYearWiseDetails.Where(model => model.StudID == FGS.StdID && model.AcaStarting == acastart && model.SchID == schoolid).ToList();
                        if (SYD.Count > 0)
                        {
                            SIStudentYearWiseDetail syd = SYD[0];
                            syd.FeeGrpID = FGS.OldFGID;
                            syd.UpdateUID = (int)Session["UID"];
                            syd.UpDate = DateTime.Now;
                            db.FEEGroupShiftingDetails.Remove(FGS);
                            fillUserUpdateDetails("Fee Group Shifting for Fee No =" + syd.FeesNo + ",Is Deleted");
                            List<FEEGroupMaster> FG = db.FEEGroupMasters.Where(model => model.AutoID == FGS.OldFGID && model.AcaStart == acastart && model.SchoolID == schoolid).ToList();
                            if (FG.Count() > 0)
                            {
                                FEEGroupMaster fg = FG[0];
                                syd.StrmID = fg.StrmID;
                            }
                            db.SaveChanges();
                            CR.Message = "Deleted Successfully";

                            List<object> fgs = new List<object>(from FS in db.FEEGroupShiftingDetails join FGM in db.FEEGroupMasters on FS.OldFGID equals FGM.AutoID join FIM in db.FEEInstallmentMasters on FS.MonID equals FIM.AutoID where FS.StdID == syd.StudID && FS.AcaStart == acastart && FS.SchoolID == schoolid orderby FS.MonID select new { FS.AutoID, FS.FGChgDate, FGM.FGName, FIM.FIName });
                            object[] obj = new object[1];
                            if (fgs.Count > 0)
                            {
                                ViewData["GetData"] = fgs;
                                obj[0] = DbCampusContext.RenderPertialViewtoString(this, "_FeeGroupShiftingGrid").Replace("FeeGroupShiftingRecord", "FeeGroupShiftingDelete");
                            }
                            else
                                obj[0] = "";
                            CR.Data = obj;
                        }
                        else
                        {
                            CR.Message = "Student Not Found";
                        }
                    }
                    else
                    {
                        CR.Message = strmsg;
                    }
                }
                else
                {
                    CR.Message = ModelState.Values.SelectMany(model => model.Errors).ToList()[0].ErrorMessage;
                }
                return Json(CR);
            }
            catch (Exception e)
            {
                CR.Message = e.Message;
                return Json(CR);
            }
        }

        public string CheckFeeGroupShifting(FEEGroupShiftingDetail FGS)
        {
            int AcaStart = (int)Session["AcaStart"];
            int SchoolID = (int)Session["SchoolID"];
            var obj = from FAM in db.FEEAccountMasters join FAD in db.FEEAccountDetails on FAM.AutoID equals FAD.BLNo where FAM.AcaStart == AcaStart && FAM.Cancel == false && FAM.SchoolID == SchoolID && FAM.StdID == FGS.StdID && FAD.FIID >= FGS.MonID select FAM.AutoID;
            if (obj.Count() > 0)
            {
                return "Fee Already Paid For This Installment ! You cannot change Fee Group";
            }
            if (db.FEEGroupShiftingDetails.Where(model => model.AcaStart == AcaStart && model.SchoolID == SchoolID && model.StdID == FGS.StdID && model.MonID == FGS.MonID).Count() > 0)
            {
                return "You Already Shift Group For This Installment'";
            }
            if (db.FEEGroupShiftingDetails.Where(model => model.AcaStart == AcaStart && model.SchoolID == SchoolID && model.StdID == FGS.StdID && model.FGChgDate == FGS.FGChgDate).Count() > 0)
            {
                return "You Already Shift Group For This Date'";
            }
            return "";
        }

        public string CheckFeeGroupShiftingDelete(FEEGroupShiftingDetail FGS)
        {
            int AcaStart = (int)Session["AcaStart"];
            int SchoolID = (int)Session["SchoolID"];
            var obj = from FAM in db.FEEAccountMasters join FAD in db.FEEAccountDetails on FAM.AutoID equals FAD.BLNo where FAM.AcaStart == AcaStart && FAM.Cancel == false && FAM.SchoolID == SchoolID && FAM.StdID == FGS.StdID && FAD.FIID >= FGS.MonID select FAM.AutoID;
            if (obj.Count() > 0)
            {
                return "Fee Already Paid For This Installment ! You cannot Delete Fee Group";
            }
            return "";
        }
        #endregion

        #region Fee Activity Assigner
        [Authorize]
        public ActionResult FeeActivityAssigner(int? id)
        {
            if (CheckSession()) { return RedirectToAction("Logon", "Logon"); }
            fillPermission();
            return View("FeeActivityAssigner");
        }
        [Authorize]
        public JsonResult FeeActivityAssignerClassWiseRecord(int FHID, int ClassID, int SectionID)
        {
            CommonResponse CR = new CommonResponse();
            try
            {
                if (CheckSession())
                {
                    CR.Message = "Login Again";
                    return Json(CR);
                }

                int acastart = (int)Session["AcaStart"];
                int schoolid = (int)Session["SchoolID"];

                ViewData["GetData"] = db.spSIStudentClassSectionActivityDetails(schoolid, acastart, ClassID, SectionID, FHID);
                ViewData["Type"] = 2;
                object[] obj = new object[1];
                obj[0] = DbCampusContext.RenderPertialViewtoString(this, "_FeeActivityAssignerGrid");

                CR.Message = "";
                CR.Data = obj;

                return Json(CR);
            }
            catch (Exception e)
            {
                CR.Message = e.Message;
                return Json(CR);
            }
        }
        [Authorize]
        public JsonResult FeeActivityAssignerStudentWiseRecord(int SID)
        {
            CommonResponse CR = new CommonResponse();
            try
            {
                if (CheckSession())
                {
                    CR.Message = "Login Again";
                    return Json(CR);
                }

                int acastart = (int)Session["AcaStart"];
                int schoolid = (int)Session["SchoolID"];

                ViewData["GetData"] = db.spSIStudentActivityDetails(schoolid, acastart, SID);
                ViewData["Type"] = 1;
                object[] obj = new object[1];
                obj[0] = DbCampusContext.RenderPertialViewtoString(this, "_FeeActivityAssignerGrid");
                CR.Message = "";
                CR.Data = obj;

                return Json(CR);
            }
            catch (Exception e)
            {
                CR.Message = e.Message;
                return Json(CR);
            }
        }
        [Authorize]
        public JsonResult FeeActivityAssignerSave(string para_FSA, string saveDetails, encodeshdata trdata)
        {
            try
            {
                trdata.actualdata = para_FSA + "#" + saveDetails;
                if (RequestAuthentication(trdata) == false)
                {
                    return Json("Login Again");
                }
                if (CheckSession())
                {
                    return Json("Login Again");
                }
                List<FeeStudentActivityDetails> FSA = new List<FeeStudentActivityDetails>();
                JavaScriptSerializer json = new JavaScriptSerializer();
                FSA = (List<FeeStudentActivityDetails>)json.ConvertToType<List<FeeStudentActivityDetails>>(json.DeserializeObject(para_FSA));

                if (ModelState.IsValid)
                {
                    int acastart = (int)Session["AcaStart"];
                    int schoolid = (int)Session["SchoolID"];
                    List<FeeStudentActivityDetails> rmv = db.FeeStudentActivityDetailss.Where(model => model.AcaStart == acastart && model.SchoolID == schoolid).ToList();

                    List<FeeStudentActivityDetails> data = new List<FeeStudentActivityDetails>();
                    data = (from rv in rmv
                            join FAA in FSA on new { ID1 = rv.SID, ID2 = rv.FHID } equals new { ID1 = FAA.SID, ID2 = FAA.FHID }
                            select rv).Distinct().ToList();
                    //select new FeeStudentActivityDetails() { AutoID = rv.AutoID, SID = rv.SID, FHID = rv.FHID, FIID = rv.FIID, AcaStart = rv.AcaStart, SchoolID = rv.SchoolID, EntryDate = rv.EntryDate, EntryUserID = rv.EntryUserID }).Distinct().ToList();
                    //List<FeeStudentActivityDetails> delObj = new List<FeeStudentActivityDetails>();
                    List<FeeStudentActivityDetails> dataRemove = new List<FeeStudentActivityDetails>();
                    dataRemove = (from rv in data
                                  join FAA in FSA on new { ID1 = rv.SID, ID2 = rv.FHID, ID3 = rv.FIID } equals new { ID1 = FAA.SID, ID2 = FAA.FHID, ID3 = FAA.FIID }
                                  select rv).Distinct().ToList();
                    List<FeeStudentActivityDetails> dataNotin = new List<FeeStudentActivityDetails>();
                    dataNotin = (from rv in data
                                 join dr in dataRemove on rv.AutoID equals dr.AutoID into qs
                                 from dr in qs.DefaultIfEmpty()
                                 where dr == null
                                 select rv).Distinct().ToList();
                    foreach (FeeStudentActivityDetails fa in dataNotin)
                    {
                        var FEEData = from FAM in db.FEEAccountMasters
                                      join FAD in db.FEEAccountDetails on FAM.AutoID equals FAD.BLNo
                                      where FAM.StdID == fa.SID && FAM.Cancel == false && FAD.FHeadID == fa.FHID && FAD.FIID == fa.FIID
                                      select FAM.AutoID;
                        if (FEEData.Count() > 0)
                        {
                            return Json("You Cannot Modify This Record");
                        }
                    }
                    db.FeeStudentActivityDetailss.RemoveRange(data);

                    foreach (FeeStudentActivityDetails fa in FSA)
                    {
                        if (fa.FIID != 0)
                        {
                            FeeStudentActivityDetails obj = new FeeStudentActivityDetails();
                            obj.SID = fa.SID;
                            obj.FHID = fa.FHID;
                            obj.FIID = fa.FIID;
                            obj.AcaStart = acastart;
                            obj.SchoolID = schoolid;
                            obj.EntryUserID = (int)Session["UID"];
                            obj.EntryDate = DateTime.Now;
                            db.FeeStudentActivityDetailss.Add(obj);
                        }
                    }
                    fillUserUpdateDetails(saveDetails);
                    db.SaveChanges();

                    return Json("Saved Successfully");
                }
                else
                {
                    return Json(ModelState.Values.SelectMany(model => model.Errors).ToList()[0].ErrorMessage);
                }
            }
            catch (Exception ex)
            {
                return Json(ex.Message);
            }
        }
        [Authorize]
        public JsonResult FeeActivityAssignerDelete(int id, string deleteDetails)
        {
            try
            {
                if (CheckSession())
                {
                    return Json("Login Again");
                }
                int count = 0;
                List<FEEFixedAmount> FFA = db.FEEFixedAmounts.Where(model => model.StdID == id).ToList();
                if (ModelState.IsValid == true)
                {
                    foreach (FEEFixedAmount fa in FFA)
                    {
                        if (CheckFixedDelete(fa) == "")
                        {
                            db.FEEFixedAmounts.Remove(fa);
                            count++;
                        }
                    }
                    if (count > 0)
                    {
                        UserUpdateDetails uud = new UserUpdateDetails();
                        uud.UID = Convert.ToInt32(Session["UID"]);
                        uud.SessionID = Session.SessionID;
                        uud.UpdateDate = DateTime.Now;
                        uud.FormName = ids[2];
                        uud.Details = deleteDetails;
                        db.UserUpdateDetailss.Add(uud);
                        db.SaveChanges();
                        return Json("Deleted Successfully");
                    }
                    else
                        return Json("All Records in Use");
                }
                else
                {
                    return Json(ModelState.Values.SelectMany(model => model.Errors).ToList()[0].ErrorMessage);
                }
            }
            catch (Exception ex)
            {
                return Json(ex.Message);
            }
        }

        private string CheckActivityDelete(FEEFixedAmount fa)
        {
            int acaStart = (int)Session["AcaStart"];
            int schoolId = (int)Session["SchoolID"];
            if (db.FeeFixedDeleteCheck(fa.StdID, fa.FHID, fa.FIID, acaStart, schoolId).Single().TotalRecords > 0)
            {
                return "You Cannot Delete This Record";
            }
            else
                return "";
        }
        #endregion

        #region Fee Security Deposit
        [Authorize]
        public ActionResult FeeSecurityDeposit(int? id)
        {
            if (CheckSession()) { return RedirectToAction("Logon", "Logon"); }
            fillPermission();
            return View("FeeSecurityDeposit");
        }
        [Authorize]
        public JsonResult FeeSecurityDepositRecord(int SID, int FHID)
        {
            CommonResponse CR = new CommonResponse();
            try
            {
                if (CheckSession())
                {
                    CR.Message = "Login Again";
                    return Json(CR);
                }

                int acastart = (int)Session["AcaStart"];
                int schoolid = (int)Session["SchoolID"];

                object[] obj = new object[2];
                List<FeeSecurityDeposit> FSD = db.FeeSecurityDeposits.Where(model => model.StdID == SID && model.FHID == FHID).ToList();
                if (FSD.Count > 0)
                {
                    obj[0] = FSD[0];
                    obj[1] = "Old";
                }
                else
                    obj[1] = "New";
                CR.Message = "";
                CR.Data = obj;
                return Json(CR);
            }
            catch (Exception e)
            {
                CR.Message = e.Message;
                return Json(CR);
            }
        }
        [Authorize]
        public JsonResult FeeSecurityDepositSave(string para_FSD, string saveDetails, encodeshdata trdata)
        {
            try
            {
                trdata.actualdata = para_FSD + "#" + saveDetails;
                if (RequestAuthentication(trdata) == false)
                {
                    return Json("Login Again");
                }
                if (CheckSession())
                {
                    return Json("Login Again");
                }
                FeeSecurityDeposit FSD = new FeeSecurityDeposit();
                JavaScriptSerializer json = new JavaScriptSerializer();
                FSD = (FeeSecurityDeposit)json.ConvertToType<FeeSecurityDeposit>(json.DeserializeObject(para_FSD));

                if (ModelState.IsValid)
                {
                    if (FSD.AutoID != 0)
                    {
                        FeeSecurityDeposit CM = db.FeeSecurityDeposits.Find(FSD.AutoID);
                        if (CM != null)
                        {
                            CM.RecNo = FSD.RecNo;
                            CM.RecDate = FSD.RecDate;
                            CM.SecAmt = FSD.SecAmt;
                            if (FSD.RefNo != null && FSD.RefNo != 0)
                            {
                                string strmsg = CheckSecurityDepositSave(FSD);
                                if (strmsg == "")
                                {
                                    CM.RefNo = FSD.RefNo;
                                    CM.RefDate = FSD.RefDate;
                                    CM.RefAmt = FSD.RefAmt;
                                }
                                else
                                {
                                    return Json(strmsg);
                                }
                            }
                            CM.UpdateUserID = (int)Session["UID"];
                            CM.UpdateDate = DateTime.Now;
                        }
                        else
                        {
                            return Json("Record does not exists");
                        }
                    }
                    else
                    {
                        FSD.AutoID = (db.FeeSecurityDeposits.Max(model => (int?)model.AutoID) ?? 0) + 1;
                        FSD.SRNo = 0;
                        if (FSD.RefNo == null || FSD.RefNo == 0)
                        {
                            FSD.RefNo = null;
                            FSD.RefDate = null;
                            FSD.RefAmt = null;
                        }
                        FSD.EntryUserID = (int)Session["UID"];
                        FSD.EntryDate = DateTime.Now;
                        db.FeeSecurityDeposits.Add(FSD);
                    }
                    fillUserUpdateDetails(saveDetails);
                    db.SaveChanges();

                    return Json("Saved Successfully");

                }
                else
                {
                    return Json(ModelState.Values.SelectMany(model => model.Errors).ToList()[0].ErrorMessage);
                }
            }
            catch (Exception ex)
            {
                return Json(ex.Message);
            }
        }
        [Authorize]
        public JsonResult FeeSecurityDepositDelete(int id, int type)
        {
            try
            {
                if (CheckSession())
                {
                    return Json("Login Again");
                }
                string deletemsg = "";
                FeeSecurityDeposit FSD = db.FeeSecurityDeposits.Find(id);
                if (ModelState.IsValid == true)
                {
                    if (type == 2)
                    {
                        FSD.RefNo = null;
                        FSD.RefAmt = null;
                        FSD.RefDate = null;
                        deletemsg = "Security Refund Delete for StudentID=" + FSD.StdID + " and FeeHeadID=" + FSD.FHID + "";
                    }
                    else if (type == 1)
                    {
                        if (FSD.RefNo == null && FSD.SRNo == 0)
                        {
                            db.FeeSecurityDeposits.Remove(FSD);
                            deletemsg = "Security Deposit Delete for StudentID=" + FSD.StdID + " and FeeHeadID=" + FSD.FHID + "";
                        }
                        else
                            return Json("Collection Amount Is  Refunded,Please Delete Refunded amount first");
                    }
                    fillUserUpdateDetails(deletemsg);
                    db.SaveChanges();
                    return Json("Deleted Successfully");
                }
                else
                {
                    return Json(ModelState.Values.SelectMany(model => model.Errors).ToList()[0].ErrorMessage);
                }
            }
            catch (Exception ex)
            {
                return Json(ex.Message);
            }
        }

        private string CheckSecurityDepositSave(FeeSecurityDeposit fsd)
        {
            int acaStart = (int)Session["AcaStart"];
            int schoolId = (int)Session["SchoolID"];
            var obj = from FAM in db.FEEAccountMasters join FAD in db.FEEAccountDetails on FAM.AutoID equals FAD.BLNo where FAM.RNo == fsd.SRNo && FAM.URNo == fsd.RecNo && FAM.Cancel == false && FAD.ChqBounce == true select FAM.AutoID;
            if (obj.Count() > 0)
            {
                return "Fee can't be refund due to Cheque Bounce";
            }
            else
                return "";
        }
        #endregion

        #region Fee Refund
        [Authorize]
        public ActionResult FeeRefund(int? id)
        {
            if (CheckSession()) { return RedirectToAction("Logon", "Logon"); }
            fillPermission();
            ViewBag.ddlPaymode = db.FeePayModeMasters.Where(model => model.AutoID != 8).OrderBy(model => model.AutoID).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.PayModeName }).ToList();
            ViewBag.ddlBankName = db.FEEBankMasters.Where(model => model.AutoID != 0).OrderBy(model => model.FBName).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.FBName }).ToList();
            return View("FeeRefund");
        }
        [Authorize]
        public JsonResult FeeRefundRecord(int SID, int FIID, int FPTypeID)
        {
            CommonResponse CR = new CommonResponse();
            try
            {
                if (CheckSession())
                {
                    CR.Message = "Login Again";
                    return Json(CR);
                }

                int acastart = (int)Session["AcaStart"];
                int schoolid = (int)Session["SchoolID"];
                ViewData["GetData"] = db.fillFeeRefundGrid(schoolid, acastart, SID, FIID, FPTypeID);

                object[] obj = new object[1];
                obj[0] = DbCampusContext.RenderPertialViewtoString(this, "_FeeRefundGrid");
                CR.Message = "";
                CR.Data = obj;
                return Json(CR);
            }
            catch (Exception e)
            {
                CR.Message = e.Message;
                return Json(CR);
            }
        }
        [Authorize]
        public JsonResult FeeRefundSave(string para_FAM, string para_FAD, string para_FAB, encodeshdata trdata)
        {
            try
            {
                trdata.actualdata = para_FAM + "#" + para_FAD + "#" + para_FAB;
                if (RequestAuthentication(trdata) == false)
                {
                    return Json("Login Again");
                }
                if (CheckSession())
                {
                    return Json("Login Again");
                }
                FEEAccountMaster FAM = new FEEAccountMaster();
                JavaScriptSerializer json = new JavaScriptSerializer();
                FAM = (FEEAccountMaster)json.ConvertToType<FEEAccountMaster>(json.DeserializeObject(para_FAM));

                List<FEEAccountDetail> FAD = new List<FEEAccountDetail>();
                FAD = (List<FEEAccountDetail>)json.ConvertToType<List<FEEAccountDetail>>(json.DeserializeObject(para_FAD));

                FeeAccountBank FAB = new FeeAccountBank();
                FAB = (FeeAccountBank)json.ConvertToType<FeeAccountBank>(json.DeserializeObject(para_FAB));

                if (ModelState.IsValid)
                {
                    if (FAD.Count > 0)
                    {
                        using (TransactionScope transaction = new TransactionScope())
                        {
                            int acastart = (int)Session["AcaStart"];
                            int schoolid = (int)Session["SchoolID"];
                            int BLNo = (db.FEEAccountMasters.Max(model => (int?)model.AutoID) ?? 0) + 1;
                            FAM.AutoID = BLNo;
                            FAM.RNo = (db.FEEAccountMasters.Where(model => model.AcaStart == acastart && model.SchoolID == schoolid).Max(model => (int?)model.RNo) ?? 0) + 1;
                            FAM.URNo = (db.FEEAccountMasters.Where(model => model.AcaStart == acastart && model.SchoolID == schoolid && model.Cancel == false).Max(model => (int?)model.URNo) ?? 0) + 1;
                            FAM.InstType = (Int16)0;
                            FAM.DBankID = 1;
                            FAM.Cancel = false;
                            FAM.EntryUserID = (int)Session["UID"];
                            FAM.EntryDate = DateTime.Now;
                            FAM.AcaStart = acastart;
                            FAM.SchoolID = schoolid;
                            db.FEEAccountMasters.Add(FAM);
                            db.SaveChanges();
                            if (FAD[0].PMID != 1)
                            {
                                FAB.BLNo = BLNo;
                                FAB.Status = false;
                                db.FeeAccountBanks.Add(FAB);
                                db.SaveChanges();
                            }
                            foreach (FEEAccountDetail fd in FAD)
                            {
                                fd.BLNo = BLNo;
                                fd.ChqBounce = false;
                                fd.Amount = 0;
                                fd.Type = (Int16)2;
                                if (fd.PMID != 1)
                                    fd.FBID = (db.FeeAccountBanks.Max(model => (int?)model.AutoID) ?? 0);
                                else
                                    fd.FBID = 0;
                                db.FEEAccountDetails.Add(fd);
                            }
                            fillUserUpdateDetails("Fee Refund for BillNo=" + FAM.AutoID + ",StudentID=" + FAM.StdID + ",FeeInstallmentID=" + FAD[0].FIID + "");
                            db.SaveChanges();
                            transaction.Complete();
                            return Json("Refund Successfully");
                        }
                    }
                    else
                        return Json("Record Not Found");
                }
                else
                {
                    return Json(ModelState.Values.SelectMany(model => model.Errors).ToList()[0].ErrorMessage);
                }
            }
            catch (Exception ex)
            {
                return Json(ex.Message);
            }
        }

        private string CheckRefundSave(FeeSecurityDeposit fsd)
        {
            int acaStart = (int)Session["AcaStart"];
            int schoolId = (int)Session["SchoolID"];
            var obj = from FAM in db.FEEAccountMasters join FAD in db.FEEAccountDetails on FAM.AutoID equals FAD.BLNo where FAM.RNo == fsd.SRNo && FAM.URNo == fsd.RecNo && FAM.Cancel == false && FAD.ChqBounce == true select FAM.AutoID;
            if (obj.Count() > 0)
            {
                return "Fee can't be Refund due to Cheque Bounce";
            }
            else
                return "";
        }
        #endregion

        #region Fee Search

        public ActionResult FeeSearch()
        {
            if (CheckSession()) { return RedirectToAction("Logon", "Logon"); }
            fillPermission();
            return View("FeeSearch");
        }

        [Authorize]
        public JsonResult FeeSearchDetails(string ChequeNo, string ReceiptNo, string FeeBankID)
        {
            int rcpt = 0;
            int BID = 0;
            if (ReceiptNo != "")
            {
                rcpt = Convert.ToInt32(ReceiptNo);
            }
            if (FeeBankID != "")
            {
                BID = Convert.ToInt32(FeeBankID);
            }
            CommonResponse CR = new CommonResponse();
            try
            {
                if (CheckSession())
                {
                    CR.Message = "Login Again";
                    return Json(CR);
                }

                int acastart = (int)Session["AcaStart"];
                int schoolid = (int)Session["SchoolID"];
                List<FeeSearch> fcd;
                fcd = db.FEESearchDetails(schoolid, acastart, ChequeNo, rcpt, BID);
                if (fcd.Count > 0)
                {
                    ViewData["GetData"] = fcd;
                    object[] obj = new object[1];
                    obj[0] = DbCampusContext.RenderPertialViewtoString(this, "_FeeSearchGrid");

                    CR.Message = "";
                    CR.Data = obj;
                }
                else
                    CR.Message = "Record not found";
                return Json(CR);
            }
            catch (Exception e)
            {
                CR.Message = e.Message;
                return Json(CR);
            }
        }

        #endregion

        #region Fee Receipt Details

        public ActionResult FeeReceiptDetails()
        {
            if (CheckSession()) { return RedirectToAction("Logon", "Logon"); }
            fillPermission();
            return View("FeeReceiptDetails");
        }
        [Authorize]
        public JsonResult FeeReceiptDetailsRecord(int StdID, string type, string page = "")
        {
            CommonResponse CR = new CommonResponse();
            try
            {
                if (CheckSession())
                {
                    CR.Message = "Login Again";
                    return Json(CR);
                }

                int acastart = (int)Session["AcaStart"];
                int schoolid = (int)Session["SchoolID"];

                if (type == "Summ")
                {
                    if (page == "FeeCollection")
                    {
                        TempData["StudentID"] = StdID;
                    }
                    else
                    {
                        TempData["StudentID"] = null;
                    }
                    ViewData["GetData"] = db.FeeReceiptDetails_Summ(schoolid, acastart, StdID);
                }
                else if (type == "Det")
                    ViewData["GetData"] = db.FeeReceiptDetails_Det(schoolid, acastart, StdID);
                else if (type == "Chq")
                    ViewData["GetData"] = db.FeeReceiptDetails_Chq(schoolid, acastart, StdID);
                else if (type == "Due")
                {
                    DataSet ds = db.spFeeGetDueAmount(schoolid, StdID.ToString(), "", acastart, "", 0, 0, 0, "RDDUE");
                    if (ds.Tables[0].Rows.Count > 1)
                        ViewData["GetData"] = (from FeeDue in ds.Tables[0].Select().ToList()
                                               select new FeebindGridData() { FeeInstallmentID = Convert.ToInt32(FeeDue.ItemArray.GetValue(0)), FeeInstallmentName = FeeDue.ItemArray.GetValue(1).ToString(), FeeHeadID = Convert.ToInt32(FeeDue.ItemArray.GetValue(2)), FeeHeadName = FeeDue.ItemArray.GetValue(3).ToString(), Amt = Convert.ToInt32(FeeDue.ItemArray.GetValue(4)), ConAmt = Convert.ToInt32(FeeDue.ItemArray.GetValue(5)), PaidAmt = Convert.ToInt32(FeeDue.ItemArray.GetValue(6)) }).ToList();
                    else
                        ViewData["GetData"] = new List<FeebindGridData>();
                }

                ViewData["Type"] = type;

                object[] obj = new object[1];
                obj[0] = DbCampusContext.RenderPertialViewtoString(this, "_FeeReceiptDetailsGrid");

                CR.Message = "";
                CR.Data = obj;

                return Json(CR);
            }
            catch (Exception e)
            {
                CR.Message = e.Message;
                return Json(CR);
            }
        }
        [Authorize]
        public ActionResult FeeReceiptPrint(int? id, string trdata)
        {
            ReportDocument reportdocument = new ReportDocument();
            try
            {
                GC.Collect();
                encodeshdata obj = new encodeshdata();
                obj.ImageData = trdata;
                obj.actualdata = id.ToString();

                if (CheckSession())
                {
                    return RedirectToAction("Logout", "Logon");
                }

                int acastart = (int)Session["AcaStart"];
                int schoolid = (int)Session["SchoolID"];
                var ReportName = (from FY in db.FEEYearlySettings
                                  join RS in db.MTReportSettingMasters on FY.FeeReceiptID equals RS.AutoID
                                  where FY.AcaStart == acastart && FY.SchoolID == schoolid && RS.CertficateName == "FeeReceipt"
                                  select new { RS.LinkingReport }
                                      ).FirstOrDefault();
                if (ReportName.LinkingReport.ToString() != null)
                {

                    if (ReportName.LinkingReport.ToString() == "crptFeeReceiptA5Portrait1copy" || ReportName.LinkingReport.ToString() == "crptFeeReceiptA5Landscape1copy")
                    {
                        if (db.FeeReceipts(id.ToString(), acastart, schoolid, 1, Session.SessionID) > 0)
                        {
                            reportdocument.Load(Server.MapPath("/FeeReport/" + ReportName.LinkingReport.ToString() + ".rpt"));
                            reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                            reportdocument.RecordSelectionFormula = "{FEEPaidrpt.SessionID}='" + Session.SessionID + "'";
                            reportdocument.DataDefinition.FormulaFields["ImagePath"].Text = "'" + Server.MapPath("/Images") + "'";
                            Stream stream = reportdocument.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                            return File(stream, "application/pdf");
                        }
                        else
                        {
                            return null;
                        }
                    }
                    else
                    {
                        if (db.FeeReceipts(id.ToString(), acastart, schoolid, 0, Session.SessionID) > 0)
                        {
                            reportdocument.Load(Server.MapPath("/FeeReport/" + ReportName.LinkingReport.ToString() + ".rpt"));
                            reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                            reportdocument.RecordSelectionFormula = "{FEEPaidrpt.SessionID}='" + Session.SessionID + "'";
                            reportdocument.DataDefinition.FormulaFields["ImagePath"].Text = "'" + Server.MapPath("/Images") + "'";
                            Stream stream = reportdocument.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                            return File(stream, "application/pdf");
                        }

                        else
                        {
                            return null;
                        }
                    }
                }
                else
                {
                    return null;
                }
            }
            finally
            {
                reportdocument.Close();
                reportdocument.Dispose();
            }
        }
        [Authorize]
        public ActionResult FeeReceiptTuitionFee(string FNo, string ParentType, string trdata)
        {
            ReportDocument reportdocument = new ReportDocument();
            try
            {
                GC.Collect();
                encodeshdata obj = new encodeshdata();
                obj.ImageData = trdata;
                obj.actualdata = FNo.ToString() + "#" + ParentType;
                //if (RequestAuthentication(obj) == false)
                //{
                //    return RedirectToAction("Logout", "Logon");
                //}
                if (CheckSession())
                {
                    return RedirectToAction("Logout", "Logon");
                }

                int acastart = (int)Session["AcaStart"];
                int schoolid = (int)Session["SchoolID"];
                var ReportName = (from FY in db.FEEYearlySettings
                                  join RS in db.MTReportSettingMasters on FY.TuitionCertID equals RS.AutoID
                                  where FY.AcaStart == acastart && FY.SchoolID == schoolid && RS.CertficateName == "TuitionFeeCertificate"
                                  select new { RS.LinkingReport }
                                   ).FirstOrDefault();
                reportdocument.Load(Server.MapPath("/FeeReport/" + ReportName.LinkingReport.ToString() + ".rpt"));
                reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                reportdocument.SetParameterValue(0, FNo);
                reportdocument.SetParameterValue(1, acastart);
                reportdocument.SetParameterValue(2, schoolid);
                reportdocument.SetParameterValue(3, "");
                reportdocument.SetParameterValue(4, "");
                reportdocument.SetParameterValue(5, schoolid);
                reportdocument.DataDefinition.FormulaFields["Date"].Text = "'" + Convert.ToDateTime(DateTime.Now, cinfo).ToString("dd/MM/yyyy") + "'";
                reportdocument.DataDefinition.FormulaFields["AcaStart"].Text = "'" + acastart.ToString() + "'";
                reportdocument.DataDefinition.FormulaFields["AcaSession"].Text = "'" + acastart.ToString() + " - " + (acastart + 1).ToString() + "'";
                reportdocument.DataDefinition.FormulaFields["Parent"].Text = "'" + ParentType + "'";
                reportdocument.DataDefinition.FormulaFields["ImagePath"].Text = "'" + Server.MapPath("/Images") + "'";

                Stream stream = reportdocument.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                return File(stream, "application/pdf");
            }
            finally
            {
                reportdocument.Close();
                reportdocument.Dispose();
            }
        }
        [Authorize]
        public ActionResult FeeReceiptPreview(int FNo, string trdata)
        {
            ReportDocument reportdocument = new ReportDocument();
            try
            {
                GC.Collect();
                encodeshdata obj = new encodeshdata();
                obj.ImageData = trdata;
                obj.actualdata = FNo.ToString();
                //if (RequestAuthentication(obj) == false)
                //{
                //    return RedirectToAction("Logout", "Logon");
                //}
                if (CheckSession())
                {
                    return RedirectToAction("Logout", "Logon");
                }

                int acastart = (int)Session["AcaStart"];
                int schoolid = (int)Session["SchoolID"];


                reportdocument.Load(Server.MapPath("/FeeReport/crptStudentLedgerStudentWise.rpt"));
                reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                reportdocument.SetParameterValue(0, schoolid);
                reportdocument.SetParameterValue(1, acastart);
                reportdocument.SetParameterValue(2, FNo);
                reportdocument.SetParameterValue(3, schoolid);
                reportdocument.SetParameterValue(4, 0);

                Stream stream = reportdocument.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                return File(stream, "application/pdf");
            }
            finally
            {
                reportdocument.Close();
                reportdocument.Dispose();
            }
        }
        [Authorize]
        public JsonResult FeeReceiptCancel(int? id, string Remark)
        {
            CommonResponse CR = new CommonResponse();
            try
            {
                if (CheckSession())
                {
                    CR.Message = "Login Again";
                    return Json(CR);
                }
                FEEAccountMaster FAM = db.FEEAccountMasters.Find(id);
                if (ModelState.IsValid == true)
                {
                    int acastart = (int)Session["AcaStart"];
                    int schoolID = (int)Session["SchoolID"];
                    var RDate = Convert.ToDateTime(FAM.RDate, cinfo);
                    if (db.FEEYearlySettings.Where(model => model.AcaStart == acastart && model.SchoolID == schoolID && model.PackDate > RDate).Count() > 0)
                    {
                        CR.Message = "Please Check Fee Pack Date";
                        return Json(CR);
                    }
                    string str = CheckReceiptCancelDelete(id, "Delete");
                    if (str == "")
                    {
                        if (db.SIStudentYearWiseDetails.Where(model => model.StudID == FAM.StdID && model.AcaStarting == acastart && model.SchID == schoolID).Count() > 0)
                        {
                            //lstArray.Add(" Update FATransactions Set Flag = 'AD' Where FATransactionID IN ( Select Distinct FT.FATransactionID From FATransactions FT INNER JOIN FeeFATransBill FTB ON FTB.FATransactionID=FT.FATransactionID " +
                            //        " INNER JOIN FeeAccountMaster FAM ON FAM.BillNo=FTB.BillNo INNER JOIN FeeAccountDetail FAD ON FAM.BillNo=FAD.BillNO " +
                            //        " INNER JOIN FeeGroupMaster FGM ON FGM.FeeGroupID=FAM.FeeGroupID WHERE FAM.UserReceiptNo=" + Convert.ToInt32(gvFeeReciptDts.Rows[Convert.ToInt32(StrArr[1])].Cells[1].Text) + " AND FGM.AcaStart=" + Session["AcaStart"].ToString() + " And FGM.SchoolID=" + Session["SchoolID"].ToString() + " AND FAM.ReceiptNo=" + intSReceiptNo + ") ");

                            FAM.Cancel = true;
                            FAM.UpdateUserID = Convert.ToInt32(Session["UID"]);
                            FAM.UpdateDate = DateTime.Now;
                            FAM.RecptDeleteRemark = Remark;
                            if (db.FeeAccountExcesss.Where(model => model.BillNo == FAM.AutoID).Count() > 0)
                                db.FeeAccountExcesss.RemoveRange(db.FeeAccountExcesss.Where(model => model.BillNo == FAM.AutoID));

                            if (db.FeeAccountBanks.Where(model => model.ChBouID == FAM.AutoID).Count() > 0)
                            {
                                foreach (FeeAccountBank FAB in db.FeeAccountBanks.Where(model => model.ChBouID == FAM.AutoID))
                                {
                                    FAB.ChBouID = null;
                                    FAB.Status = true;
                                }
                            }

                            List<FEEAccountAdjustment> faa = db.FEEAccountAdjustments.Where(model => (model.AutoID == FAM.AutoID || model.RBillNo == FAM.AutoID)).ToList();
                            if (faa.Count > 0)
                            {
                                if (faa[0].AutoID == FAM.AutoID)
                                {
                                    FEEAccountMaster FAMAdjust = db.FEEAccountMasters.Find(faa[0].RBillNo);
                                    FAMAdjust.Cancel = true;
                                }
                                else
                                {
                                    FEEAccountMaster FAMAdjust = db.FEEAccountMasters.Find(faa[0].AutoID);
                                    FAMAdjust.Cancel = true;
                                }
                                db.FEEAccountAdjustments.RemoveRange(faa);
                            }
                            var qry = from FSD in db.FeeSecurityDeposits
                                      join FHM in db.FEEHeadMasters on FSD.FHID equals FHM.FHeadID
                                      where FSD.SRNo == FAM.RNo && FHM.AcaStart == acastart && FHM.SchoolID == schoolID
                                      select FSD.AutoID;
                            if (qry.Count() > 0)
                            {
                                db.FeeSecurityDeposits.RemoveRange(db.FeeSecurityDeposits.Where(model => qry.Contains(model.AutoID)));
                            }
                            if (db.FeeFATransBills.Where(model => model.BillNo == id).Count() > 0)
                            {
                                int FATransactionID = Convert.ToInt32(db.FeeFATransBills.Where(mm => mm.BillNo == id).ToList()[0].FATransactionID);
                                int intFATrans = Convert.ToInt32(db.FATransactions.Where(model => model.AutoID == FATransactionID).ToList()[0].FATransID);
                                db.FATransactionRemarkDetailss.RemoveRange(db.FATransactionRemarkDetailss.Where(model => model.FATransID == intFATrans).ToList());
                                db.FATransactions.RemoveRange(db.FATransactions.Where(model => model.FATransID == intFATrans).ToList());
                                db.FeeFATransBills.RemoveRange(db.FeeFATransBills.Where(model => model.BillNo == id).ToList());
                            }

                            SIStudentYearWiseDetail SYD = db.SIStudentYearWiseDetails.Where(model => model.StudID == FAM.StdID && model.AcaStarting == acastart && model.SchID == schoolID).ToList()[0];

                            fillUserUpdateDetails("Fee Receipt Deleted, Receipt No=" + FAM.URNo + ",ReceiptDate=" + FAM.RDate + ",Fee No=" + SYD.FeesNo + "");
                            db.SaveChanges();
                            CR.Message = "Deleted Successfully";

                            ViewData["GetData"] = db.FeeReceiptDetails_Summ(schoolID, acastart, SYD.StudID);
                            ViewData["Type"] = "Summ";

                            object[] obj = new object[1];
                            obj[0] = DbCampusContext.RenderPertialViewtoString(this, "_FeeReceiptDetailsGrid");

                            CR.Data = obj;
                            return Json(CR);
                        }
                        else
                        {
                            CR.Message = "Student not found";
                            return Json(CR);
                        }
                    }
                    else
                    {
                        CR.Message = str;
                        return Json(CR);
                    }
                }
                else
                {
                    CR.Message = ModelState.Values.SelectMany(model => model.Errors).ToList()[0].ErrorMessage;
                    return Json(CR);
                }
            }
            catch (Exception ex)
            {
                CR.Message = ex.Message;
                return Json(CR);
            }
        }

        //public JsonResult FeeReceiptDelete(int? id)
        //{
        //    CommonResponse CR = new CommonResponse();
        //    try
        //    {
        //        if (CheckSession())
        //        {
        //            CR.Message = "Login Again";
        //            return Json(CR);
        //        }
        //        FEEAccountMaster FAM = db.FEEAccountMasters.Find(id);
        //        if (ModelState.IsValid == true)
        //        {
        //            int acastart = (int)Session["AcaStart"];
        //            int schoolID = (int)Session["SchoolID"];
        //            string str = CheckReceiptCancelDelete(id, "delete");
        //            if (str == "")
        //            {
        //                if (db.SIStudentYearWiseDetails.Where(model => model.StudID == FAM.StdID && model.AcaStarting == acastart && model.SchID == schoolID).Count() > 0)
        //                {
        //                    if (db.FeeSecurityDeposits.Where(model => model.RecNo == FAM.URNo && model.SRNo == FAM.RNo).Count() > 0)
        //                    {
        //                        db.FeeSecurityDeposits.RemoveRange(db.FeeSecurityDeposits.Where(model => model.RecNo == FAM.URNo && model.SRNo == FAM.RNo));
        //                    }
        //                    db.FEEAccountMasters.Remove(FAM);
        //                    //int FATransactionID =db.fatr
        //                    SIStudentYearWiseDetail SYD = db.SIStudentYearWiseDetails.Where(model => model.StudID == FAM.StdID && model.AcaStarting == acastart && model.SchID == schoolID).ToList()[0];

        //                    UserUpdateDetails uud = new UserUpdateDetails();
        //                    uud.UID = Convert.ToInt32(Session["UID"]);
        //                    uud.SessionID = Session.SessionID;
        //                    uud.UpdateDate = DateTime.Now;
        //                    uud.FormName = ids[2];
        //                    uud.Details = "Fee Receipt Deleted, Receipt No=" + FAM.URNo + ",ReceiptDate=" + FAM.RDate + ",Fee No=" + SYD.FeesNo + "";
        //                    db.UserUpdateDetailss.Add(uud);
        //                    db.SaveChanges();
        //                    CR.Message = "Deleted Successfully";
        //                    ViewData["GetData"] = db.FeeReceiptDetails_Summ(schoolID, acastart, SYD.StudID);
        //                    ViewData["Type"] = "Summ";

        //                    object[] obj = new object[1];
        //                    obj[0] = DbCampusContext.RenderPertialViewtoString(this, "_FeeReceiptDetailsGrid");

        //                    CR.Data = obj;
        //                    return Json(CR);
        //                }
        //                else
        //                {
        //                    CR.Message = "Student not found";
        //                    return Json(CR);
        //                }
        //            }
        //            else
        //            {
        //                CR.Message = str;
        //                return Json(CR);
        //            }
        //        }
        //        else
        //        {
        //            CR.Message = ModelState.Values.SelectMany(model => model.Errors).ToList()[0].ErrorMessage;
        //            return Json(CR);
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        CR.Message = ex.Message;
        //        return Json(CR);
        //    }
        //}

        private string CheckReceiptCancelDelete(int? id, string type)
        {
            int acaStart = (int)Session["AcaStart"];
            int schoolId = (int)Session["SchoolID"];
            if (db.FeeAccountExcesss.Where(model => model.RTBNo == id).Count() > 0)
            {
                return "Excess Amount Adjusted to other Installment ! You cannot " + type + " the receipt";
            }
            var obj = from FSD in db.FeeSecurityDeposits
                      join FAM in db.FEEAccountMasters on new { FSD.RecNo, FSD.SRNo, FSD.StdID } equals new { RecNo = (int?)FAM.URNo, SRNo = (int?)FAM.RNo, FAM.StdID }
                      join FAD in db.FEEAccountDetails on FAM.AutoID equals FAD.BLNo
                      where FSD.SRNo != 0 && FAM.Cancel == false && FAM.AcaStart == acaStart && FAM.SchoolID == schoolId && FAM.AutoID == id
                      select FSD.RefAmt;
            if (obj.Sum() > 0)
            {
                return "Receipt cannot be " + type + " as amount already refunded";
            }
            else
                return "";
        }
        [Authorize]
        public ActionResult ParentFeeReceiptPrint(string SID, int ReceiptNo, string BillNo, string trdata)
        {
            ReportDocument reportdocument = new ReportDocument();
            try
            {
                GC.Collect();
                encodeshdata obj = new encodeshdata();

                if (CheckSession())
                {
                    return RedirectToAction("Logout", "Logon");
                }

                int acastart = (int)Session["AcaStart"];
                int schoolid = (int)Session["SchoolID"];
                var ReportName = (from FY in db.FEEYearlySettings
                                  join RS in db.MTReportSettingMasters on FY.FeeReceiptID equals RS.AutoID
                                  where FY.AcaStart == acastart && FY.SchoolID == schoolid && RS.CertficateName == "FeeReceipt"
                                  select new { RS.LinkingReport }
                                          ).FirstOrDefault();
                if (ReportName.LinkingReport.ToString() != null)
                {

                    if (ReportName.LinkingReport.ToString() == "crptFeeReceiptA5Portrait1copy" || ReportName.LinkingReport.ToString() == "crptFeeReceiptA5Landscape1copy")
                    {
                        if (db.FeeReceipts(BillNo, acastart, schoolid, 1, Session.SessionID) > 0)
                        {
                            reportdocument.Load(Server.MapPath("/FeeReport/" + ReportName.LinkingReport.ToString() + ".rpt"));
                            reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                            reportdocument.RecordSelectionFormula = "{FEEPaidrpt.SessionID}='" + Session.SessionID + "'";
                            reportdocument.DataDefinition.FormulaFields["ImagePath"].Text = "'" + Server.MapPath("/Images") + "'";
                            Stream stream = reportdocument.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                            return File(stream, "application/pdf");
                        }
                        else
                        {
                            return null;
                        }
                    }
                    else
                    {
                        if (db.FeeReceipts(BillNo, acastart, schoolid, 1, Session.SessionID) > 0)
                        {
                            reportdocument.Load(Server.MapPath("/FeeReport/crptFeeReceipt.rpt"));
                            reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                            reportdocument.RecordSelectionFormula = "{FEEPaidrpt.SessionID}='" + Session.SessionID + "'";
                            Stream stream = reportdocument.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                            return File(stream, "application/pdf");
                        }

                        else
                        {
                            return null;
                        }
                    }
                }
                else
                {
                    return null;
                }
            }
            finally
            {
                reportdocument.Close();
                reportdocument.Dispose();
            }
        }

        [Authorize]
        public ActionResult ParentFeeReceiptPrints(int? id, string trdata)
        {
            ReportDocument reportdocument = new ReportDocument();
            try
            {
                GC.Collect();
                encodeshdata obj = new encodeshdata();
                obj.ImageData = trdata;
                obj.actualdata = id.ToString();
                //if (RequestAuthentication(obj) == false)
                //{
                //    return RedirectToAction("Logout", "Logon");
                //}
                if (CheckSession())
                {
                    return RedirectToAction("Logout", "Logon");
                }

                int acastart = (int)Session["AcaStart"];
                int schoolid = (int)Session["SchoolID"];
                var ReportName = (from FY in db.FEEYearlySettings
                                  join RS in db.MTReportSettingMasters on FY.FeeReceiptID equals RS.AutoID
                                  where FY.AcaStart == acastart && FY.SchoolID == schoolid && RS.CertficateName == "FeeReceipt"
                                  select new { RS.LinkingReport }
                                            ).FirstOrDefault();
                if (ReportName.LinkingReport.ToString() != null)
                {

                    if (ReportName.LinkingReport.ToString() == "crptFeeReceiptA5Portrait1copy" || ReportName.LinkingReport.ToString() == "crptFeeReceiptA5Landscape1copy")
                    {
                        if (db.FeeReceipts(id.ToString(), acastart, schoolid, 1, Session.SessionID) > 0)
                        {
                            reportdocument.Load(Server.MapPath("/FeeReport/" + ReportName.LinkingReport.ToString() + ".rpt"));
                            reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                            reportdocument.RecordSelectionFormula = "{FEEPaidrpt.SessionID}='" + Session.SessionID + "'";
                            reportdocument.DataDefinition.FormulaFields["ImagePath"].Text = "'" + Server.MapPath("/Images") + "'";
                            Stream stream = reportdocument.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                            return File(stream, "application/pdf");
                        }
                        else
                        {
                            return null;
                        }
                    }
                    else
                    {
                        if (db.FeeReceipts(id.ToString(), acastart, schoolid, 1, Session.SessionID) > 0)
                        {
                            reportdocument.Load(Server.MapPath("/FeeReport/crptFeeReceipt.rpt"));
                            reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                            reportdocument.RecordSelectionFormula = "{FEEPaidrpt.SessionID}='" + Session.SessionID + "'";
                            Stream stream = reportdocument.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                            return File(stream, "application/pdf");
                        }

                        else
                        {
                            return null;
                        }
                    }
                }
                else
                {
                    return null;
                }
            }
            finally
            {
                reportdocument.Close();
                reportdocument.Dispose();
            }
        }

        #endregion

        #region Fee Cheque Bounce Detail
        [Authorize]
        public ActionResult FeeChequeBounceDetail()
        {
            if (CheckSession()) { return RedirectToAction("Logon", "Logon"); }
            fillPermission();
            return View("FeeChequeBounceDetail");
        }
        [Authorize]
        public JsonResult FeeChequeBounceDetailRecord(string FNo, string ChequeNo, string FIID, string FromDate, string ToDate)
        {
            CommonResponse CR = new CommonResponse();
            try
            {
                if (CheckSession())
                {
                    CR.Message = "Login Again";
                    return Json(CR);
                }

                int acastart = (int)Session["AcaStart"];
                int schoolid = (int)Session["SchoolID"];

                List<FeeChequeBounceDetails> fcd = db.FeeChequeBounceDetails(schoolid, acastart, FNo, ChequeNo, FIID, FromDate, ToDate);
                if (fcd.Count > 0)
                {
                    ViewData["GetData"] = fcd;
                    object[] obj = new object[1];
                    obj[0] = DbCampusContext.RenderPertialViewtoString(this, "_FeeChequeBounceDetailGrid");

                    CR.Message = "";
                    CR.Data = obj;
                }
                else
                    CR.Message = "Record not found";
                return Json(CR);
            }
            catch (Exception e)
            {
                CR.Message = e.Message;
                return Json(CR);
            }
        }
        [Authorize]
        public JsonResult FeeChequeBounceDetailDelete(int[] BNo, encodeshdata trdata)
        {
            try
            {
                trdata.actualdata = "[" + "\"" + string.Join("\",\"", BNo) + "\"]";
                if (RequestAuthentication(trdata) == false)
                {
                    return Json("Login Again");
                }
                if (CheckSession())
                {
                    return Json("Login Again");
                }
                if (ModelState.IsValid)
                {
                    foreach (int FBID in BNo)
                    {
                        FeeAccountBank FAB = db.FeeAccountBanks.Find(FBID);
                        FAB.Status = false;
                        FAB.CBDate = null;
                        List<FEEAccountDetail> FAD = db.FEEAccountDetails.Where(model => model.FBID == FBID).ToList();
                        foreach (FEEAccountDetail fd in FAD)
                        {
                            fd.ChqBounce = false;
                        }
                        FEEAccountMaster FAM = db.FEEAccountMasters.Find(FAB.BLNo);

                        UserUpdateDetails uud = new UserUpdateDetails();
                        uud.UID = Convert.ToInt32(Session["UID"]);
                        uud.SessionID = Session.SessionID;
                        uud.UpdateDate = DateTime.Now;
                        uud.FormName = ids[2];
                        uud.Details = "Cheque Bounce Details For Cheque No " + FAB.ChqNo + ",Cheque Date " + FAB.ChqDate + ",Reciept No " + FAM.RNo + ",Reciept Date " + FAM.RDate + ", Is Deleted";
                        db.UserUpdateDetailss.Add(uud);
                    }
                    db.SaveChanges();

                    return Json("Deleted Successfully");
                }
                else
                {
                    return Json(ModelState.Values.SelectMany(model => model.Errors).ToList()[0].ErrorMessage);
                }
            }
            catch (Exception ex)
            {
                return Json(ex.Message);
            }
        }
        [Authorize]
        public ActionResult FeeChequeLetterPrint(string BillNo)
        {
            ReportDocument reportdocument = new ReportDocument();
            try
            {
                GC.Collect();
                if (CheckSession())
                {
                    return RedirectToAction("Logout", "Logon");
                }

                int acastart = (int)Session["AcaStart"];
                int schoolid = (int)Session["SchoolID"];


                reportdocument.Load(Server.MapPath("/FeeReport/crptChequebounceletter.rpt"));
                reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                reportdocument.SetParameterValue(0, acastart);
                reportdocument.SetParameterValue(1, schoolid);
                reportdocument.SetParameterValue(2, "");
                reportdocument.SetParameterValue(3, "");
                reportdocument.SetParameterValue(4, "");
                reportdocument.SetParameterValue(5, 0);
                reportdocument.SetParameterValue(6, 0);
                reportdocument.SetParameterValue(7, "");
                reportdocument.SetParameterValue(8, 0);
                reportdocument.SetParameterValue(9, BillNo);
                reportdocument.SetParameterValue(10, 1);
                reportdocument.SetParameterValue(11, 0);

                Stream stream = reportdocument.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                return File(stream, "application/pdf");
            }
            finally
            {
                reportdocument.Close();
                reportdocument.Dispose();
            }
        }


        #endregion


        #region Fee Adjustment
        [Authorize]
        public ActionResult FeeAdjustment(int? id)
        {
            if (CheckSession()) { return RedirectToAction("Logon", "Logon"); }
            fillPermission();
            List<MTDDLMaster> obj = new List<MTDDLMaster>();
            obj.Add(new MTDDLMaster { DDLID = "0", DDLName = "SELF" });
            obj.Add(new MTDDLMaster { DDLID = "1", DDLName = "OTHER" });
            ViewBag.ddlType = obj;
            return View("FeeAdjustment");
        }
        [Authorize]
        public JsonResult FeeAdjustmentStudentPaidRecord(int SID, int FIID)
        {
            CommonResponse CR = new CommonResponse();
            try
            {
                if (CheckSession())
                {
                    CR.Message = "Login Again";
                    return Json(CR);
                }

                int acastart = (int)Session["AcaStart"];
                int schoolid = (int)Session["SchoolID"];
                object[] obj = new object[1];
                List<FeebindGridData> data = db.fillFeePaidAmount(schoolid, acastart, SID, FIID);
                if (data.Count > 0)
                {
                    ViewData["GetData"] = data;
                    ViewData["Type"] = "Paid";
                    obj[0] = DbCampusContext.RenderPertialViewtoString(this, "_FeeAdjustmentGrid");
                    CR.Message = "";
                }
                else
                    CR.Message = "Record Not Found";
                CR.Data = obj;
                return Json(CR);
            }
            catch (Exception e)
            {
                CR.Message = e.Message;
                return Json(CR);
            }
        }
        [Authorize]
        public JsonResult FeeAdjustmentStudentDueRecord(int SID, int FIID)
        {
            CommonResponse CR = new CommonResponse();
            try
            {
                if (CheckSession())
                {
                    CR.Message = "Login Again";
                    return Json(CR);
                }

                int acastart = (int)Session["AcaStart"];
                int schoolid = (int)Session["SchoolID"];
                object[] obj = new object[1];
                DataSet ds = db.spFeeGetDueAmount(schoolid, SID.ToString(), "", acastart, "", FIID, FIID, 0, "DE");
                if (ds.Tables[0].Rows.Count > 0)
                {
                    ViewData["GetData"] = (from FeeDue in ds.Tables[0].Select().ToList()
                                           select new FeebindGridData() { StudentID = 0, FeeHeadID = Convert.ToInt32(FeeDue.ItemArray.GetValue(2)), FeeHeadName = FeeDue.ItemArray.GetValue(3).ToString(), PaidAmt = Convert.ToInt32(FeeDue.ItemArray.GetValue(6)) }).ToList();
                    ViewData["Type"] = "Due";
                    obj[0] = DbCampusContext.RenderPertialViewtoString(this, "_FeeAdjustmentGrid");
                    CR.Message = "";
                }
                else
                    CR.Message = "Record Not Found";
                CR.Data = obj;
                return Json(CR);
            }
            catch (Exception e)
            {
                CR.Message = e.Message;
                return Json(CR);
            }
        }
        //"FAM": FAM, "FAM1": FAM1, "FAD": FAD, "FAD1": main, "AdjustAmount": AdjustAmount

        [Authorize]
        public JsonResult FeeAdjustmentSave(string para_FAM, string para_FAM1, string para_FAD, string para_FAD1, int AdjustAmount, string AdjDate, encodeshdata trdata)
        {
            try
            {
                trdata.actualdata = para_FAM + "#" + para_FAM1 + "#" + para_FAD + "#" + para_FAD1 + "#" + AdjustAmount.ToString();
                if (RequestAuthentication(trdata) == false)
                {
                    return Json("Login Again");
                }
                if (CheckSession())
                {
                    return Json("Login Again");
                }
                FEEAccountMaster FAM = new FEEAccountMaster();
                JavaScriptSerializer json = new JavaScriptSerializer();
                FAM = (FEEAccountMaster)json.ConvertToType<FEEAccountMaster>(json.DeserializeObject(para_FAM));

                FEEAccountMaster FAM1 = new FEEAccountMaster();
                FAM1 = (FEEAccountMaster)json.ConvertToType<FEEAccountMaster>(json.DeserializeObject(para_FAM1));

                //FEEAccountDetail FAD = new FEEAccountDetail();
                //FAD = (FEEAccountDetail)json.ConvertToType<FEEAccountDetail>(json.DeserializeObject(para_FAD));

                List<FEEAccountDetail> FAD = new List<FEEAccountDetail>();
                FAD = (List<FEEAccountDetail>)json.ConvertToType<List<FEEAccountDetail>>(json.DeserializeObject(para_FAD));

                List<FEEAccountDetail> FAD1 = new List<FEEAccountDetail>();
                FAD1 = (List<FEEAccountDetail>)json.ConvertToType<List<FEEAccountDetail>>(json.DeserializeObject(para_FAD1));

                if (ModelState.IsValid)
                {
                    string str = CheckAdjustmentSave(FAM, FAM1, FAD, FAD1, AdjustAmount);
                    if (str == "")
                    {

                        using (TransactionScope transaction = new TransactionScope())
                        {
                            int acastart = (int)Session["AcaStart"];
                            int schoolid = (int)Session["SchoolID"];
                            int BLNo = (db.FEEAccountMasters.Max(model => (int?)model.AutoID) ?? 0) + 1;
                            int RNo = (db.FEEAccountMasters.Where(model => model.AcaStart == acastart && model.SchoolID == schoolid).Max(model => (int?)model.RNo) ?? 0) + 1;
                            int URNo = (db.FEEAccountMasters.Where(model => model.AcaStart == acastart && model.SchoolID == schoolid && model.Cancel == false).Max(model => (int?)model.URNo) ?? 0) + 1;
                            var ADate = Convert.ToDateTime(AdjDate, cinfo);

                            //From Student Fee Account Master Entry
                            FAM.AutoID = BLNo;
                            FAM.RNo = RNo;
                            FAM.URNo = URNo;
                            FAM.InstType = (Int16)0;
                            FAM.DBankID = 1;
                            FAM.Cancel = false;
                            FAM.FPTypeID = 1;
                            FAM.RDate = ADate;
                            FAM.AcaStart = acastart;
                            FAM.SchoolID = schoolid;
                            FAM.EntryUserID = (int)Session["UID"];
                            FAM.EntryDate = DateTime.Now;
                            db.FEEAccountMasters.Add(FAM);

                            //To Student Fee Account Master Entry
                            if (FAM.StdID != FAM1.StdID)
                            {
                                FAM1.AutoID = BLNo + 1;
                                FAM1.RNo = RNo + 1;
                                FAM1.URNo = URNo + 1;
                                FAM1.InstType = (Int16)0;
                                FAM1.DBankID = 1;
                                FAM1.Cancel = false;
                                FAM1.FPTypeID = 1;
                                FAM1.RDate = ADate;
                                FAM1.AcaStart = acastart;
                                FAM1.SchoolID = schoolid;
                                FAM1.EntryUserID = (int)Session["UID"];
                                FAM1.EntryDate = DateTime.Now;
                                db.FEEAccountMasters.Add(FAM1);
                            }
                            db.SaveChanges();

                            //Start Fee Account Adjustment
                            if (FAM.StdID != FAM1.StdID)
                            {
                                FEEAccountAdjustment faa = new FEEAccountAdjustment();
                                faa.AutoID = FAM.AutoID;
                                faa.RBillNo = FAM1.AutoID;
                                db.FEEAccountAdjustments.Add(faa);
                            }
                            //END Fee Account Adjustment

                            //From Student Fee Account Detail Entry
                            int chkAmt = 0;
                            chkAmt = AdjustAmount;
                            foreach (FEEAccountDetail fd in FAD)
                            {
                                if (chkAmt > 0)
                                {
                                    fd.BLNo = BLNo;
                                    fd.ChqBounce = false;
                                    fd.FBID = 0;
                                    fd.PMID = 1;
                                    fd.Type = 1;
                                    if (chkAmt > fd.Amount)
                                    {
                                        fd.ConAmount = fd.Amount;
                                        chkAmt = chkAmt - Convert.ToInt32(fd.Amount);
                                    }
                                    else
                                    {
                                        fd.ConAmount = chkAmt;
                                        chkAmt = 0;
                                    }
                                    fd.Amount = 0;
                                    db.FEEAccountDetails.Add(fd);
                                }

                            }
                            int NextBillNo;
                            if (FAM.StdID != FAM1.StdID)
                                NextBillNo = BLNo + 1;
                            else
                                NextBillNo = BLNo;
                            //To Student Fee Account Detail Entry
                            foreach (FEEAccountDetail fd in FAD1)
                            {
                                if (AdjustAmount > 0)
                                {
                                    fd.BLNo = NextBillNo;
                                    fd.ChqBounce = false;
                                    fd.FBID = 0;
                                    fd.PMID = 1;
                                    fd.Type = 0;
                                    AdjustAmount = AdjustAmount + Convert.ToInt32(fd.ConAmount);
                                    if (AdjustAmount > fd.Amount)
                                    {
                                        fd.Amount += fd.ConAmount;
                                        AdjustAmount -= Convert.ToInt32(fd.Amount);
                                    }
                                    else
                                    {
                                        fd.Amount = AdjustAmount;
                                        AdjustAmount = 0;
                                    }
                                    db.FEEAccountDetails.Add(fd);
                                }
                            }
                            fillUserUpdateDetails("Fee Adjustment for FromBillNo=" + FAM.AutoID + ",ToBillNo=" + FAM1.AutoID + ",FromFeeInstallmentID=" + FAD[0].FIID + ",ToFeeInstallmentID=" + FAD1[0].FIID + "");
                            db.SaveChanges();
                            transaction.Complete();
                            return Json("Saved Successfully");
                        }
                    }
                    else
                        return Json(str);
                }
                else
                {
                    return Json(ModelState.Values.SelectMany(model => model.Errors).ToList()[0].ErrorMessage);
                }
            }
            catch (Exception ex)
            {
                return Json(ex.Message);
            }
        }


        private string CheckAdjustmentSave(FEEAccountMaster FAM, FEEAccountMaster FAM1, List<FEEAccountDetail> FAD, List<FEEAccountDetail> FAD1, int AdjustAmount)
        {
            int acaStart = (int)Session["AcaStart"];
            int schoolId = (int)Session["SchoolID"];
            foreach (FEEAccountDetail fd in FAD)
            {
                if (db.fillFeePaidAmount(schoolId, acaStart, (int)FAM.StdID, (int)fd.FIID).Where(model => model.StudentID == FAM.StdID && model.FeeHeadID == fd.FHeadID && model.PaidAmt != fd.Amount).Count() > 0)
                {
                    return "Record change for this student please select again";
                }
            }
            int sum = 0;
            DataSet ds = db.spFeeGetDueAmount(schoolId, FAM1.StdID.ToString(), "", acaStart, "", (int)FAD1[0].FIID, (int)FAD1[0].FIID, 0, "DE");
            if (ds.Tables[0].Rows.Count > 0)
            {
                if (FAD1.Count > 0)
                {
                    foreach (DataRow dr in ds.Tables[0].Rows)
                    {
                        foreach (FEEAccountDetail fd in FAD1)
                        {
                            if (Convert.ToInt32(dr[2]) == fd.FHeadID)
                            {
                                if (Convert.ToInt32(dr[6]) != Convert.ToInt32(fd.Amount))
                                    return "Record change for this student please select again";
                                else
                                {
                                    sum += (int)fd.Amount;
                                    fd.ConAmount = Convert.ToInt32(dr[5]);
                                }
                            }
                        }
                    }
                }
                else
                    return "Record Not Found";
            }
            else
                return "Record Not Found";
            if (AdjustAmount > FAD.Sum(x => x.Amount) || AdjustAmount > sum)
            {
                return "Please Enter Valid Adjust Amount";
            }
            return "";
        }
        #endregion

        #region Fee Day Wise Collection
        [Authorize]
        public ActionResult FeeDayWiseCollection()
        {
            if (CheckSession()) { return RedirectToAction("Logon", "Logon"); }
            fillPermission();
            List<MTDDLMaster> PayMode = new List<MTDDLMaster>();
            PayMode.Add(new MTDDLMaster { DDLID = "0", DDLName = "Select" });
            List<MTDDLMaster> PayIn = new List<MTDDLMaster>();
            PayIn.Add(new MTDDLMaster { DDLID = "0", DDLName = "Select" });
            PayMode.AddRange(db.FeePayModeMasters.Where(model => model.AutoID != 0).OrderBy(model => model.AutoID).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.PayModeName }).ToList());
            PayIn.AddRange(db.FEEDepositedBanks.OrderBy(model => model.AutoID).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.DepositBankName }).ToList());
            ViewBag.ddlPaymode = PayMode;
            ViewBag.ddlPayIn = PayIn;
            return View("FeeDayWiseCollection");
        }
        [Authorize]
        public JsonResult FeeDayWiseCollectionDetails(string Date, int PayMode, int PayIn, int CLID, int SecID, int StdID)
        {
            CommonResponse CR = new CommonResponse();
            try
            {
                if (CheckSession())
                {
                    CR.Message = "Login Again";
                    return Json(CR);
                }

                int acastart = (int)Session["AcaStart"];
                int schoolid = (int)Session["SchoolID"];
                List<FeeDayWiseCollection> fcd = db.FeeDayWiseCollection(schoolid, acastart, Date, PayMode, PayIn, CLID, SecID, StdID);
                if (fcd.Count > 0)
                {
                    ViewData["GetData"] = fcd;
                    object[] obj = new object[1];
                    obj[0] = DbCampusContext.RenderPertialViewtoString(this, "_FeeDayWiseCollectionGrid");

                    CR.Message = "";
                    CR.Data = obj;
                }
                else
                    CR.Message = "Record not found";
                return Json(CR);
            }
            catch (Exception e)
            {
                CR.Message = e.Message;
                return Json(CR);
            }
        }

        [Authorize]
        public ActionResult FeeDayWiseCollectionPreview(string BillNo, string trdata)
        {
            ReportDocument reportdocument = new ReportDocument();
            try
            {
                GC.Collect();
                //encodeshdata obj = new encodeshdata();
                //obj.ImageData = trdata;
                //obj.actualdata = BillNo;
                //if (RequestAuthentication(obj) == false)
                //{
                //    return RedirectToAction("Logout", "Logon");
                //}
                if (CheckSession())
                {
                    return RedirectToAction("Logout", "Logon");
                }

                int acastart = (int)Session["AcaStart"];
                int schoolid = (int)Session["SchoolID"];
                var ReportName = (from FY in db.FEEYearlySettings
                                  join RS in db.MTReportSettingMasters on FY.FeeReceiptID equals RS.AutoID
                                  where FY.AcaStart == acastart && FY.SchoolID == schoolid && RS.CertficateName == "FeeReceipt"
                                  select new { RS.LinkingReport }
                                          ).FirstOrDefault();
                if (ReportName.LinkingReport.ToString() != null)
                {
                    if (ReportName.LinkingReport.ToString() == "crptFeeReceiptA5Portrait1copy" || ReportName.LinkingReport.ToString() == "crptFeeReceiptA5Landscape1copy")
                    {
                        if (db.FeeReceipts(BillNo, acastart, schoolid, 1, Session.SessionID) > 0)
                        {
                            reportdocument.Load(Server.MapPath("/FeeReport/" + ReportName.LinkingReport.ToString() + ".rpt"));
                            reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                            reportdocument.RecordSelectionFormula = "{FEEPaidrpt.SessionID}='" + Session.SessionID + "'";
                            reportdocument.DataDefinition.FormulaFields["ImagePath"].Text = "'" + Server.MapPath("/Images") + "'";
                            Stream stream = reportdocument.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                            return File(stream, "application/pdf");
                        }
                        else
                        {
                            return null;
                        }
                    }
                    else
                    {
                        if (db.FeeReceipts(BillNo, acastart, schoolid, 0, Session.SessionID) > 0)
                        {
                            reportdocument.Load(Server.MapPath("/FeeReport/" + ReportName.LinkingReport.ToString() + ".rpt"));
                            reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                            reportdocument.RecordSelectionFormula = "{FEEPaidrpt.SessionID}='" + Session.SessionID + "'";
                            reportdocument.DataDefinition.FormulaFields["ImagePath"].Text = "'" + Server.MapPath("/Images") + "'";
                            Stream stream = reportdocument.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                            return File(stream, "application/pdf");
                        }

                        else
                        {
                            return null;
                        }
                    }
                }
                else
                {
                    return null;
                }
            }
            finally
            {
                reportdocument.Close();
                reportdocument.Dispose();
            }
        }
        #endregion

        #region Fee Requisition Slip
        [Authorize]
        public ActionResult FeeRequisitionSlip()
        {
            if (CheckSession()) { return RedirectToAction("Logon", "Logon"); }
            fillPermission();
            ViewBag.ddlOption = db.fillDDLOption();
            ViewBag.ddlOrientation = db.fillDDLOrientation();
            ViewBag.ddlPaperSize = db.fillDDLPaperSize();
            return View("FeeRequisitionSlip");
        }
        [Authorize]
        public JsonResult FeeRequisitionSlipStudentRecord(int StdID)
        {
            CommonResponse CR = new CommonResponse();
            try
            {
                if (CheckSession())
                {
                    CR.Message = "Login Again";
                    return Json(CR);
                }

                int acastart = (int)Session["AcaStart"];
                int schoolid = (int)Session["SchoolID"];
                var qry = (from SYD in db.SIStudentYearWiseDetails
                           join CL in db.MTClassMasters on SYD.ClsID equals CL.AutoID
                           join SEC in db.MTSectionMasters on SYD.SECID equals SEC.AutoID
                           join FIM in db.FEEInstallmentMasters on SYD.FeeApplFrom equals FIM.AutoID
                           where SYD.StudID == StdID && SYD.AcaStarting == acastart && SYD.SchID == schoolid
                           select new { CLID = CL.AutoID, CLName = CL.ClassName, SecID = SEC.AutoID, SecName = SEC.SectionName, FIID = FIM.AutoID, FIName = FIM.FIName }).ToList();
                if (qry.Count > 0)
                {
                    object[] obj = new object[1];
                    obj[0] = qry[0];

                    CR.Message = "";
                    CR.Data = obj;
                }
                else
                    CR.Message = "Record not found";
                return Json(CR);
            }
            catch (Exception e)
            {
                CR.Message = e.Message;
                return Json(CR);
            }
        }
        [Authorize]
        public JsonResult FeeRequisitionSlipDetails(int StdID, int CLID, int SecID, int FIID, int FIToID)
        {
            CommonResponse CR = new CommonResponse();
            try
            {
                if (CheckSession())
                {
                    CR.Message = "Login Again";
                    return Json(CR);
                }

                int acastart = (int)Session["AcaStart"];
                int schoolid = (int)Session["SchoolID"];
                //SELECT SM.StudentID, SYD.AdmissionNo As [AdmNo],FeeNo,(ISNULL(SM.FirstName,'')+' '+ISNULL(SM.MiddleName,'')+' '+ISNULL(SM.LastName,''))  AS [Name], " +
                //" FatherName, '' AS [Select] from SIStudentMaster SM inner join SIStudenTYearWiseDetails SYD ON SM.StudentID = SYD.StudentID " +
                //" left join SIStudentFatherDetails SFD ON SM.StudentID = SFD.StudentID inner join MTClassMaster CM ON SYD.ClassID=CM.ClassID " +
                //" INNER JOIN FeeGroupMaster FGM ON FGM.FeeGroupID=SYD.FeeGroupID INNER JOIN FeeInstallmentMaster FIM ON FIM.YearStyleiD=FGM.YearStyleID AND FIM.FeeInstallmentID=" + ddlInstallmentFrom.SelectedValue + "" +
                //" inner join MTSectionMAster SEM ON SYD.SectionID=SEM.SectionID WHERE SYD.StudentStatus='S' AND SYD.SchoolID=" + Session["schoolID"] + " AND " +
                //" SYD.AcaStart=" + Session["AcaStart"] + " AND CM.ClassID=" + ddlClass.SelectedValue + " AND SEM.SectionID=" + Request.Form["ddlSection"] + " 
                List<object> fcd = new List<object>();
                if (StdID != 0)
                {
                    var data = from SM in db.SIStudentMasters
                               join SYD in db.SIStudentYearWiseDetails on SM.StudID equals SYD.StudID
                               join SFD in db.SIStudentFatherDetails on SYD.StudID equals SFD.StudID
                               join FGM in db.FEEGroupMasters on SYD.FeeGrpID equals FGM.AutoID
                               join FIM in db.FEEInstallmentMasters on FGM.StyleID equals FIM.StyleID
                               where SYD.StudStatus == "S" && SYD.SchID == schoolid && SYD.AcaStarting == acastart && SYD.StudID == StdID && FIM.AutoID == FIID
                               select new { SYD.StudID, SYD.AdmNo, SYD.FeesNo, SName = SM.FName + " " + SM.MName + " " + SM.LName, SFD.Father };
                    fcd = new List<object>(data);
                }
                else
                {
                    var data = from SM in db.SIStudentMasters
                               join SYD in db.SIStudentYearWiseDetails on SM.StudID equals SYD.StudID
                               join SFD in db.SIStudentFatherDetails on SYD.StudID equals SFD.StudID
                               join FGM in db.FEEGroupMasters on SYD.FeeGrpID equals FGM.AutoID
                               join FIM in db.FEEInstallmentMasters on FGM.StyleID equals FIM.StyleID
                               where SYD.StudStatus == "S" && SYD.SchID == schoolid && SYD.AcaStarting == acastart && SYD.ClsID == CLID && SYD.SECID == SecID && FIM.AutoID == FIID
                               select new { SYD.StudID, SYD.AdmNo, SYD.FeesNo, SName = SM.FName + " " + SM.MName + " " + SM.LName, SFD.Father };
                    fcd = new List<object>(data);
                }
                if (fcd.Count > 0)
                {
                    ViewData["GetData"] = fcd;
                    object[] obj = new object[1];
                    obj[0] = DbCampusContext.RenderPertialViewtoString(this, "_FeeRequisitionSlipGrid");

                    CR.Message = "";
                    CR.Data = obj;
                }
                else
                    CR.Message = "Record not found";
                return Json(CR);
            }
            catch (Exception e)
            {
                CR.Message = e.Message;
                return Json(CR);
            }
        }
        [Authorize]
        public ActionResult FeeRequisitionSlipPreview(string SID, int FromMonTD, int ToMonID, string BillDate, string DueDate, string InstName, string trdata)
        {
            ReportDocument reportdocument = new ReportDocument();
            try
            {
                GC.Collect();

                if (CheckSession())
                {
                    return RedirectToAction("Logout", "Logon");
                }

                int acastart = (int)Session["AcaStart"];
                int schoolid = (int)Session["SchoolID"];
                if (db.FeeAdvanceBill(SID, FromMonTD, ToMonID, 1, schoolid, acastart) > 0)
                {

                    reportdocument.Load(Server.MapPath("/FeeReport/RequisitionSlip.rpt"));
                    reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                    reportdocument.DataDefinition.FormulaFields["BillDate"].Text = "'" + BillDate + "'";
                    reportdocument.DataDefinition.FormulaFields["DueDate"].Text = "'" + DueDate + "'";
                    reportdocument.DataDefinition.FormulaFields["Installment"].Text = "'" + InstName + "'";
                    reportdocument.DataDefinition.FormulaFields["AcaStartSeesion"].Text = "'" + acastart + "'";
                    reportdocument.DataDefinition.FormulaFields["AcaEndSeesion"].Text = "'" + (acastart + 1) + "'";

                    Stream stream = reportdocument.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    return File(stream, "application/pdf");
                }
                else
                {
                    return null;
                }
            }
            finally
            {
                reportdocument.Close();
                reportdocument.Dispose();
            }
        }
        #endregion

        #region Fee Report Group
        [Authorize]
        public ActionResult FeeReportGroup()
        {
            if (CheckSession()) { return RedirectToAction("Logon", "Logon"); }
            fillPermission();
            int AcaStart = Convert.ToInt32(Session["AcaStart"]);
            int SchoolID = Convert.ToInt32(Session["SchoolID"]);

            ViewData["GetData"] = db.FEEHeadMasters.Where(model => (model.AcaStart == AcaStart || model.FDefine == true) && model.SchoolID == SchoolID && model.FHeadID != 1).Select(model => new MTCheckMaster { CheckID = model.FHeadID.ToString(), CheckName = model.FHName.ToString(), Check = false }).ToList();
            return View("FeeReportGroup");
        }
        [Authorize]
        public JsonResult GetFeeReportGroup(int FRType)
        {
            CommonResponse cm = new CommonResponse();
            try
            {
                if (CheckSession())
                {
                    cm.Message = "Login Again";
                    return Json(cm);
                }
                int AcaStart = Convert.ToInt32(Session["AcaStart"]);
                int SchoolID = Convert.ToInt32(Session["SchoolID"]);
                List<MTCheckMaster> Data = (from FHM in db.FEEHeadMasters
                                            join RTM in db.FEEReportTypeMasters on FHM.SchoolID equals RTM.SchoolID
                                            join RTD in db.FEEReportTypeDetails on new { FHID = (int?)FHM.FHeadID, FRTypeID = (int?)RTM.AutoID } equals new { FHID = RTD.FHID, FRTypeID = RTD.FRTypeID } into qs
                                            from RTD in qs.DefaultIfEmpty()
                                            where (FHM.AcaStart == AcaStart || FHM.FDefine == true) && FHM.SchoolID == SchoolID && RTM.AutoID == FRType && FHM.FHeadID != 1
                                            orderby FHM.PntOrder
                                            select new MTCheckMaster { CheckID = FHM.FHeadID.ToString(), CheckName = FHM.FHName, Check = RTD.FHID != null ? true : false }).ToList();

                cm.Message = "";
                object[] objects = new object[1];
                objects[0] = Data;
                cm.Data = objects;
                return Json(cm);
            }
            catch (Exception ex)
            {
                cm.Message = ex.Message;
                return Json(cm);
            }
        }
        [Authorize]
        public JsonResult FeeReportGroupSave(string para_RTM, string para_RTD, encodeshdata trdata)
        {
            CommonResponse obj = new CommonResponse();
            try
            {
                trdata.actualdata = para_RTM + "#" + para_RTD;
                if (RequestAuthentication(trdata) == false)
                {
                    obj.Message = "Login Again";
                    return Json(obj);
                }
                if (CheckSession())
                {
                    obj.Message = "Login Again";
                    return Json(obj);
                }
                FEEReportTypeMaster RTM = new FEEReportTypeMaster();
                JavaScriptSerializer json = new JavaScriptSerializer();
                RTM = (FEEReportTypeMaster)json.ConvertToType<FEEReportTypeMaster>(json.DeserializeObject(para_RTM));

                List<FEEReportTypeDetail> RTD = new List<FEEReportTypeDetail>();
                RTD = (List<FEEReportTypeDetail>)json.ConvertToType<List<FEEReportTypeDetail>>(json.DeserializeObject(para_RTD));

                if (ModelState.IsValid)
                {
                    string str = CheckFeeReportGroup(RTM, RTD);
                    if (str != "")
                    {
                        obj.Message = str;
                        return Json(obj); ;
                    }

                    using (TransactionScope transaction = new TransactionScope())
                    {
                        int AcaStart = (int)Session["AcaStart"];
                        int SchoolID = (int)Session["SchoolID"];
                        string msg;
                        if (RTM.AutoID != 0)
                        {
                            RTM = db.FEEReportTypeMasters.Find(RTM.AutoID);
                            if (RTM != null)
                            {
                                RTM.UpdateUserID = (int)Session["UID"];
                                RTM.UpdateUserDate = DateTime.Now;
                                List<FEEReportTypeDetail> objRTD = db.FEEReportTypeDetails.Where(model => model.FRTypeID == RTM.AutoID).ToList();
                                db.FEEReportTypeDetails.RemoveRange(objRTD);
                                msg = "Fee Report Group " + RTM.FRTypeName + ",is Modified";
                            }
                            else
                            {
                                obj.Message = "Record does not exists";
                                return Json(obj);
                            }
                        }
                        else
                        {
                            RTM.AutoID = (db.FEEReportTypeMasters.Max(model => (int?)model.AutoID) ?? 0) + 1;
                            RTM.EntryUserID = (int)Session["UID"];
                            RTM.EntryUserDate = DateTime.Now;
                            RTM.AcaStart = AcaStart;
                            RTM.SchoolID = SchoolID;
                            db.FEEReportTypeMasters.Add(RTM);
                            db.SaveChanges();
                            msg = "Fee Report Group " + RTM.FRTypeName + ",is Added";
                        }
                        foreach (FEEReportTypeDetail rd in RTD)
                        {
                            if (rd.FHID != null && rd.FHID != 0)
                            {
                                rd.FRTypeID = RTM.AutoID;
                                db.FEEReportTypeDetails.Add(rd);
                            }
                        }
                        fillUserUpdateDetails(msg);
                        db.SaveChanges();
                        transaction.Complete();
                        obj.Message = "Saved Successfully";
                        return Json(obj);
                    }
                }
                else
                {
                    obj.Message = ModelState.Values.SelectMany(model => model.Errors).ToList()[0].ErrorMessage;
                    return Json(obj);
                }
            }
            catch (Exception ex)
            {
                obj.Message = ex.Message;
                return Json(obj);
            }
        }

        private string CheckFeeReportGroup(FEEReportTypeMaster obj, List<FEEReportTypeDetail> RD)
        {
            string str = "";
            int AcaStart = (int)Session["AcaStart"];
            int SchoolID = (int)Session["SchoolID"];
            if (db.FEEReportTypeMasters.Where(model => model.AcaStart == AcaStart && model.SchoolID == SchoolID && model.FRTypeName == obj.FRTypeName && model.AutoID != obj.AutoID).Count() > 0)
            {
                str = "Report Group Name Already Exists";
            }
            else
            {
                List<FEEReportTypeDetail> old = (from FRM in db.FEEReportTypeMasters
                                                 join FRD in db.FEEReportTypeDetails on FRM.AutoID equals FRD.FRTypeID
                                                 where FRM.AcaStart == AcaStart && FRM.SchoolID == SchoolID && FRM.AutoID != obj.AutoID && FRM.Type == obj.Type
                                                 select FRD).ToList();
                var data = from RDold in old
                           join RDNew in RD on RDold.FHID equals RDNew.FHID
                           select RDold;
                if (data.Count() > 0)
                {
                    str = "Fee Head Already in use";
                }
            }
            return str;
        }
        [Authorize]
        public JsonResult FeeReportGroupDelete(int id)
        {
            CommonResponse obj = new CommonResponse();
            try
            {
                if (CheckSession())
                {
                    obj.Message = "Login Again";
                    return Json(obj);
                }
                FEEReportTypeMaster RTM = db.FEEReportTypeMasters.Find(id);
                List<FEEReportTypeDetail> RTD = db.FEEReportTypeDetails.Where(model => model.FRTypeID == id).ToList();
                if (ModelState.IsValid)
                {
                    if (db.spGetPrimaryValueExists("FeeReportTypeID", "FeeReportTypeMaster,FeeReportTypeDetail", RTM.AutoID.ToString())[0].TotalRecords > 0)
                    {
                        obj.Message = "Fee Report Group Already in Use";
                        return Json(obj);
                    }
                    db.FEEReportTypeDetails.RemoveRange(RTD);
                    db.SaveChanges();
                    db.FEEReportTypeMasters.Remove(RTM);
                    fillUserUpdateDetails("Fee Report Group " + RTM.FRTypeName + ",is Deleted");

                    db.SaveChanges();
                    obj.Message = "Deleted Successfully";
                    return Json(obj);
                }
                else
                {
                    obj.Message = ModelState.Values.SelectMany(model => model.Errors).ToList()[0].ErrorMessage;
                    return Json(obj);
                }
            }
            catch (Exception ex)
            {
                obj.Message = ex.Message;
                return Json(obj);
            }
        }

        #endregion

        #region Fee Transfer To Next Year
        [Authorize]
        public ActionResult FeeTransferToNextYear()
        {
            if (CheckSession()) { return RedirectToAction("Logon", "Logon"); }
            fillPermission();
            return View("FeeTransferToNextYear");
        }
        [Authorize]
        public JsonResult FeeTransferToNextYearDisplay(int CLID, int SecID)
        {
            CommonResponse CR = new CommonResponse();
            try
            {
                if (CheckSession())
                {
                    CR.Message = "Login Again";
                    return Json(CR);
                }

                int acastart = (int)Session["AcaStart"];
                int schoolid = (int)Session["SchoolID"];

                ViewData["GetData"] = db.FeeExcessAmountTransfer(schoolid, acastart, CLID, SecID);
                object[] obj = new object[1];
                obj[0] = DbCampusContext.RenderPertialViewtoString(this, "_FeeTransferToNextYearGrid");

                CR.Message = "";
                CR.Data = obj;
                return Json(CR);
            }
            catch (Exception e)
            {
                CR.Message = e.Message;
                return Json(CR);
            }
        }
        [Authorize]
        public JsonResult FeeTransferToNextYearTransfer(string type, int CLID, int SECID, string BillNo, encodeshdata trdata)
        {
            CommonResponse obj = new CommonResponse();
            try
            {
                trdata.actualdata = type + "#" + CLID.ToString() + "#" + SECID.ToString() + "#" + BillNo;
                if (RequestAuthentication(trdata) == false)
                {
                    obj.Message = "Login Again";
                    return Json(obj);
                }
                if (CheckSession())
                {
                    obj.Message = "Login Again";
                    return Json(obj);
                }
                int AcaStart = (int)Session["AcaStart"];
                int SchoolID = (int)Session["SchoolID"];
                int UID = (int)Session["UID"];
                string result = "";
                List<string> Data = db.FeeTransferToNextYear(AcaStart, SchoolID, UID, type);
                if (Data.Count > 0)
                    result = Data[0];
                if (type.Contains("ExcessAmount") && CLID != 0 && SECID != 0 && BillNo.Length > 0)
                {
                    List<string> Excess = db.FeeExcessAmountTransferToNextYear(AcaStart, SchoolID, UID, CLID.ToString() + "#" + SECID.ToString(), BillNo);
                    if (Excess.Count > 0)
                    {
                        if (result != "")
                            result = result + "^" + Excess[0];
                        else
                            result = Excess[0];
                    }
                    else
                    {
                        obj.Message = "Login Again";
                        return Json(obj);
                    }
                }
                object[] tem = new object[1];
                tem[0] = result;
                obj.Data = tem;
                obj.Message = "Transfered Successfully";
                return Json(obj);

            }
            catch (Exception ex)
            {
                obj.Message = ex.Message;
                return Json(obj);
            }
        }

        #endregion

        #region Fee Report

        [HttpGet]
        [Authorize]
        public ActionResult FeeReports()
        {
            if (CheckSession()) { return RedirectToAction("Logon", "Logon"); }
            fillPermission();
            ViewData["ReportMenu"] = GetReportName();
            return View();
        }

        [Authorize]
        public ActionResult FeeFilterPopUp(int? ReportID, string VirtualPath)
        {
            Request.Cookies.Clear();
            if (CheckSession()) { return RedirectToAction("Logon", "Logon"); }
            ViewData.Clear();
            FeeReportData FRD = new FeeReportData();
            FRD.RID = (int)ReportID;
            FRD.ReportName = VirtualPath;
            FRD.FromDate = DateTime.Now;
            FRD.ToDate = DateTime.Now;
            int acastart = (int)Session["AcaStart"];
            int schoolid = (int)Session["SchoolID"];


            ViewData["Fee_Type"] = db.FeePayTypeMasters.OrderBy(model => model.Forder).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.PayTypeName }).ToList();
            ViewData["Account_Type"] = db.FeeAccTypes.Where(model => model.SchoolID == schoolid).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.AccName }).ToList();
            ViewData["Receipt_Mode"] = db.FeePayModeMasters.Where(model => model.AutoID != 0).OrderBy(model => model.AutoID).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.PayModeName }).ToList();
            ViewData["Pay_In"] = db.FEEDepositedBanks.OrderBy(model => model.AutoID).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.DepositBankName }).ToList();
            ViewData["Fee_Group"] = db.FEEGroupMasters.Where(model => model.AcaStart == acastart && model.SchoolID == schoolid).OrderBy(model => model.FGName).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.FGName }).ToList();
            ViewData["Class_Section"] = new List<MTDDLMaster>();

            ViewData["Report_Type"] = db.FEEReportTypeMasters.Where(model => model.AcaStart == acastart && model.SchoolID == schoolid && model.Type == false).OrderBy(model => model.FRTypeName).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.FRTypeName }).ToList();

            if (ReportID == 1000 || ReportID == 1001)
            {
                FRD.AdmissionType = "All";
                ViewData["Users"] = (from UM in db.MTUserMasters join ML in db.MTMenulimitmasters on UM.UID equals ML.UID where ML.ModuleID == 10 && ML.MenuID == 131 && ML.NewOption == "Y" && (new string[] { "0", "1" }).Contains(UM.UserTypeID.ToString()) select new MTDDLMaster() { DDLID = UM.UID.ToString(), DDLName = UM.UserName }).ToList();
                //ViewData["Users"] = (from UM in db.MTUserMasters where (new string[] { "0", "1" }).Contains(UM.UserTypeID.ToString()) select new MTDDLMaster() { DDLID = UM.UID.ToString(), DDLName = UM.UserName }).ToList();           
            }
            else if (ReportID == 1004)
                ViewData["Fee_Head"] = db.FEEHeadMasters.Where(model => (model.AcaStart == acastart || model.AcaStart == null) && model.FHeadID > 2 && model.SchoolID == schoolid).OrderBy(model => model.PntOrder).Select(model => new MTDDLMaster() { DDLID = model.FHeadID.ToString(), DDLName = model.FHName }).ToList();

            else if (ReportID == 1005)
            {
                FRD.FeeNo = "";
                FRD.FromDate = null;
                FRD.ToDate = null;
                ViewData.Clear();
            }
            //For Defaulter Reports
            else if (ReportID == 1021 || ReportID == 1022 || ReportID == 1023 || ReportID == 1024 || ReportID == 1025 || ReportID == 1030 || ReportID == 1031 || ReportID == 1032)
            {
                if (db.MTAcaYearStyleMasters.Count() == 1)
                    ViewData["Installment"] = db.FEEInstallmentMasters.Where(model => model.AcaStart == acastart && model.SchoolID == schoolid).OrderBy(model => model.AutoID).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.FIName }).ToList();
                else
                    ViewData["Installment"] = db.FEEInstallmentMasters.Where(model => model.AcaStart == acastart && model.SchoolID == schoolid).OrderBy(model => model.AutoID).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.FIName + " # " + model.StyleID }).ToList();
                ViewData.Remove("Receipt_Mode");
                ViewData.Remove("Pay_In");
                ViewData.Remove("Report_Type");
                FRD.FromDate = null;
                FRD.ToDate = null;
            }
            else if (ReportID == 1009 || ReportID == 1010)
            {
                if (db.MTAcaYearStyleMasters.Count() == 1)
                    ViewData["Installment"] = db.FEEInstallmentMasters.Where(model => model.AcaStart == acastart && model.SchoolID == schoolid).OrderBy(model => model.AutoID).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.FIName }).ToList();
                else
                    ViewData["Installment"] = db.FEEInstallmentMasters.Where(model => model.AcaStart == acastart && model.SchoolID == schoolid).OrderBy(model => model.AutoID).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.FIName + " # " + model.StyleID }).ToList();
                ViewData.Remove("Receipt_Mode");
                ViewData.Remove("Pay_In");
                ViewData.Remove("Report_Type");
                FRD.FromDate = null;
                ViewBag.Student_Status = ddlStatus();
                //          FRD.ToDate = null;
                if (ReportID == 1009 || ReportID == 1010)
                {
                    FRD.AmtType = "";
                    FRD.Amount = "";
                }
            }
            else if (ReportID == 1012 || ReportID == 1013 || ReportID == 1015)
            {
                if (db.MTAcaYearStyleMasters.Count() == 1)
                    ViewData["Installment"] = db.FEEInstallmentMasters.Where(model => model.AcaStart == acastart && model.SchoolID == schoolid).OrderBy(model => model.AutoID).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.FIName }).ToList();
                else
                    ViewData["Installment"] = db.FEEInstallmentMasters.Where(model => model.AcaStart == acastart && model.SchoolID == schoolid).OrderBy(model => model.AutoID).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.FIName + " # " + model.StyleID }).ToList();
            }
            //For Concession Reports
            else if (ReportID == 1014 || ReportID == 1017 || ReportID == 1041 || ReportID == 1065)
            {
                if (db.MTAcaYearStyleMasters.Count() == 1)
                    ViewData["Installment"] = db.FEEInstallmentMasters.Where(model => model.AcaStart == acastart && model.SchoolID == schoolid).OrderBy(model => model.AutoID).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.FIName }).ToList();
                else
                    ViewData["Installment"] = db.FEEInstallmentMasters.Where(model => model.AcaStart == acastart && model.SchoolID == schoolid).OrderBy(model => model.AutoID).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.FIName + " # " + model.StyleID }).ToList();
                ViewData["Concession_Type"] = db.FEEConcessionTypeMasters.Where(model => model.SchoolID == schoolid && model.AutoID != 0).OrderBy(model => model.CTypeName).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.CTypeName }).ToList();
                ViewData.Remove("Receipt_Mode");
                ViewData.Remove("Pay_In");
                ViewData.Remove("Report_Type");
                ViewData.Remove("Fee_Type");
                ViewData.Remove("Account_Type");
                FRD.FromDate = null;
                FRD.ToDate = null;
                //Concession_Type
            }
            //For Fee Structure
            else if (ReportID == 1016)
            {
                ViewData.Remove("Receipt_Mode");
                ViewData.Remove("Pay_In");
                ViewData.Remove("Report_Type");
                ViewData.Remove("Fee_Type");
                ViewData.Remove("Account_Type");
                ViewData.Remove("Class_Section");
                FRD.FromDate = null;
                FRD.ToDate = null;
            }
            //For Concession Type Summary 
            else if (ReportID == 1033)
            {
                ViewData.Remove("Receipt_Mode");
                ViewData.Remove("Pay_In");
                ViewData.Remove("Report_Type");
                FRD.FromDate = null;
                FRD.ToDate = null;
            }
            //For Tution Fee Certificate
            else if (ReportID == 1037)
            {
                FRD.FeeNo = "";
                FRD.ParentType = "Father";
                FRD.FromDate = null;
                FRD.ToDate = null;
                ViewData.Remove("Receipt_Mode");
                ViewData.Remove("Pay_In");
                ViewData.Remove("Report_Type");
                ViewData.Remove("Fee_Type");
                ViewData.Remove("Account_Type");
            }
            //For Student Defaulter Detail for All Installments
            else if (ReportID == 1038)
            {
                if (db.MTAcaYearStyleMasters.Count() == 1)
                    ViewData["Installment"] = db.FEEInstallmentMasters.Where(model => model.AcaStart == acastart && model.SchoolID == schoolid).OrderBy(model => model.AutoID).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.FIName }).ToList();
                else
                    ViewData["Installment"] = db.FEEInstallmentMasters.Where(model => model.AcaStart == acastart && model.SchoolID == schoolid).OrderBy(model => model.AutoID).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.FIName + " # " + model.StyleID }).ToList();
                ViewData["Fee_Head"] = db.FEEHeadMasters.Where(model => (model.AcaStart == acastart || model.AcaStart == null) && model.FHeadID > 2 && model.SchoolID == schoolid).OrderBy(model => model.PntOrder).Select(model => new MTDDLMaster() { DDLID = model.FHeadID.ToString(), DDLName = model.FHName }).ToList();
                ViewData.Remove("Receipt_Mode");
                ViewData.Remove("Pay_In");
                ViewData.Remove("Report_Type");
                FRD.FromDate = null;
                FRD.ToDate = null;
            }
            //For Class Wise Student Ledger
            else if (ReportID == 1039)
            {
                ViewData.Remove("Receipt_Mode");
                ViewData.Remove("Pay_In");
                ViewData.Remove("Report_Type");
                ViewData.Remove("Fee_Type");
                ViewData.Remove("Account_Type");
                FRD.FromDate = null;
                FRD.ToDate = null;
            }
            else if (ReportID == 1006)
            {
                ViewData.Remove("Receipt_Mode");
            }
            //For Head Wise Reconciliation
            else if (ReportID == 1040)
            {
                FRD.FromDate = null;
                FRD.ToDate = null;
                ViewData.Clear();
            }
            // For Student Wise Excess Amount Details, Fee Fixed Detail and Summary
            else if (ReportID == 1042 || ReportID == 1044 || ReportID == 1045)
            {
                if (db.MTAcaYearStyleMasters.Count() == 1)
                    ViewData["Installment"] = db.FEEInstallmentMasters.Where(model => model.AcaStart == acastart && model.SchoolID == schoolid).OrderBy(model => model.AutoID).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.FIName }).ToList();
                else
                    ViewData["Installment"] = db.FEEInstallmentMasters.Where(model => model.AcaStart == acastart && model.SchoolID == schoolid).OrderBy(model => model.AutoID).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.FIName + " # " + model.StyleID }).ToList();
                ViewData.Remove("Receipt_Mode");
                ViewData.Remove("Pay_In");
                ViewData.Remove("Report_Type");
                ViewData.Remove("Fee_Type");
                ViewData.Remove("Account_Type");
            }
            // For Security Deposit Detail
            else if (ReportID == 1043)
            {
                ViewData.Remove("Receipt_Mode");
                ViewData.Remove("Pay_In");
                ViewData.Remove("Report_Type");
                ViewData.Remove("Fee_Type");
                ViewData.Remove("Account_Type");
            }

            // For Online Transaction Detail
            else if (ReportID == 1050)
            {
                ViewData.Remove("Receipt_Mode");
                ViewData.Remove("Pay_In");
                ViewData.Remove("Report_Type");
                ViewData.Remove("Fee_Type");
                ViewData.Remove("Account_Type");
                ViewData.Remove("Fee_Group");
                ViewData.Remove("Class_Section");
                ViewData["Transaction_Status"] = db.FeeOnlinePaymentMasters.Where(model => model.AcaStart == acastart && model.SchoolID == schoolid).Select(model => new MTDDLMaster() { DDLID = model.SuccessStatus.ToString(), DDLName = model.SuccessStatus.ToString() }).Distinct().ToList();
            }

            // For Online Unpaid Transaction Detail
            else if (ReportID == 1051)
            {
                ViewData.Remove("Receipt_Mode");
                ViewData.Remove("Pay_In");
                ViewData.Remove("Report_Type");
                ViewData.Remove("Fee_Type");
                ViewData.Remove("Account_Type");
                ViewData.Remove("Fee_Group");
                ViewData.Remove("Class_Section");

            }
            // For HeadWise Collection/Concession Summary
            else if (ReportID == 1057)
            {
                ViewData["Fee_Head"] = db.FEEHeadMasters.Where(model => (model.AcaStart == acastart || model.AcaStart == null) && model.FHeadID > 2 && model.SchoolID == schoolid).OrderBy(model => model.PntOrder).Select(model => new MTDDLMaster() { DDLID = model.FHeadID.ToString(), DDLName = model.FHName }).ToList();
                ViewData.Remove("Receipt_Mode");
                ViewData.Remove("Report_Type");
            }
            else if (ReportID == 1058)
            {
                FRD.Amount = "";
                if (db.MTAcaYearStyleMasters.Count() == 1)
                    ViewData["Installment"] = db.FEEInstallmentMasters.Where(model => model.AcaStart == acastart && model.SchoolID == schoolid).OrderBy(model => model.AutoID).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.FIName }).ToList();
                else
                    ViewData["Installment"] = db.FEEInstallmentMasters.Where(model => model.AcaStart == acastart && model.SchoolID == schoolid).OrderBy(model => model.AutoID).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.FIName + " # " + model.StyleID }).ToList();
                ViewData.Remove("Receipt_Mode");
                ViewData.Remove("Pay_In");
                ViewData.Remove("Report_Type");
                ViewData.Remove("Fee_Type");
                ViewData.Remove("Account_Type");
                FRD.FromDate = null;
                FRD.ToDate = null;
            }
            else if (ReportID == 1061)
            {
                ViewData.Remove("Receipt_Mode");
                ViewData.Remove("Pay_In");
                ViewData.Remove("Report_Type");
                ViewData.Remove("Fee_Type");
                ViewData.Remove("Account_Type");
                ViewData.Remove("Fee_Group");
                ViewData.Remove("Class_Section");

            }
            else if (ReportID == 1064)
            {
                ViewData["Payment_Status"] = db.FeeOnlineSettlementMasters.Where(model => model.AcaStart == acastart && model.SchoolID == schoolid && model.PaymentStatus != "" && model.PaymentStatus != null).OrderBy(model => model.PaymentStatus).Select(model => new MTDDLMaster() { DDLID = model.PaymentStatus, DDLName = model.PaymentStatus }).Distinct().ToList();
                ViewData.Remove("Receipt_Mode");
                ViewData.Remove("Pay_In");
                ViewData.Remove("Report_Type");
                ViewData.Remove("Fee_Type");
                ViewData.Remove("Account_Type");
                ViewData.Remove("Fee_Group");
                ViewData.Remove("Class_Section");
            }
            else if (ReportID == 1066)
            {
                ViewData.Remove("Receipt_Mode");
                ViewData.Remove("Report_Type");
            }
            else if (ReportID == 1068)
            {
                //FRD.FromDate = null;
                //FRD.ToDate = null;
                ViewData.Remove("Pay_In");
                ViewData.Remove("Report_Type");
                ViewBag.Student_Status = ddlStatus();
                ViewData["Fee_Head"] = db.FEEHeadMasters.Where(model => (model.AcaStart == acastart || model.AcaStart == null) && model.FHeadID > 2 && model.SchoolID == schoolid).OrderBy(model => model.PntOrder).Select(model => new MTDDLMaster() { DDLID = model.FHeadID.ToString(), DDLName = model.FHName }).ToList();

            }
            else if (ReportID == 1069)
            {
                if (db.MTAcaYearStyleMasters.Count() == 1)
                    ViewData["Installment"] = db.FEEInstallmentMasters.Where(model => model.AcaStart == acastart && model.SchoolID == schoolid).OrderBy(model => model.AutoID).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.FIName }).ToList();
                else
                    ViewData["Installment"] = db.FEEInstallmentMasters.Where(model => model.AcaStart == acastart && model.SchoolID == schoolid).OrderBy(model => model.AutoID).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.FIName + " # " + model.StyleID }).ToList();

                ViewData.Remove("Receipt_Mode");
                ViewData.Remove("Pay_In");
                ViewData.Remove("Report_Type");
                ViewData.Remove("Fee_Type");
                ViewData.Remove("Account_Type");
                FRD.FromDate = null;
                FRD.ToDate = null;

                ViewData["Activity_Type"] = db.FEEHeadMasters.Where(model => model.AcaStart == acastart && model.Type == "A" && model.SchoolID == schoolid).OrderBy(model => model.PntOrder).Select(model => new MTDDLMaster() { DDLID = model.FHeadID.ToString(), DDLName = model.FHName }).ToList();
            }

            else if (ReportID == 1070)
            {

                if (db.MTAcaYearStyleMasters.Count() == 1)
                    ViewData["Installment"] = db.FEEInstallmentMasters.Where(model => model.AcaStart == acastart && model.SchoolID == schoolid).OrderBy(model => model.AutoID).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.FIName }).ToList();
                else
                    ViewData["Installment"] = db.FEEInstallmentMasters.Where(model => model.AcaStart == acastart && model.SchoolID == schoolid).OrderBy(model => model.AutoID).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.FIName + " # " + model.StyleID }).ToList();


                ViewData.Remove("Receipt_Mode");
                ViewData.Remove("Pay_In");
                ViewData.Remove("Report_Type");
                ViewData.Remove("Fee_Type");
                ViewData.Remove("Account_Type");
                FRD.FromDate = null;
                FRD.ToDate = null;



            }
            else if (ReportID == 1071)
            {
                ViewData.Remove("Pay_In");
                ViewData.Remove("Report_Type");
                ViewData.Remove("Fee_Type");
                ViewData.Remove("Account_Type");
                ViewData.Remove("Fee_Group");
                ViewData.Remove("Class_Section");
            }
            else if (ReportID == 1072)
            {

                FRD.AdmNo = "";
                ViewData.Remove("Pay_In");
                ViewData.Remove("Report_Type");
                ViewData.Remove("Fee_Type");
                ViewData.Remove("Account_Type");
                ViewData.Remove("Receipt_Mode");
                FRD.FromDate = null;
                FRD.ToDate = null;
            }
            else if (ReportID == 1073)
            {
                if (db.MTAcaYearStyleMasters.Count() == 1)
                    ViewData["Installment"] = db.FEEInstallmentMasters.Where(model => model.AcaStart == acastart && model.SchoolID == schoolid).OrderBy(model => model.AutoID).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.FIName }).ToList();
                else
                    ViewData["Installment"] = db.FEEInstallmentMasters.Where(model => model.AcaStart == acastart && model.SchoolID == schoolid).OrderBy(model => model.AutoID).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.FIName + " # " + model.StyleID }).ToList();
                ViewData.Remove("Receipt_Mode");
                ViewData.Remove("Pay_In");
                ViewData.Remove("Report_Type");
                FRD.FromDate = null;
                //ViewBag.Student_Status = ddlStatus();

                FRD.AmtType = "";
                FRD.Amount = "";

            }
            else if (ReportID == 1074)
            {
                if (db.MTAcaYearStyleMasters.Count() == 1)
                    ViewData["Installment"] = db.FEEInstallmentMasters.Where(model => model.AcaStart == acastart && model.SchoolID == schoolid).OrderBy(model => model.AutoID).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.FIName }).ToList();
                else
                    ViewData["Installment"] = db.FEEInstallmentMasters.Where(model => model.AcaStart == acastart && model.SchoolID == schoolid).OrderBy(model => model.AutoID).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.FIName + " # " + model.StyleID }).ToList();
                ViewData.Remove("Receipt_Mode");
                ViewData.Remove("Pay_In");
                ViewData.Remove("Report_Type");
                FRD.FromDate = null;
                ViewBag.Student_Status = ddlStatus();

            }
            else if (ReportID == 1075)
            {
                ViewData["Users"] = (from UM in db.MTUserMasters join ML in db.MTMenulimitmasters on UM.UID equals ML.UID where ML.ModuleID == 10 && ML.MenuID == 131 && ML.NewOption == "Y" && (new string[] { "0", "1" }).Contains(UM.UserTypeID.ToString()) select new MTDDLMaster() { DDLID = UM.UID.ToString(), DDLName = UM.UserName }).ToList();
            }
            return PartialView("_FeeReportsFilter", FRD);
        }







        private List<MTDDLMaster> ddlStatus()
        {
            List<MTDDLMaster> obj = new List<MTDDLMaster>();
            MTDDLMaster ddl = new MTDDLMaster();
            ddl = new MTDDLMaster();
            ddl.DDLID = "S";
            ddl.DDLName = "Studying";
            obj.Add(ddl);
            ddl = new MTDDLMaster();
            ddl.DDLID = "D";
            ddl.DDLName = "Dropout";
            obj.Add(ddl);
            ddl = new MTDDLMaster();
            ddl.DDLID = "T";
            ddl.DDLName = "TC";
            obj.Add(ddl);
            return obj;
        }


        #endregion

        #region Fee Charts


        public ActionResult Charts()
        {
            if (CheckSession()) { return RedirectToAction("Logon", "Logon"); }
            ViewBag.ddlModule = (from LY in db.MTUserModuleMasters where (LY.ModuleID == 10) orderby LY.Priority select new MTDDLMaster() { DDLID = LY.ModuleID.ToString(), DDLName = LY.ModuleName }).ToList();
            fGetModulewiseList(10);
            return View();
        }


        public ActionResult FeeAnalysisCharts(string Fields, string Group, int ModuleID, string ChkFields)
        {
            ReportDocument reportdocument = new ReportDocument();
            try
            {
                GC.Collect();

                if (CheckSession())
                {
                    return RedirectToAction("Logout", "Logon");
                }

                int acastart = (int)Session["AcaStart"];
                int schoolid = (int)Session["SchoolID"];

                reportdocument.Load(Server.MapPath("/FeeReport/crptCharts.rpt"));
                reportdocument.DataSourceConnections[0].SetConnection(strServer, strDatabase, strUID, strPWD);
                reportdocument.SetParameterValue(0, acastart);
                reportdocument.SetParameterValue(1, schoolid);
                reportdocument.SetParameterValue(2, Fields);
                reportdocument.SetParameterValue(3, Group);
                reportdocument.SetParameterValue(4, ModuleID);
                reportdocument.SetParameterValue(5, CCSession.LibraryID == 0 ? 1 : CCSession.LibraryID);
                reportdocument.SetParameterValue(6, schoolid);

                //if (finformula(reportdocument, "Column"))
                //    reportdocument.DataDefinition.FormulaFields["Column"].Text = "'" + Group + "'";

                reportdocument.DataDefinition.FormulaFields["UserCaption"].Text = "'Analysis detail for Academic Session (" + acastart.ToString() + " - " + (acastart + 1).ToString() + ")  of type " + Group + " for  " + ChkFields + "'";

                Stream stream = reportdocument.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                return File(stream, "application/pdf");
            }
            finally
            {
                reportdocument.Close();
                reportdocument.Dispose();
            }
        }



        public JsonResult fGetModulewiseList(int ModuleID)
        {
            CommonResponse CR = new CommonResponse();
            try
            {
                if (CheckSession())
                {
                    CR.Message = "Login Again";
                    return Json(CR);
                }
                int intSchoolid = (int)Session["SchoolID"];
                int intAcaStart = (int)Session["AcaStart"];
                object[] obj = new object[2];
                List<MTCheckMaster> lstField;
                lstField = new List<MTCheckMaster>(from RM in db.AnalysisFieldss
                                                   where RM.GroupField == "F" && RM.ModuleID == ModuleID
                                                   select new MTCheckMaster()
                                                   {
                                                       CheckID = RM.AutoID.ToString(),
                                                       CheckName = RM.FieldName,
                                                       Check = (RM.DefaultField == "N" ? false : true)
                                                   }).Distinct().ToList();

                ViewData["AnalysisField"] = lstField;
                List<AnalysisFields> lstFd = new List<AnalysisFields>();
                lstFd = db.AnalysisFieldss.Where(model => model.ModuleID == ModuleID && model.GroupField == "F" && model.DefaultField == "Y").ToList();
                string strField = "";
                foreach (var i in lstFd)
                {
                    strField = strField + i.FieldName + ",";
                }
                strField = strField.Substring(0, strField.Length - 1);

                lstField = new List<MTCheckMaster>(from RM in db.AnalysisFieldss
                                                   where RM.GroupField == "G" && RM.ModuleID == ModuleID
                                                   select new MTCheckMaster()
                                                   {
                                                       CheckID = RM.AutoID.ToString(),
                                                       CheckName = RM.FieldName,
                                                       Check = (RM.DefaultField == "N" ? false : true)
                                                   }).Distinct().ToList();

                ViewData["AnalysisGroup"] = lstField;
                lstFd = new List<AnalysisFields>();
                lstFd = db.AnalysisFieldss.Where(model => model.ModuleID == ModuleID && model.GroupField == "G" && model.DefaultField == "Y").ToList();
                string strGroup = "";
                foreach (var i in lstFd)
                {
                    strGroup = strGroup + i.FieldName + ",";
                }
                strGroup = strGroup.Substring(0, strGroup.Length - 1);
                //ViewData["AnalysisGrid"] = db.SchoolFeeAnalysis(intSchoolid, intAcaStart, strField, strGroup, ModuleID, CCSession.LibraryID == 0 ? 1 : CCSession.LibraryID).Tables[0];
                obj[0] = DbCampusContext.RenderPertialViewtoString(this, "_AnalysisField").Replace("fGetModulewiseList", "Analysis");
                obj[1] = DbCampusContext.RenderPertialViewtoString(this, "_AnalysisGroup").Replace("fGetModulewiseList", "Analysis");
                CR.Data = obj;
                CR.Message = "";
                return Json(CR);
            }
            catch (Exception e)
            {
                CR.Message = e.Message;
                return Json(CR);
            }
        }


        #endregion

        #region Petty Report

        [HttpGet]
        [Authorize]
        public ActionResult PettyReports()
        {
            if (CheckSession()) { return RedirectToAction("Logon", "Logon"); }
            fillPermission();
            string ss = DateTime.UtcNow.ToString();
            ViewData["ReportMenu"] = db.MTReportMasters.Where(m => m.ModuleID == 10 && m.RName.Contains("Petty")).ToList();
            return View();
        }
        [Authorize]
        public ActionResult PettyFilterPopUp(int? ReportID, string VirtualPath)
        {
            Request.Cookies.Clear();
            if (CheckSession()) { return RedirectToAction("Logon", "Logon"); }
            ViewData.Clear();
            FeeReportData FRD = new FeeReportData();
            FRD.RID = (int)ReportID;
            FRD.ReportName = VirtualPath;
            FRD.FromDate = DateTime.Now;
            FRD.ToDate = DateTime.Now;
            int acastart = (int)Session["AcaStart"];
            int schoolid = (int)Session["SchoolID"];

            ViewData["Petty_Head"] = db.FEEPettyHeadMasters.Where(model => model.SchoolID == schoolid && model.AutoID != 0).OrderBy(model => model.PtyNo).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.PHName }).ToList();
            ViewData["Class"] = db.MTClassMasters.Where(model => model.AutoID != 0).OrderBy(model => model.PriorityNo).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.ClassName }).ToList();

            //ViewData["Users"] = (from UM in db.MTUserMasters where (new string[] { "0", "1" }).Contains(UM.UserTypeID.ToString()) select new MTDDLMaster() { DDLID = UM.UID.ToString(), DDLName = UM.UserName }).ToList();
            ViewData["Users"] = (from UM in db.MTUserMasters join ML in db.MTMenulimitmasters on UM.UID equals ML.UID where ML.ModuleID == 10 && ML.MenuID == 136 && ML.NewOption == "Y" && (new string[] { "0", "1" }).Contains(UM.UserTypeID.ToString()) select new MTDDLMaster() { DDLID = UM.UID.ToString(), DDLName = UM.UserName }).ToList();

            return PartialView("_PettyReportsFilter", FRD);
        }

        #endregion

        #region Fee Online File Upload
        [HttpGet]
        [Authorize]
        public ActionResult FeeOnlineFileUpload()
        {
            if (CheckSession()) { return RedirectToAction("Logon", "Logon"); }
            fillPermission();
            return View();
        }

        [HttpPost]
        [Authorize]
        public ActionResult FeeOnlineFileUpload(HttpPostedFileBase file)
        {
            if (file != null && file.ContentLength > 0)
            {
                string filename = Path.GetFileName(file.FileName);
                string filepath = Path.Combine(Server.MapPath("~/Temp/"), filename);
                if (System.IO.File.Exists(filepath))
                    System.IO.File.Delete(filepath);
                file.SaveAs(filepath);
                if (System.IO.File.Exists(filepath) == true)
                {
                    OleDbConnection objOleDb = new OleDbConnection();
                    try
                    {
                        //*********** OLEDB Connection String 64 Bit data Provider. 
                        string sExcelConn = @"Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + filepath + ";Extended Properties=Excel 12.0";
                        //string sExcelConn = @"Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + filepath + ";Extended Properties=Excel 8.0";
                        // SqlTransaction SqlTR;
                        //SqlTR
                        objOleDb.ConnectionString = sExcelConn;
                        objOleDb.Open();
                        DataTable dtSheetName = objOleDb.GetOleDbSchemaTable(OleDbSchemaGuid.Tables, null);
                        string sSqlExcel = "Select * from [" + dtSheetName.Rows[0]["TABLE_NAME"].ToString() + "]";
                        //string sSqlExcel = "Select [SNO],[ADMINNO],[STU_NAME],[CLASS],[SEC],[CHQNO],[BANK],[CHQDATE],[AMT]  from [" + dtSheetName.Rows[0]["TABLE_NAME"].ToString() + "]";

                        //************** Create OleDbCommand to fetch data from Excel. 
                        DataSet ds = new DataSet();
                        OleDbCommand ObjDBConn = new OleDbCommand(sSqlExcel, objOleDb);
                        OleDbDataAdapter adp = new OleDbDataAdapter(ObjDBConn);
                        adp.Fill(ds);

                        int rslt;
                        for (int i = 0; i < ds.Tables[0].Columns.Count; i++)
                        {
                            if (ds.Tables[0].Columns[i].ColumnName.StartsWith("F") == true && int.TryParse(ds.Tables[0].Columns[i].ColumnName.Substring(1), out rslt) == true)
                            {
                                ds.Tables[0].Columns.RemoveAt(i);
                                --i;
                            }
                        }

                        List<string> result = db.FeeOnlineFileUploadSettallement(ds.Tables[0], (int)Session["UID"], (int)Session["AcaStart"], (int)Session["SchoolID"], Request["txtCommnet"]);
                        if (result.Count > 0)
                        {
                            TempData["Msg"] = result[0];
                        }
                        else
                        {
                            TempData["Msg"] = "Data Not Transfer Successfully";
                        }
                    }
                    catch (Exception ex)
                    {
                        TempData["Msg"] = ex.Message;
                    }
                    finally
                    {
                        objOleDb.Close();
                    }
                }
                else
                {
                    TempData["Msg"] = "File Not Found";
                }
            }
            return RedirectToAction("FeeOnlineFileUpload", "Fee", new { parentid = ids[0], menuid = ids[1] });
        }
        #endregion

        #region Fee Bank Collection Entry
        [HttpGet]
        [Authorize]
        public ActionResult FeeBankCollectionEntry()
        {
            if (CheckSession()) { return RedirectToAction("Logon", "Logon"); }
            fillPermission();
            return View();
        }

        [HttpPost]
        [Authorize]
        public ActionResult FeeBankCollectionEntry(HttpPostedFileBase file)
        {
            if (file != null && file.ContentLength > 0)
            {
                string pathname = Path.GetExtension(file.FileName);
                string filename = Path.GetFileName(file.FileName);
                string filepath = Path.Combine(Server.MapPath("~/Temp/"), filename);
                if (System.IO.File.Exists(filepath))
                    System.IO.File.Delete(filepath);
                file.SaveAs(filepath);
                if (System.IO.File.Exists(filepath) == true)
                {
                    OleDbConnection objOleDb = new OleDbConnection();
                    try
                    {
                        if (pathname == ".xls" || pathname == ".xlsx")
                        {
                            //*********** OLEDB Connection String 64 Bit data Provider. 
                            string sExcelConn = @"Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + filepath + ";Extended Properties=Excel 12.0";
                            //string sExcelConn = @"Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + filepath + ";Extended Properties=Excel 8.0";
                            //SqlTransaction SqlTR;
                            //SqlTR
                            objOleDb.ConnectionString = sExcelConn;
                            objOleDb.Open();
                            DataTable dtSheetName = objOleDb.GetOleDbSchemaTable(OleDbSchemaGuid.Tables, null);
                            string sSqlExcel = "Select * from [" + dtSheetName.Rows[0]["TABLE_NAME"].ToString() + "]";
                            //string sSqlExcel = "Select [SNO],[ADMINNO],[STU_NAME],[CLASS],[SEC],[CHQNO],[BANK],[CHQDATE],[AMT]  from [" + dtSheetName.Rows[0]["TABLE_NAME"].ToString() + "]";

                            //************** Create OleDbCommand to fetch data from Excel. 
                            DataSet ds = new DataSet();
                            OleDbCommand ObjDBConn = new OleDbCommand(sSqlExcel, objOleDb);
                            OleDbDataAdapter adp = new OleDbDataAdapter(ObjDBConn);
                            adp.Fill(ds);

                            int rslt;
                            for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                            {
                                if (int.TryParse(ds.Tables[0].Rows[i][0].ToString(), out rslt) == false)
                                {
                                    ds.Tables[0].Rows.RemoveAt(i);
                                    --i;
                                }
                            }
                            string comment = Request.Form["Comment"];
                            List<string> result = db.FeeBankCollectionFileUpload(ds.Tables[0], (int)Session["UID"], (int)Session["AcaStart"], (int)Session["SchoolID"], comment, Session.SessionID);
                            if (result.Count > 0)
                            {
                                TempData["Msg"] = result[0];
                            }
                            else
                            {
                                TempData["Msg"] = "Data Not Transfer Successfully";
                            }
                            ObjDBConn.Dispose();
                        }
                        else
                        {
                            TempData["Msg"] = "File Not Supported, Please upload Excel file as given sample";
                        }
                    }
                    catch (Exception ex)
                    {
                        TempData["Msg"] = ex.Message;
                    }
                    finally
                    {
                        objOleDb.Close();
                    }
                }
                else
                {
                    TempData["Msg"] = "File Not Found";
                }
            }
            return RedirectToAction("FeeBankCollectionEntry", "Fee", new { parentid = ids[0], menuid = ids[1] });
        }

        #endregion

        #region Fee Bank Collection Detail

        [Authorize]
        public ActionResult FeeBankCollectionDetail()
        {
            if (CheckSession()) { return RedirectToAction("Logon", "Logon"); }
            fillPermission();
            List<MTDDLMaster> obj = new List<MTDDLMaster>();
            obj.Add(new MTDDLMaster { DDLID = "0", DDLName = "ALL" });
            obj.AddRange(db.FeeBankCollections.Where(model => model.CollectionStatus != "" && model.CollectionStatus != null).Select(model => new MTDDLMaster { DDLID = model.CollectionStatus, DDLName = model.CollectionStatus }).Distinct().ToList());
            ViewBag.ddlStatusType = obj;
            return View();
        }
        [Authorize]
        public JsonResult FeeBankCollectionDetailRecord(string FromDate, string ToDate, string StatusType)
        {
            CommonResponse CR = new CommonResponse();
            try
            {
                if (CheckSession())
                {
                    CR.Message = "Login Again";
                    return Json(CR);
                }

                int acastart = (int)Session["AcaStart"];
                int schoolid = (int)Session["SchoolID"];
                DateTime FDate = Convert.ToDateTime(FromDate);
                DateTime TDate = Convert.ToDateTime(ToDate);

                List<FeeBankCollection> fcd;
                if (StatusType == "0")
                    fcd = db.FeeBankCollections.Where(model => model.RecDate >= FDate && model.RecDate <= TDate).ToList();
                else
                    fcd = db.FeeBankCollections.Where(model => model.RecDate >= FDate && model.RecDate <= TDate && model.CollectionStatus == StatusType).ToList();

                if (fcd.Count > 0)
                {
                    ViewData["GetData"] = fcd;
                    object[] obj = new object[1];
                    obj[0] = DbCampusContext.RenderPertialViewtoString(this, "_FeeBankCollectionDetailGrid");

                    CR.Message = "";
                    CR.Data = obj;
                }
                else
                    CR.Message = "Record not found";

                return Json(CR);
            }
            catch (Exception e)
            {
                CR.Message = e.Message;
                return Json(CR);
            }
        }

        #endregion

        #region Fee Online Status Update
        [Authorize]
        public ActionResult FeeOnlineStatusUpdate()
        {
            if (CheckSession()) { return RedirectToAction("Logon", "Logon"); }
            fillPermission();
            return View();
        }
        [Authorize]
        public JsonResult GetFeeOnlineStatusUpdate(string TransactionNo)
        {
            CommonResponse cm = new CommonResponse();
            try
            {
                if (CheckSession())
                {
                    cm.Message = "Login Again";
                    return Json(cm);
                }
                int AcaStart = (int)Session["AcaStart"];
                int SchoolID = (int)Session["SchoolID"];

                List<object> obj = db.fillFeeOnlineStatusUpdate(SchoolID, AcaStart, TransactionNo);
                if (obj.Count > 0)
                {
                    cm.Message = "";
                    object[] objects = new object[2];
                    objects[0] = obj[0];

                    string payforflag = db.FeeOnlinePaymentMasters.Where(model => model.UserSystemTransactionID == TransactionNo).Select(model => model.PayForFlag).FirstOrDefault();
                    if (payforflag == "FeeCollection")
                    {
                        FeeOnlinePaymentMaster OPM = db.FeeOnlinePaymentMasters.Where(model => model.UserSystemTransactionID == TransactionNo).FirstOrDefault();
                        int StudIDs = (int)db.FeeOnlineMasters.Where(model => model.SystemTransactionID == OPM.AutoID && (model.Verify == "N" || model.Verify == null)).FirstOrDefault().StudentID;
                        objects[1] = CheckAtomStatus(TransactionNo, (int)StudIDs);
                    }
                    else
                    {
                        objects[1] = CheckAtomStatus(TransactionNo, 0);
                    }

                    //objects[1] = CheckAtomStatus(TransactionNo);

                    obj = db.fillFeeOnlineStatusUpdate(SchoolID, AcaStart, TransactionNo);
                    objects[0] = obj[0];
                    cm.Data = objects;
                }
                else
                {
                    cm.Message = "Record not found";
                }
                return Json(cm);
            }
            catch (Exception ex)
            {
                cm.Message = ex.Message;
                return Json(cm);
            }
        }

        public string CheckAtomStatus(string TransactionNo, int Stuid)
        {
            FeeOnlinePaymentMaster OPM = db.FeeOnlinePaymentMasters.Where(model => model.UserSystemTransactionID == TransactionNo).FirstOrDefault();
            FeeOnlineMaster OM = new FeeOnlineMaster();

            int AccTypeID = 1;
            int FeePayTypeID = 1;

            if (OPM.PayForFlag == "FeeCollection")
            {
                OM = db.FeeOnlineMasters.Where(model => model.SystemTransactionID == OPM.AutoID && model.StudentID == Stuid).FirstOrDefault();

                AccTypeID = (from SYD in db.SIStudentYearWiseDetails
                             join FG in db.FEEGroupMasters on SYD.FeeGrpID equals FG.AutoID
                             //join FOD in db.FeeOnlinePaymentDetails on SYD.StudID equals FOD.StudentID
                             join FOD in db.FeeOnlineMasters on SYD.StudID equals FOD.StudentID
                             where FG.AcaStart == CCSession.AcaStart && FOD.SystemTransactionID == OPM.AutoID && FOD.StudentID == Stuid
                             select new { AccID = FG.AccID }).ToList()[0].AccID;
            }

            FeePayTypeID = db.FeeOnlinePaymentMasters.Where(model => model.UserSystemTransactionID == TransactionNo).Select(model => (int)model.PayTypeID).FirstOrDefault();

            //FEEONLINEPAYMENTCREDENTIALS PayDetail = db.FEEONLINEPAYMENTCREDENTIALSs.Where(model => model.PayForFlag == OPM.PayForFlag && model.AccTypeID == AccTypeID && model.FeePayTypeID == FeePayTypeID).FirstOrDefault();
            FEEONLINEPAYMENTCREDENTIALS PayDetail = db.FEEONLINEPAYMENTCREDENTIALSs.Where(model => model.PayForFlag == OPM.PayForFlag && model.FeePayTypeID == FeePayTypeID).FirstOrDefault();//&& model.AccTypeID == AccTypeID 

            try
            {
                string strAtomTransactionID, strBanktransactionID, strBankName, Discriminator = "", CardNumber = "";
                strBanktransactionID = OPM.BankTransactionID;
                strAtomTransactionID = OPM.AtomTransactionID;
                strBankName = OPM.BankName;
                if (PayDetail != null && OPM != null)
                {
                    XmlDocument responseXML = new XmlDocument();
                    string AtomURL = PayDetail.VerifyRequestURL;
                    string MerchantID = PayDetail.MerchantLoginID;
                    string strDate = Convert.ToDateTime(OPM.RequestTime, cinfo).Date.ToString("yyyy-MM-dd");
                    string ReqURL = "";
                    //string ReqURL = AtomURL + "?merchantid=" + MerchantID + "&merchanttxnid=" + OPM.UserSystemTransactionID + "&amt=" + OPM.PayAmt + "&tdate=" + strDate + "";
                    if (OPM.PayForFlag == "FeeCollection")
                    {
                        //ReqURL = AtomURL + "?merchantid=" + MerchantID + "&merchanttxnid=" + OPM.UserSystemTransactionID + "&amt=" + OM.Amount + "&tdate=" + strDate + "";
                        ReqURL = AtomURL + "?merchantid=" + MerchantID + "&merchanttxnid=" + OPM.UserSystemTransactionID + "&amt=" + OPM.PayAmt + "&tdate=" + strDate + "";
                    }
                    else
                    {
                        ReqURL = AtomURL + "?merchantid=" + MerchantID + "&merchanttxnid=" + OPM.UserSystemTransactionID + "&amt=" + OPM.PayAmt + "&tdate=" + strDate + "";
                    }

                    System.Net.ServicePointManager.ServerCertificateValidationCallback = delegate(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors) { return true; };
                    ServicePointManager.Expect100Continue = true;
                    ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;

                    HttpWebRequest myWebReq = (HttpWebRequest)WebRequest.Create(ReqURL);
                    HttpWebResponse myWebRes = (HttpWebResponse)myWebReq.GetResponse();
                    StreamReader myWebReqResStreamReader = new StreamReader(myWebRes.GetResponseStream());
                    string responseXMLString = myWebReqResStreamReader.ReadToEnd();

                    //string responseXMLString = "<?xml version=\"1.0\" encoding=\"UTF-8\" ?><VerifyOutput MerchantID=\"160\" MerchantTxnID=\"1015\" AMT=\"100.00\" VERIFIED=\"SUCCESS\" BID=\"123456\" bankname=\"HDFC Bank\" atomtxnId=\"665544\" discriminitor=\"NB\" CardNumber=\"401288XXXXXXX1881\" surcharge=\"10.00\" /VerifyOutput>";

                    XmlNodeList responseXMLNode;

                    responseXML.LoadXml(responseXMLString);
                    // TO PICK url VALUES FROM THE RESPONSE XML
                    responseXMLNode = responseXML.SelectNodes("VerifyOutput");
                    string strStatus = "";
                    foreach (XmlNode urlStringValues in responseXMLNode)
                    {
                        for (int i = 0; i < urlStringValues.Attributes.Count; i++)
                        {
                            if (urlStringValues.Attributes[i].Name == "VERIFIED")
                                strStatus = urlStringValues.Attributes[i].Value.ToString();
                            else if (urlStringValues.Attributes[i].Name == "BID")
                                strBanktransactionID = urlStringValues.Attributes[i].Value.ToString();
                            else if (urlStringValues.Attributes[i].Name == "bankname")
                                strBankName = urlStringValues.Attributes[i].Value.ToString();
                            else if (urlStringValues.Attributes[i].Name == "atomtxnId")
                                strAtomTransactionID = urlStringValues.Attributes[i].Value.ToString();
                            else if (urlStringValues.Attributes[i].Name == "discriminator")
                                Discriminator = urlStringValues.Attributes[i].Value.ToString();
                            else if (urlStringValues.Attributes[i].Name == "CardNumber")
                                CardNumber = urlStringValues.Attributes[i].Value.ToString();
                        }
                    }
                    if (strStatus == "NODATA")
                    {
                        DateTime strDate1 = Convert.ToDateTime(OPM.RequestTime, cinfo).Date;
                        DateTime FDate = strDate1.AddDays(1);
                        string FinalDate = Convert.ToDateTime(FDate, cinfo).Date.ToString("yyyy-MM-dd");

                        if (OPM.PayForFlag == "FeeCollection")
                        {
                            ReqURL = AtomURL + "?merchantid=" + MerchantID + "&merchanttxnid=" + OPM.UserSystemTransactionID + "&amt=" + OPM.PayAmt + "&tdate=" + FinalDate + "";
                        }
                        else
                        {
                            ReqURL = AtomURL + "?merchantid=" + MerchantID + "&merchanttxnid=" + OPM.UserSystemTransactionID + "&amt=" + OPM.PayAmt + "&tdate=" + FinalDate + "";
                        }

                        System.Net.ServicePointManager.ServerCertificateValidationCallback = delegate(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors) { return true; };
                        ServicePointManager.Expect100Continue = true;
                        ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;

                        myWebReq = (HttpWebRequest)WebRequest.Create(ReqURL);
                        myWebRes = (HttpWebResponse)myWebReq.GetResponse();
                        myWebReqResStreamReader = new StreamReader(myWebRes.GetResponseStream());
                        responseXMLString = myWebReqResStreamReader.ReadToEnd();

                        //string responseXMLString = "<?xml version=\"1.0\" encoding=\"UTF-8\" ?><VerifyOutput MerchantID=\"160\" MerchantTxnID=\"1015\" AMT=\"100.00\" VERIFIED=\"SUCCESS\" BID=\"123456\" bankname=\"HDFC Bank\" atomtxnId=\"665544\" discriminitor=\"NB\" CardNumber=\"401288XXXXXXX1881\" surcharge=\"10.00\" /VerifyOutput>";

                        responseXML.LoadXml(responseXMLString);
                        // TO PICK url VALUES FROM THE RESPONSE XML
                        responseXMLNode = responseXML.SelectNodes("VerifyOutput");

                        foreach (XmlNode urlStringValues in responseXMLNode)
                        {
                            for (int i = 0; i < urlStringValues.Attributes.Count; i++)
                            {
                                if (urlStringValues.Attributes[i].Name == "VERIFIED")
                                    strStatus = urlStringValues.Attributes[i].Value.ToString();
                                else if (urlStringValues.Attributes[i].Name == "BID")
                                    strBanktransactionID = urlStringValues.Attributes[i].Value.ToString();
                                else if (urlStringValues.Attributes[i].Name == "bankname")
                                    strBankName = urlStringValues.Attributes[i].Value.ToString();
                                else if (urlStringValues.Attributes[i].Name == "atomtxnId")
                                    strAtomTransactionID = urlStringValues.Attributes[i].Value.ToString();
                                else if (urlStringValues.Attributes[i].Name == "discriminator")
                                    Discriminator = urlStringValues.Attributes[i].Value.ToString();
                                else if (urlStringValues.Attributes[i].Name == "CardNumber")
                                    CardNumber = urlStringValues.Attributes[i].Value.ToString();
                            }
                        }
                    }
                    if (strStatus == "SUCCESS")
                    {
                        OPM.BankTransactionID = strBanktransactionID;
                        OPM.BankName = strBankName;
                        OPM.AtomTransactionID = strAtomTransactionID;
                        OPM.AtomVerify = strStatus;
                        OPM.Discriminator = Discriminator;
                        OPM.CardNumber = CardNumber;
                        if (OPM.PayForFlag == "FeeCollection")
                        {
                            OM.AtomVerify = strStatus;
                        }
                    }
                    else
                    {
                        //OPM.BankTransactionID = strBanktransactionID;
                        //OPM.BankName = strBankName;
                        //OPM.AtomTransactionID = strAtomTransactionID;
                        OPM.AtomVerify = strStatus;
                        if (OPM.PayForFlag == "FeeCollection")
                        {
                            OM.AtomVerify = strStatus;
                        }
                    }

                    db.SaveChanges();
                    return strStatus;
                }
                else
                    return "";
            }
            catch (Exception ex)
            {
                return ex.Message.ToString();
            }
        }
        [Authorize]
        public JsonResult FeeOnlineStatusUpdateSave(string para_OPM, encodeshdata trdata)
        {
            try
            {
                trdata.actualdata = para_OPM;
                if (RequestAuthentication(trdata) == false)
                {
                    return Json("Login Again");
                }
                if (CheckSession())
                {
                    return Json("Login Again");
                }
                FeeOnlinePaymentMaster OPM = new FeeOnlinePaymentMaster();
                FeeOnlineMaster objFom = new FeeOnlineMaster();
                JavaScriptSerializer json = new JavaScriptSerializer();

                OPM = (FeeOnlinePaymentMaster)json.ConvertToType<FeeOnlinePaymentMaster>(json.DeserializeObject(para_OPM));

                if (ModelState.IsValid)
                {
                    FeeOnlinePaymentMaster PM = db.FeeOnlinePaymentMasters.Find(OPM.AutoID);
                    //if (PM != null)
                    //{
                    //    FeeOnlineSuccessDetails OSD = new FeeOnlineSuccessDetails();
                    //    OSD.SystemTransactionID = PM.AutoID;
                    //    OSD.UserSystemTransactionID = PM.UserSystemTransactionID;
                    //    OSD.OldBankTransactionID = PM.BankTransactionID;
                    //    OSD.OldSuccessStatus = PM.SuccessStatus;
                    //    OSD.OldBankName = PM.BankName;
                    //    OSD.OldRequestUserID = PM.RequestUserID;
                    //    OSD.OldRequestTime = PM.RequestTime;
                    //    OSD.SchoolID = PM.SchoolID;
                    //    OSD.AcaStart = PM.AcaStart;
                    //    OSD.OldUserIP = PM.UserIP;
                    //    OSD.OldAtomTransactionID = PM.AtomTransactionID;
                    //    db.FeeOnlineSuccessDetailss.Add(OSD);
                    //    db.SaveChanges();
                    //}
                    PM.BankTransactionID = OPM.BankTransactionID;
                    PM.Verify = "Y";
                    if (PM.AtomVerify == "SUCCESS")
                    {
                        PM.SuccessStatus = "SUCCESSFUL";
                    }
                    PM.BankName = OPM.BankName;
                    PM.AtomTransactionID = OPM.AtomTransactionID;
                    PM.UserIP = Request.ServerVariables.Get("remote_addr").ToString();
                    //PM.RequestUserID = (int)Session["UID"];
                    PM.UpdateUserID = (int)Session["UID"];
                    PM.UpdateDate = DateTime.Now;

                    if (OPM.PayForFlag == "FeeCollection")
                    {
                        db.FeePostOnline(PM.AutoID, (int)Session["SchoolID"], (int)Session["AcaStart"], (int)Session["UID"], Session.SessionID, 0);
                        var billnos = db.FeeOnlineSystemTransactionBillNos.Where(model => model.SystemTransactionID == PM.AutoID).ToList();

                        foreach (var blno in billnos)
                        {
                            var FA = db.FEEAccountMasters.Find(blno.BillNo);
                            int autoid = db.FeeOnlineMasters.Where(model => model.StudentID == FA.StdID && model.SystemTransactionID == blno.SystemTransactionID).FirstOrDefault().AutoID;
                            objFom = db.FeeOnlineMasters.Find(autoid);
                            objFom.Verify = PM.Verify;
                            objFom.AtomVerify = PM.AtomVerify;
                            objFom.SuccessStatus = PM.SuccessStatus;
                        }
                        db.SaveChanges();
                    }
                    else
                    {
                        if (PM.AtomVerify == "SUCCESS")
                        {
                            string UserID = "";
                            int StudentID;

                            var obj = (from MU in db.MTUserMasters
                                       join FOPM in db.FeeOnlinePaymentMasters on MU.UID equals FOPM.RequestUserID
                                       where MU.UserTypeID == 6 && FOPM.UserSystemTransactionID == PM.UserSystemTransactionID
                                       select new { UID = MU.UserID.Contains("SRN") ? "SRN" : "SR" });
                            UserID = obj.FirstOrDefault().UID;

                            if (UserID == "SR")
                            {
                                var obj1 = (from MU in db.MTUserMasters
                                            join FOPM in db.FeeOnlinePaymentMasters on MU.UID equals FOPM.RequestUserID
                                            join SM in db.SRStudentMasters on MU.EmployeeIDStudentID equals SM.ARStudentIDs
                                            where MU.UserTypeID == 6 && !MU.UserID.Contains("SRN") && FOPM.UserSystemTransactionID == PM.UserSystemTransactionID
                                            select new { SID = (int)MU.EmployeeIDStudentID });
                                StudentID = obj1.FirstOrDefault().SID;
                                SRStudentMaster SRSM = db.SRStudentMasters.Where(model => model.ARStudentIDs == StudentID).FirstOrDefault();
                                // Not Complete 
                                SRSM.PayStatus = "Y";
                                //strQuery.Add("Update SrStudentMaster Set RegFee='S' where ArStudentID=" + StudentID + "");
                            }
                            else if (UserID == "SRN")
                            {
                                //    StudentID = objCCWeb.ReturnNumericValue("Select EmployeeIDStudentID from MTUsermaster MU " +
                                //                                  " Inner Join AdmStudentMaster SM on SM.Applicationid=MU.EmployeeIDStudentID " +
                                //                                  " Inner Join FeeOnlinePaymentMaster FM on FM.RequestUserId=MU.UID " +
                                //                                  " Where UserTypeID=6 and UserID  like 'SRN%' and  FM.UserSystemTransactionID='" + txtTransactionNo.Text.Trim().Replace("'", "''") + "'");
                                //    strQuery.Add("Update AdmStudentMaster Set RegFee='S' where Applicationid=" + StudentID + "");
                            }
                        }
                    }

                    db.SaveChanges();
                    return Json("Saved Successfully");
                }
                else
                {
                    return Json(ModelState.Values.SelectMany(model => model.Errors).ToList()[0].ErrorMessage);
                }
            }
            catch (Exception ex)
            {
                return Json(ex.Message);
            }
        }

        #endregion

        #region Fee Online Status Detail
        [Authorize]
        public ActionResult FeeOnlineStatusDetail()
        {
            if (CheckSession()) { return RedirectToAction("Logon", "Logon"); }
            fillPermission();
            List<MTDDLMaster> obj = new List<MTDDLMaster>();
            obj.Add(new MTDDLMaster { DDLID = "0", DDLName = "Select" });
            obj.AddRange(db.FeeOnlinePaymentMasters.Where(model => model.SuccessStatus != "New" && model.SuccessStatus != "" && model.SuccessStatus != null).Select(model => new MTDDLMaster { DDLID = model.SuccessStatus, DDLName = model.SuccessStatus }).Distinct().ToList());
            ViewBag.ddlStatusType = obj;
            return View("FeeOnlineStatusDetail");
        }
        [Authorize]
        public JsonResult FeeOnlineStatusDetailRecord(string FromDate, string ToDate, string StatusType)
        {
            CommonResponse CR = new CommonResponse();
            try
            {
                if (CheckSession())
                {
                    CR.Message = "Login Again";
                    return Json(CR);
                }
                fillOnlineStatusDetailGrid(ref CR, FromDate, ToDate, StatusType);
                return Json(CR);
            }
            catch (Exception e)
            {
                CR.Message = e.Message;
                return Json(CR);
            }
        }

        private void fillOnlineStatusDetailGrid(ref CommonResponse CR, string FromDate, string ToDate, string StatusType)
        {

            int acastart = (int)Session["AcaStart"];
            int schoolid = (int)Session["SchoolID"];

            List<object> fcd = db.fillFeeOnlineStatusDetail(schoolid, acastart, Convert.ToDateTime(FromDate), Convert.ToDateTime(ToDate), StatusType);
            if (fcd.Count > 0)
            {
                ViewData["GetData"] = fcd;
                object[] obj = new object[1];
                obj[0] = DbCampusContext.RenderPertialViewtoString(this, "_FeeOnlineStatusDetailGrid");

                CR.Message = "";
                CR.Data = obj;
            }
            else
                CR.Message = "Record not found";
        }
        [Authorize]
        public JsonResult FeeOnlineStatusDetailGenrate(string[] TransactionNo, string FromDate, string ToDate, string StatusType)
        {
            CommonResponse CR = new CommonResponse();
            try
            {
                if (CheckSession())
                {
                    CR.Message = "Login Again";
                    return Json(CR);
                }
                foreach (string trn in TransactionNo)
                {
                    string payforflag = db.FeeOnlinePaymentMasters.Where(model => model.UserSystemTransactionID == trn).Select(model => model.PayForFlag).FirstOrDefault();
                    if (payforflag == "FeeCollection")
                    {
                        FeeOnlinePaymentMaster OPM = db.FeeOnlinePaymentMasters.Where(model => model.UserSystemTransactionID == trn).FirstOrDefault();
                        var StudIDs = db.FeeOnlineMasters.Where(model => model.SystemTransactionID == OPM.AutoID).ToList();
                        foreach (var stuid in StudIDs)
                        {
                            CheckAtomStatus(trn, (int)stuid.StudentID);
                        }
                    }
                    else
                    {
                        CheckAtomStatus(trn, 0);
                    }
                }
                db.SaveChanges();
                fillOnlineStatusDetailGrid(ref CR, FromDate, ToDate, StatusType);
                CR.Message = "Generated Sucessfully";
                return Json(CR);
            }
            catch (Exception ex)
            {
                CR.Message = ex.Message;
                return Json(CR);
            }
        }
        [Authorize]
        public JsonResult FeeOnlineStatusDetailSave(string[] TransactionNo, encodeshdata trdata)
        {
            CommonResponse CR = new CommonResponse();
            FeeOnlineMaster objFom = new FeeOnlineMaster();
            try
            {
                trdata.actualdata = "[" + "\"" + string.Join("\",\"", TransactionNo) + "\"]";
                if (RequestAuthentication(trdata) == false)
                {
                    return Json("Login Again");
                }
                if (CheckSession())
                {
                    return Json("Login Again");
                }
                foreach (string trno in TransactionNo)
                {
                    string[] arr = trno.Split('^');
                    string UserSystemTransactionID = arr[0];
                    FeeOnlinePaymentMaster PM = db.FeeOnlinePaymentMasters.Where(model => model.UserSystemTransactionID == UserSystemTransactionID).FirstOrDefault();
                    if (PM != null)
                    {
                        //FeeOnlineSuccessDetails OSD = new FeeOnlineSuccessDetails();
                        //OSD.SystemTransactionID = PM.AutoID;
                        //OSD.UserSystemTransactionID = PM.UserSystemTransactionID;
                        //OSD.OldBankTransactionID = PM.BankTransactionID;
                        //OSD.OldSuccessStatus = PM.SuccessStatus;
                        //OSD.OldBankName = PM.BankName;
                        //OSD.OldRequestUserID = PM.RequestUserID;
                        //OSD.OldRequestTime = PM.RequestTime;
                        //OSD.SchoolID = PM.SchoolID;
                        //OSD.AcaStart = PM.AcaStart;
                        //OSD.OldUserIP = PM.UserIP;
                        //OSD.OldAtomTransactionID = PM.AtomTransactionID;
                        //db.FeeOnlineSuccessDetailss.Add(OSD);

                        PM.Verify = "Y";
                        PM.UpdateUserID = (int)Session["UID"];
                        PM.UpdateDate = DateTime.Now;
                        if (arr[1] == "1")
                        {
                            if (PM.AtomVerify == "SUCCESS")
                            {
                                PM.SuccessStatus = "SUCCESSFUL";
                                PM.UserIP = Request.ServerVariables.Get("remote_addr").ToString();
                            }
                            db.SaveChanges();
                            if (PM.PayForFlag == "FeeCollection")
                            {
                                int stuid = Convert.ToInt32(arr[2]);
                                db.FeePostOnline(PM.AutoID, (int)Session["SchoolID"], (int)Session["AcaStart"], (int)Session["UID"], Session.SessionID, stuid);
                                //FeeOnlinePaymentDetail PD = db.FeeOnlinePaymentDetails.Where(model => model.SystemTransactionID == PM.AutoID).FirstOrDefault();
                                //SendOnlinePaymentSMS((int)PD.StudentID, PM.AutoID, PM.UserSystemTransactionID, PM.PayForFlag);

                                int autoid = db.FeeOnlineMasters.Where(model => model.StudentID == stuid && model.SystemTransactionID == PM.AutoID).FirstOrDefault().AutoID;

                                objFom = db.FeeOnlineMasters.Find(autoid);
                                objFom.Verify = PM.Verify;
                                objFom.AtomVerify = PM.AtomVerify;
                                objFom.SuccessStatus = PM.SuccessStatus;

                                db.SaveChanges();
                            }
                        }
                        if (PM.PayForFlag != "FeeCollection")
                        {
                            if (PM.AtomVerify == "SUCCESS")
                            {
                                PM.SuccessStatus = "SUCCESSFUL";
                                PM.UserIP = Request.ServerVariables.Get("remote_addr").ToString();
                                string UserID = "";
                                int StudentID;

                                var obj = (from MU in db.MTUserMasters
                                           join FOPM in db.FeeOnlinePaymentMasters on MU.UID equals FOPM.RequestUserID
                                           where MU.UserTypeID == 6 && FOPM.UserSystemTransactionID == PM.UserSystemTransactionID
                                           select new { UID = MU.UserID.Contains("SRN") ? "SRN" : "SR" });
                                UserID = obj.FirstOrDefault().UID;

                                if (UserID == "SR")
                                {
                                    var obj1 = (from MU in db.MTUserMasters
                                                join FOPM in db.FeeOnlinePaymentMasters on MU.UID equals FOPM.RequestUserID
                                                join SM in db.SRStudentMasters on MU.EmployeeIDStudentID equals SM.ARStudentIDs
                                                where MU.UserTypeID == 6 && !MU.UserID.Contains("SRN") && FOPM.UserSystemTransactionID == PM.UserSystemTransactionID
                                                select new { SID = (int)MU.EmployeeIDStudentID });
                                    StudentID = obj1.FirstOrDefault().SID;
                                    SRStudentMaster SRSM = db.SRStudentMasters.Where(model => model.ARStudentIDs == StudentID).FirstOrDefault();
                                    // Not Complete 
                                    SRSM.PayStatus = "Y";
                                    //strQuery.Add("Update SrStudentMaster Set RegFee='S' where ArStudentID=" + StudentID + "");
                                }
                                else if (UserID == "SRN")
                                {
                                    //    StudentID = objCCWeb.ReturnNumericValue("Select EmployeeIDStudentID from MTUsermaster MU " +
                                    //                                  " Inner Join AdmStudentMaster SM on SM.Applicationid=MU.EmployeeIDStudentID " +
                                    //                                  " Inner Join FeeOnlinePaymentMaster FM on FM.RequestUserId=MU.UID " +
                                    //                                  " Where UserTypeID=6 and UserID  like 'SRN%' and  FM.UserSystemTransactionID='" + txtTransactionNo.Text.Trim().Replace("'", "''") + "'");
                                    //    strQuery.Add("Update AdmStudentMaster Set RegFee='S' where Applicationid=" + StudentID + "");
                                }
                            }
                        }
                        db.SaveChanges();
                    }
                }

                return Json("Saved Successfully");
            }
            catch (Exception ex)
            {
                return Json(ex.Message);
            }
        }

        private void SendOnlinePaymentSMS(int StudentID, int AutoID, string trno, string flag)
        {
            string msg = "";
            string pno = "";
            string strPhoneNumber = "";
            if (flag == "FeeCollection")
            {
                string RecNo = (from FAM in db.FEEAccountMasters
                                join FOT in db.FeeOnlineSystemTransactionBillNos on FAM.AutoID equals FOT.BillNo
                                where FOT.SystemTransactionID == AutoID
                                select new { URNO = FAM.URNo }).ToList().FirstOrDefault().URNO.ToString();
                strPhoneNumber = db.SIStudentFatherDetails.Find(StudentID).FMobileNo;
                msg = "Dear Parents, Your transaction with TransactionNo : " + trno + " has been successfull vide Receipt No : " + RecNo + "";

            }
            else
            {
                int AcaStart = (int)Session["AcaStart"];
                int SchoolID = (int)Session["SchoolID"];
                var obj = (from MU in db.MTUserMasters
                           join SM in db.SRStudentMasters on MU.EmployeeIDStudentID equals SM.ARStudentIDs
                           where MU.UserTypeID == 6 && !MU.UserID.Contains("SRN") && SM.AcaStarts == AcaStart && SM.SchoolIDs == SchoolID
                           select new { RefNo = SM.ReferenceNos, UID = MU.UserID, StrNo = SM.StrNums }).ToList().FirstOrDefault();
                pno = db.SIStudentFatherDetails.Find(StudentID).FMobileNo;
                msg = "Dear Parents, Thank you for registering your child. Payment for your Registration No. " + obj.RefNo + " has been received. Your User Id is " + obj.UID + " and Password is " + obj.StrNo + ".";

            }
            strPhoneNumber = strPhoneNumber.Trim().Replace("&nbsp;", "");
            foreach (string PhoneNo in strPhoneNumber.Split(','))
            {
                if (PhoneNo.Trim() != "" && PhoneNo.Trim().Length == 10)
                {
                    pno = "91" + PhoneNo + ",";
                }
            }
            if (pno.Length > 0)
            {
                pno = pno.Remove(strPhoneNumber.Length - 1);
                //SendSMS(msg,pno);
            }
        }
        #endregion

        #region Fee Online Import Settlement
        [HttpGet]
        [Authorize]
        public ActionResult FeeOnlineImportSettlement()
        {
            if (CheckSession()) { return RedirectToAction("Logon", "Logon"); }
            fillPermission();
            return View();
        }

        [HttpPost]
        [Authorize]
        public ActionResult FeeOnlineImportSettlement(HttpPostedFileBase file)
        {
            if (file != null && file.ContentLength > 0)
            {
                string pathname = Path.GetExtension(file.FileName);
                string filename = Path.GetFileName(file.FileName);
                string filepath = Path.Combine(Server.MapPath("~/Temp/"), filename);
                if (System.IO.File.Exists(filepath))
                    System.IO.File.Delete(filepath);
                file.SaveAs(filepath);
                if (System.IO.File.Exists(filepath) == true)
                {
                    OleDbConnection objOleDb = new OleDbConnection();
                    try
                    {
                        if (pathname == ".xls" || pathname == ".xlsx")
                        {
                            //*********** OLEDB Connection String 64 Bit data Provider. 
                            //string sExcelConn = @"Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + filepath + ";Extended Properties=Excel 12.0";
                            string sExcelConn = @"Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + filepath + ";Extended Properties=Excel 8.0";
                            //SqlTransaction SqlTR;
                            //SqlTR
                            objOleDb.ConnectionString = sExcelConn;
                            objOleDb.Open();
                            DataTable dtSheetName = objOleDb.GetOleDbSchemaTable(OleDbSchemaGuid.Tables, null);
                            string sSqlExcel = "Select * from [" + dtSheetName.Rows[0]["TABLE_NAME"].ToString() + "]";
                            //string sSqlExcel = "Select [SNO],[ADMINNO],[STU_NAME],[CLASS],[SEC],[CHQNO],[BANK],[CHQDATE],[AMT]  from [" + dtSheetName.Rows[0]["TABLE_NAME"].ToString() + "]";

                            //************** Create OleDbCommand to fetch data from Excel. 
                            DataSet ds = new DataSet();
                            OleDbCommand ObjDBConn = new OleDbCommand(sSqlExcel, objOleDb);
                            OleDbDataAdapter adp = new OleDbDataAdapter(ObjDBConn);
                            adp.Fill(ds);


                            for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                            {
                                if (ds.Tables[0].Rows[i][0].ToString() == "" || ds.Tables[0].Rows[i][0].ToString() == null)
                                {
                                    ds.Tables[0].Rows.RemoveAt(i);
                                    --i;
                                }
                            }

                            string comment = Request.Form["Comment"];
                            List<string> result = db.FeeOnlineImportSettlementFileUpload(ds.Tables[0], (int)Session["UID"], (int)Session["AcaStart"], (int)Session["SchoolID"], comment, Session.SessionID);
                            if (result.Count > 0)
                            {
                                TempData["Msg"] = result[0];
                            }
                            else
                            {
                                TempData["Msg"] = "Data Not Uploaded Successfully";
                            }
                            ObjDBConn.Dispose();
                        }
                        else
                        {
                            TempData["Msg"] = "File Not Supported, Please upload Excel file as given sample";
                        }
                    }
                    catch (Exception ex)
                    {
                        TempData["Msg"] = ex.Message;
                    }
                    finally
                    {
                        objOleDb.Close();
                    }
                }
                else
                {
                    TempData["Msg"] = "File Not Found";
                }
            }
            return RedirectToAction("FeeOnlineImportSettlement", "Fee", new { parentid = ids[0], menuid = ids[1] });
        }
        #endregion

        #region Fee Online Settlement Detail
        [Authorize]
        public ActionResult FeeOnlineSettlementDetail()
        {
            if (CheckSession()) { return RedirectToAction("Logon", "Logon"); }
            fillPermission();
            List<MTDDLMaster> obj = new List<MTDDLMaster>();
            obj.Add(new MTDDLMaster { DDLID = "0", DDLName = "Select" });
            obj.AddRange(db.FeeOnlinePaymentMasters.Where(model => model.SuccessStatus != "New" && model.SuccessStatus != "" && model.SuccessStatus != null).Select(model => new MTDDLMaster { DDLID = model.SuccessStatus, DDLName = model.SuccessStatus }).Distinct().ToList());
            ViewBag.ddlStatusType = obj;
            return View("FeeOnlineSettlementDetail");
        }
        [Authorize]
        public JsonResult FeeOnlineSettlementDetailRecord(string FromDate, string ToDate)
        {
            CommonResponse CR = new CommonResponse();
            try
            {
                if (CheckSession())
                {
                    CR.Message = "Login Again";
                    return Json(CR);
                }
                fillOnlineSettlementDetailGrid(ref CR, FromDate, ToDate);
                return Json(CR);
            }
            catch (Exception e)
            {
                CR.Message = e.Message;
                return Json(CR);
            }
        }

        private void fillOnlineSettlementDetailGrid(ref CommonResponse CR, string FromDate, string ToDate)
        {
            int acastart = (int)Session["AcaStart"];
            int schoolid = (int)Session["SchoolID"];

            List<object> fcd = db.fillFeeOnlineSettlementDetail(schoolid, acastart, Convert.ToDateTime(FromDate), Convert.ToDateTime(ToDate));
            if (fcd.Count > 0)
            {
                ViewData["GetData"] = fcd;
                object[] obj = new object[1];
                obj[0] = DbCampusContext.RenderPertialViewtoString(this, "_FeeOnlineSettlementDetailGrid");

                CR.Message = "";
                CR.Data = obj;
            }
            else
                CR.Message = "Record not found";
        }

        public string CheckOnlineSettlementDetailAtomStatus(string TransactionNo)
        {
            FeeOnlinePaymentMaster OPM = db.FeeOnlinePaymentMasters.Where(model => model.UserSystemTransactionID == TransactionNo).FirstOrDefault();
            //FEEONLINEPAYMENTCREDENTIALS PayDetail = new FEEONLINEPAYMENTCREDENTIALS();
            //int AccTypeID = 1;
            //int FeePayTypeID = 1;
            //if (OPM.PayForFlag == "FeeCollection")
            //{
            //    //AccTypeID = (from SYD in db.SIStudentYearWiseDetails
            //    //             join FG in db.FEEGroupMasters on SYD.FeeGrpID equals FG.AutoID
            //    //             join FOD in db.FeeOnlinePaymentDetails on SYD.StudID equals FOD.StudentID
            //    //             where FG.AcaStart == CCSession.AcaStart && FOD.SystemTransactionID == OPM.AutoID
            //    //             select new { AccID = FG.AccID }).ToList()[0].AccID;
            //    FeePayTypeID = db.FeeOnlinePaymentMasters.Where(model => model.UserSystemTransactionID == TransactionNo).Select(model => (int)model.PayTypeID).FirstOrDefault();

            //    PayDetail = db.FEEONLINEPAYMENTCREDENTIALSs.Where(model => model.PayForFlag == OPM.PayForFlag && model.AccTypeID == AccTypeID && model.FeePayTypeID == FeePayTypeID).FirstOrDefault();
            //}
      
            //FEEONLINEPAYMENTCREDENTIALS PayDetail = db.FEEONLINEPAYMENTCREDENTIALSs.Where(model => model.PayForFlag == OPM.PayForFlag && model.AccTypeID == AccTypeID && model.FeePayTypeID == FeePayTypeID).FirstOrDefault();
            
            FEEONLINEPAYMENTCREDENTIALS PayDetail = db.FEEONLINEPAYMENTCREDENTIALSs.Where(model => model.PayForFlag == OPM.PayForFlag).FirstOrDefault();

            try
            {
                if (PayDetail != null && OPM != null)
                {
                    if (OPM.AtomTransactionID == "")
                    {
                        return "Required Atom TransactionID";
                    }
                    else
                    {
                        XmlDocument responseXML = new XmlDocument();
                        string AtomSettleURL = PayDetail.SettlementURL;
                        string MerchantID = PayDetail.MerchantLoginID;
                        string Discriminator = "", CardNumber = "";
                        string strBanktransactionID = "", strBankName = "", ReconStatus = "", SettlementDate = "";
                        string strDate = Convert.ToDateTime(OPM.RequestTime, cinfo).Date.ToString("yyyy-MM-dd");

                        string ReqURL = AtomSettleURL + "?merchantid=" + MerchantID + "&merchanttxnid=" + OPM.UserSystemTransactionID + "&amt=" + OPM.PayAmt + "&tdate=" + strDate + "&atomtxnid=" + OPM.AtomTransactionID + "";

                        System.Net.ServicePointManager.ServerCertificateValidationCallback = delegate(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors) { return true; };
                        ServicePointManager.Expect100Continue = true;
                        ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;

                        HttpWebRequest myWebReq = (HttpWebRequest)WebRequest.Create(ReqURL);
                        HttpWebResponse myWebRes = (HttpWebResponse)myWebReq.GetResponse();
                        StreamReader myWebReqResStreamReader = new StreamReader(myWebRes.GetResponseStream());
                        string responseXMLString = myWebReqResStreamReader.ReadToEnd();

                        // string responseXMLString = "<?xml version=\"1.0\" encoding=\"UTF-8\" ?><VerifyOutput MerchantID=\"670\" MerchantTxnID=\"382720401151649\" AMT=\"18837.00\" VERIFIED=\"SUCCESS\" BID=\"0701927753\" bankname=\"ICICI Bank\" atomtxnId=\"6277944\" discriminator=\"NB\" surcharge=\"33.71\" CardNumber=\"\" ReconStatus=\"RS\" SettlementDate=\"2016-12-01\" />";

                        XmlNodeList responseXMLNode;

                        responseXML.LoadXml(responseXMLString);
                        // TO PICK url VALUES FROM THE RESPONSE XML
                        responseXMLNode = responseXML.SelectNodes("VerifyOutput");
                        string strStatus = "";
                        foreach (XmlNode urlStringValues in responseXMLNode)
                        {
                            for (int i = 0; i < urlStringValues.Attributes.Count; i++)
                            {
                                if (urlStringValues.Attributes[i].Name == "VERIFIED")
                                    strStatus = urlStringValues.Attributes[i].Value.ToString();
                                else if (urlStringValues.Attributes[i].Name == "BID")
                                    strBanktransactionID = urlStringValues.Attributes[i].Value.ToString();
                                else if (urlStringValues.Attributes[i].Name == "bankname")
                                    strBankName = urlStringValues.Attributes[i].Value.ToString();
                                else if (urlStringValues.Attributes[i].Name == "discriminator")
                                    Discriminator = urlStringValues.Attributes[i].Value.ToString();
                                else if (urlStringValues.Attributes[i].Name == "CardNumber")
                                    CardNumber = urlStringValues.Attributes[i].Value.ToString();
                                else if (urlStringValues.Attributes[i].Name == "ReconStatus")
                                    ReconStatus = urlStringValues.Attributes[i].Value.ToString();
                                else if (urlStringValues.Attributes[i].Name == "SettlementDate")
                                    SettlementDate = urlStringValues.Attributes[i].Value.ToString();
                            }
                        }
                        FeeOnlineSettlementMasterTemp FSMT = new FeeOnlineSettlementMasterTemp();
                        if (ReconStatus == "null")
                        {
                            DateTime strDate1 = Convert.ToDateTime(OPM.RequestTime, cinfo).Date;
                            DateTime FDate = strDate1.AddDays(1);
                            string FinalDate = Convert.ToDateTime(FDate, cinfo).Date.ToString("yyyy-MM-dd");

                            ReqURL = AtomSettleURL + "?merchantid=" + MerchantID + "&merchanttxnid=" + OPM.UserSystemTransactionID + "&amt=" + OPM.PayAmt + "&tdate=" + FinalDate + "&atomtxnid=" + OPM.AtomTransactionID + "";

                            System.Net.ServicePointManager.ServerCertificateValidationCallback = delegate(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors) { return true; };
                            ServicePointManager.Expect100Continue = true;
                            ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;

                            myWebReq = (HttpWebRequest)WebRequest.Create(ReqURL);
                            myWebRes = (HttpWebResponse)myWebReq.GetResponse();
                            myWebReqResStreamReader = new StreamReader(myWebRes.GetResponseStream());
                            responseXMLString = myWebReqResStreamReader.ReadToEnd();

                            //responseXMLString = "<?xml version=\"1.0\" encoding=\"UTF-8\" ?><VerifyOutput MerchantID=\"670\" MerchantTxnID=\"382720401151649\" AMT=\"18837.00\" VERIFIED=\"SUCCESS\" BID=\"0701927753\" bankname=\"ICICI Bank\" atomtxnId=\"6277944\" discriminator=\"NB\" surcharge=\"33.71\" CardNumber=\"\" ReconStatus=\"RS\" SettlementDate=\"2016-12-01\" />";
                            //responseXMLString = "<?xml version=\"1.0\" encoding=\"UTF-8\" ?><VerifyOutput MerchantID=\"670\" MerchantTxnID=\"382720401151649\" AMT=\"18837.00\" VERIFIED=\"NODATA\" BID=\"null\" bankname=\"null\" atomtxnId=\"null\" discriminator=\"null\" surcharge=\"null\" CardNumber=\"\" ReconStatus=\"null\" SettlementDate=\"null\" />";


                            responseXML.LoadXml(responseXMLString);
                            // TO PICK url VALUES FROM THE RESPONSE XML
                            responseXMLNode = responseXML.SelectNodes("VerifyOutput");

                            foreach (XmlNode urlStringValues in responseXMLNode)
                            {
                                for (int i = 0; i < urlStringValues.Attributes.Count; i++)
                                {
                                    if (urlStringValues.Attributes[i].Name == "VERIFIED")
                                        strStatus = urlStringValues.Attributes[i].Value.ToString();
                                    else if (urlStringValues.Attributes[i].Name == "BID")
                                        strBanktransactionID = urlStringValues.Attributes[i].Value.ToString();
                                    else if (urlStringValues.Attributes[i].Name == "bankname")
                                        strBankName = urlStringValues.Attributes[i].Value.ToString();
                                    else if (urlStringValues.Attributes[i].Name == "discriminator")
                                        Discriminator = urlStringValues.Attributes[i].Value.ToString();
                                    else if (urlStringValues.Attributes[i].Name == "CardNumber")
                                        CardNumber = urlStringValues.Attributes[i].Value.ToString();
                                    else if (urlStringValues.Attributes[i].Name == "ReconStatus")
                                        ReconStatus = urlStringValues.Attributes[i].Value.ToString();
                                    else if (urlStringValues.Attributes[i].Name == "SettlementDate")
                                        SettlementDate = urlStringValues.Attributes[i].Value.ToString();
                                }
                            }
                        }
                        if (ReconStatus == "RS")
                        {
                            FSMT.AtomTransactionID = OPM.AtomTransactionID;
                            FSMT.RequestTime = OPM.RequestTime;
                            FSMT.UserSystemTransactionID = OPM.UserSystemTransactionID;
                            FSMT.AmtPaid = OPM.PayAmt;
                            FSMT.PaymentStatus = "PAYMENT GIVEN";
                            FSMT.SettlementDate = Convert.ToDateTime(SettlementDate, cinfo);
                            FSMT.SchoolID = OPM.SchoolID;
                            FSMT.AcaStart = OPM.AcaStart;
                        }
                        else
                        {
                            FSMT.AtomTransactionID = OPM.AtomTransactionID;
                            FSMT.RequestTime = OPM.RequestTime;
                            FSMT.UserSystemTransactionID = OPM.UserSystemTransactionID;
                            FSMT.AmtPaid = OPM.PayAmt;
                            FSMT.PaymentStatus = "PENDING";
                            FSMT.SchoolID = OPM.SchoolID;
                            FSMT.AcaStart = OPM.AcaStart;
                        }
                        db.FeeOnlineSettlementMasterTemps.Add(FSMT);
                        db.SaveChanges();

                        //CR.Message = "Saved Successfully";
                        return strStatus;
                    }
                }
                else
                    return "";
            }
            catch (Exception ex)
            {
                return ex.Message.ToString();
            }
        }

        public JsonResult FeeOnlineSettlementDetailGenrate(string[] TransactionNo, string FromDate, string ToDate)
        {
            CommonResponse CR = new CommonResponse();
            try
            {
                if (CheckSession())
                {
                    CR.Message = "Login Again";
                    return Json(CR);
                }
                foreach (string trn in TransactionNo)
                {
                    FeeOnlineSettlementMasterTemp FSMT = db.FeeOnlineSettlementMasterTemps.Where(model => model.UserSystemTransactionID == trn && model.PaymentStatus == "PAYMENT GIVEN").FirstOrDefault();
                    if (FSMT == null)
                    {
                        if (db.FeeOnlineSettlementMasterTemps.Where(model => model.UserSystemTransactionID == trn && model.PaymentStatus == "PENDING").Count() > 0)
                        {
                            db.FeeOnlineSettlementMasterTemps.RemoveRange(db.FeeOnlineSettlementMasterTemps.Where(model => model.UserSystemTransactionID == trn && model.PaymentStatus == "PENDING"));
                            db.SaveChanges();
                        }
                        CheckOnlineSettlementDetailAtomStatus(trn);
                    }
                }

                fillOnlineSettlementDetailGrid(ref CR, FromDate, ToDate);
                CR.Message = "Generated Sucessfully";
                return Json(CR);
            }
            catch (Exception ex)
            {
                CR.Message = ex.Message;
                return Json(CR);
            }
        }

        public JsonResult FeeOnlineSettlementDetailSave(string[] TransactionNo, encodeshdata trdata)
        {
            CommonResponse CR = new CommonResponse();
            try
            {
                trdata.actualdata = "[" + "\"" + string.Join("\",\"", TransactionNo) + "\"]";
                if (RequestAuthentication(trdata) == false)
                {
                    return Json("Login Again");
                }
                if (CheckSession())
                {
                    return Json("Login Again");
                }
                foreach (string trno in TransactionNo)
                {
                    string[] arr = trno.Split('^');
                    if (arr.Length > 0)
                    {
                        string UserSystemTransactionID = arr[0];
                        int StudID = Convert.ToInt32(arr[2]);
                        decimal paidAmt = 0;
                        FeeOnlineSettlementMasterTemp FSMT = db.FeeOnlineSettlementMasterTemps.Where(model => model.UserSystemTransactionID == UserSystemTransactionID).FirstOrDefault();
                        FeeOnlinePaymentMaster OPM = db.FeeOnlinePaymentMasters.Where(model => model.UserSystemTransactionID == UserSystemTransactionID).FirstOrDefault();

                        if (OPM.PayForFlag == "FeeCollection")
                        {
                            paidAmt = db.FeeOnlineMasters.Where(model => model.StudentID == StudID && model.SystemTransactionID == OPM.AutoID).FirstOrDefault().Amount;
                        }
                        else
                        {
                            paidAmt = Convert.ToDecimal(OPM.PayAmt);
                        }
                        if (FSMT != null)
                        {
                            if (arr[1] == "1")
                            {
                                FeeOnlineSettlementMaster FSM = new FeeOnlineSettlementMaster();
                                FSM.AtomTransactionID = FSMT.AtomTransactionID;
                                FSM.RequestTime = FSMT.RequestTime;
                                FSM.UserSystemTransactionID = FSMT.UserSystemTransactionID;
                                FSM.AmtPaid = paidAmt;
                                FSM.PaymentStatus = FSMT.PaymentStatus;
                                FSM.SettlementDate = FSMT.SettlementDate;
                                FSM.SchoolID = FSMT.SchoolID;
                                FSM.AcaStart = FSMT.AcaStart;
                                FSM.StudentID = StudID;
                                db.FeeOnlineSettlementMasters.Add(FSM);
                                db.SaveChanges();
                            }
                        }
                    }
                }

                return Json("Saved Successfully");
            }
            catch (Exception ex)
            {
                return Json(ex.Message);
            }
        }

        #endregion

        #region Fee Paymode Change
        [Authorize]
        public ActionResult FeePaymodeChange()
        {
            if (CheckSession()) { return RedirectToAction("Logon", "Logon"); }
            fillPermission();
            return View("FeePaymodeChange");
        }
        [Authorize]
        public JsonResult FeePaymodeChangeRecord(int StdID, string type, string page = "")
        {
            CommonResponse CR = new CommonResponse();
            try
            {
                if (CheckSession())
                {
                    CR.Message = "Login Again";
                    return Json(CR);
                }

                int acastart = (int)Session["AcaStart"];
                int schoolid = (int)Session["SchoolID"];

                ViewData["GetData"] = db.FeeReceiptDetail_ForChqOnly(schoolid, acastart, StdID);
                ViewData["Type"] = type;

                object[] obj = new object[1];
                obj[0] = DbCampusContext.RenderPertialViewtoString(this, "_FeePaymodeChangeGrid");

                CR.Message = "";
                CR.Data = obj;

                return Json(CR);
            }
            catch (Exception e)
            {
                CR.Message = e.Message;
                return Json(CR);
            }
        }
        [Authorize]
        public JsonResult PaymodeChange(int? id)
        {
            CommonResponse CR = new CommonResponse();
            try
            {
                if (CheckSession())
                {
                    CR.Message = "Login Again";
                    return Json(CR);
                }
                FEEAccountMaster FAM = db.FEEAccountMasters.Find(id);

                FeePayModeChanged FPC = new FeePayModeChanged();

                if (ModelState.IsValid == true)
                {
                    int acastart = (int)Session["AcaStart"];
                    int schoolID = (int)Session["SchoolID"];
                    var RDate = Convert.ToDateTime(FAM.RDate, cinfo);
                    int UID = Convert.ToInt32(Session["UID"]);
                    string UserIP = Request.ServerVariables.Get("remote_addr").ToString();
                    SIStudentYearWiseDetail SYD = db.SIStudentYearWiseDetails.Where(model => model.StudID == FAM.StdID && model.AcaStarting == acastart && model.SchID == schoolID).ToList()[0];
                    List<FEEAccountDetail> FD = db.FEEAccountDetails.Where(model => model.BLNo == id).ToList();
                    foreach (var item in FD)
                    {
                        item.PMID = 8;
                    }
                    FPC.BillNo = id;
                    FPC.Remark = "Fee Paymode Changed, Receipt No=" + FAM.URNo + ",ReceiptDate=" + FAM.RDate + ",Fee No=" + SYD.FeesNo + ",User ID =" + UID + ",User IP =" + UserIP + "";
                    FAM.UpdateUserID = Convert.ToInt32(Session["UID"]);
                    FAM.UpdateDate = DateTime.Now;
                    db.FeePayModeChangeds.Add(FPC);
                    fillUserUpdateDetails("Fee Paymode Changed, Receipt No=" + FAM.URNo + ",ReceiptDate=" + FAM.RDate + ",Fee No=" + SYD.FeesNo + "");
                    db.SaveChanges();
                    CR.Message = "Changed Successfully";

                    ViewData["GetData"] = db.FeeReceiptDetail_ForChqOnly(schoolID, acastart, SYD.StudID);
                    ViewData["Type"] = "ForChqOnly";

                    object[] obj = new object[1];
                    obj[0] = DbCampusContext.RenderPertialViewtoString(this, "_FeePaymodeChangeGrid");

                    CR.Data = obj;
                    return Json(CR);
                }


                else
                {
                    return Json(CR);
                }

            }
            catch (Exception ex)
            {
                CR.Message = ex.Message;
                return Json(CR);
            }
        }

        #endregion

        #region Excess Remittance
        [Authorize]
        public ActionResult ExcessRemittance()
        {
            if (CheckSession()) { return RedirectToAction("Logon", "Logon"); }
            fillPermission();
            ViewBag.ddlPaymode = db.FeePayModeMasters.Where(model => model.AutoID != 8).OrderBy(model => model.AutoID).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.PayModeName }).ToList();
            return View();
        }
        [Authorize]
        public JsonResult FeeGetExcessAmount(int SID)
        {
            CommonResponse CR = new CommonResponse();
            try
            {
                int acastart = (int)Session["AcaStart"];


                ViewData["ExcessDetails"] = (from newobj in
                                                 (from final in
                                                      (from fam in db.FEEAccountMasters
                                                       join fad in db.FEEAccountDetails on fam.AutoID equals fad.BLNo
                                                       join fim in db.FEEInstallmentMasters on fad.FIID equals fim.AutoID
                                                       join fae in
                                                           (from faa in db.FeeAccountExcesss
                                                            join fad in db.FEEAccountDetails on faa.BillNo equals fad.BLNo
                                                            where faa.RTFHID == 2 && fad.ChqBounce == false
                                                            group faa by new { faa.RTBNo } into grp
                                                            select new { Amount = grp.Distinct().Sum(model => model.ExcAmt), RelToBillNo = grp.Key.RTBNo }) on fam.AutoID equals fae.RelToBillNo into newgrp
                                                       from lj in newgrp.DefaultIfEmpty()
                                                       where fad.ChqBounce == false && fad.FHeadID == 2 && (fad.Type == 0 || fad.Type == 3) && fam.StdID == SID
                                                       && fam.Cancel == false && fam.AcaStart == acastart
                                                       select new { fam.AutoID, fam.URNo, fad.FIID, fim.FIName, ExcessAmt = fad.Amount, ExcessAdjstAmt = lj.Amount })
                                                  group final by new { final.AutoID, final.URNo, final.FIID, final.FIName } into grp2
                                                  select new
                                                  {
                                                      BillNo = grp2.Key.AutoID,
                                                      URNo = grp2.Key.URNo,
                                                      InstallmentID = grp2.Key.FIID,
                                                      InstallmentName = grp2.Key.FIName
                                                      ,
                                                      ExcessAmt = grp2.Sum(model => model.ExcessAmt),
                                                      ExcessAdjtAmt = grp2.Sum(model => model.ExcessAdjstAmt)
                                                  })
                                             where (newobj.ExcessAmt == null ? 0 : newobj.ExcessAmt) - (newobj.ExcessAdjtAmt == null ? 0 : newobj.ExcessAdjtAmt) > 0
                                             select new ExcessAmountRemittance()
                                             {
                                                 BillNo = newobj.BillNo,
                                                 InstallmentID = newobj.InstallmentID,
                                                 InstallmentName = newobj.InstallmentName,
                                                 Amount = ((newobj.ExcessAmt == null ? 0 : (int)newobj.ExcessAmt) - (newobj.ExcessAdjtAmt == null ? 0 : (int)newobj.ExcessAdjtAmt))
                                             }).Distinct().ToList();

                object[] obj = new object[1];
                obj[0] = DbCampusContext.RenderPertialViewtoString(this, "_ExcessRemittanceGrid"); ;
                CR.Message = "";
                CR.Data = obj;
                return Json(CR);
            }
            catch (Exception e)
            {
                CR.Message = e.Message;
                return Json(CR);
            }
        }
        [Authorize]
        public JsonResult ExcessRemittanceSave(string StudDetail, string[] ExcessAmount, encodeshdata trdata)
        {
            try
            {
                trdata.actualdata = StudDetail;
                //if (RequestAuthentication(trdata) == false)
                //{
                //    return Json("Login Again");
                //}
                if (CheckSession())
                {
                    return Json("Login Again");
                }
                FEEAccountMaster FAM = new FEEAccountMaster();
                List<FEEAccountDetail> ListFAD = new List<FEEAccountDetail>();
                FeeAccountBank FAB = new FeeAccountBank();
                string[] StudentDetails = StudDetail.Split('#');

                if (ModelState.IsValid)
                {
                    using (TransactionScope transaction = new TransactionScope())
                    {
                        int acastart = (int)Session["AcaStart"];
                        int schoolid = (int)Session["SchoolID"];
                        string Installments = string.Empty;
                        int BLNo = (db.FEEAccountMasters.Max(model => (int?)model.AutoID) ?? 0) + 1;
                        FAM.AutoID = BLNo;
                        FAM.RNo = (db.FEEAccountMasters.Where(model => model.AcaStart == acastart && model.SchoolID == schoolid).Max(model => (int?)model.RNo) ?? 0) + 1;
                        FAM.URNo = (db.FEEAccountMasters.Where(model => model.AcaStart == acastart && model.SchoolID == schoolid && model.Cancel == false).Max(model => (int?)model.URNo) ?? 0) + 1;
                        FAM.InstType = (Int16)0;
                        FAM.DBankID = 1;
                        FAM.StdID = Convert.ToInt32(StudentDetails[0]);
                        FAM.Remark = StudentDetails[5];
                        FAM.Cancel = false;
                        FAM.FPTypeID = Convert.ToInt32(StudentDetails[1]);
                        FAM.RDate = Convert.ToDateTime(StudentDetails[6], cinfo);
                        FAM.EntryUserID = (int)Session["UID"];
                        FAM.EntryDate = DateTime.Now;
                        FAM.AcaStart = acastart;
                        FAM.SchoolID = schoolid;
                        db.FEEAccountMasters.Add(FAM);
                        db.SaveChanges();
                        int FBID = (db.FeeAccountBanks.Max(model => (int?)model.AutoID) + 1 ?? 0);
                        if (Convert.ToInt32(StudentDetails[7]) != 1)
                        {
                            FAB.AutoID = FBID;
                            FAB.BLNo = BLNo;
                            FAB.BankID = Convert.ToInt32(StudentDetails[4]);
                            FAB.ChqNo = StudentDetails[2];
                            FAB.ChqDate = Convert.ToDateTime(StudentDetails[3], cinfo);
                            FAB.Status = false;
                            FAB.ChBouID = null;
                            FAB.CBDate = null;
                            db.FeeAccountBanks.Add(FAB);
                            db.SaveChanges();
                        }


                        foreach (string fd in ExcessAmount)
                        {
                            FEEAccountDetail FAD = new FEEAccountDetail();
                            FAD.BLNo = BLNo;
                            FAD.FHeadID = 2;
                            FAD.FIID = Convert.ToInt32(fd.Split('#')[1]);
                            FAD.PMID = Convert.ToInt32(fd.Split('#')[3]);
                            FAD.ChqBounce = false;
                            FAD.Amount = 0;
                            FAD.ConAmount = Convert.ToInt32(fd.Split('#')[2]);
                            FAD.Type = (Int16)2;
                            if (Convert.ToInt32(fd.Split('#')[3]) != 1)
                                FAD.FBID = FBID;
                            else
                                FAD.FBID = 0;
                            db.FEEAccountDetails.Add(FAD);
                            Installments = Installments + "," + FAD.FIID;
                        }

                        FeeAccountExcess FAE;
                        foreach (string EAA in ExcessAmount)
                        {
                            FAE = new FeeAccountExcess();
                            FAE.BillNo = BLNo;
                            FAE.RTBNo = Convert.ToInt32(EAA.Split('#')[0]);
                            FAE.RTFHID = 2;
                            FAE.ExcAmt = Convert.ToInt32(EAA.Split('#')[2]);
                            db.FeeAccountExcesss.Add(FAE);
                        }


                        fillUserUpdateDetails("Fee Refund for BillNo=" + FAM.AutoID + ",StudentID=" + FAM.StdID + ",FeeInstallmentID=" + Installments.Substring(1, Installments.Length - 1) + "");
                        db.SaveChanges();
                        transaction.Complete();
                        return Json("Refund Successfully");
                    }
                }
                else
                {
                    return Json(ModelState.Values.SelectMany(model => model.Errors).ToList()[0].ErrorMessage);
                }
            }
            catch (Exception ex)
            {
                return Json(ex.Message);
            }
        }

        #endregion

        #region Fee FA Setting
        [Authorize]
        public ActionResult FeeFASetting()
        {
            if (CheckSession()) { return RedirectToAction("Logon", "Logon"); }
            fillPermission();
            fillFASettingGridData(0, 0, 0);
            return View();
        }
        [Authorize]
        public JsonResult fillFASettingGridData(int FEEAccID, int PayModeID, int DBankID)
        {
            CommonResponse CR = new CommonResponse();
            try
            {
                if (CheckSession())
                {
                    CR.Message = "Login Again";
                    return Json(CR);
                }
                int acastart = (int)Session["AcaStart"];
                int schoolid = (int)Session["SchoolID"];
                DataSet ds = db.FeeFALedgerSetting(FEEAccID, acastart, schoolid, PayModeID, DBankID);
                var FeeSetting = (from FeeSet in ds.Tables[0].Select().ToList()
                                  select new FeeFATransferGrid()
                                  {
                                      SlNo = (int)FeeSet.ItemArray.GetValue(0),
                                      FeeHeadID = (int?)FeeSet.ItemArray.GetValue(2),
                                      FeeHeadName = FeeSet.ItemArray.GetValue(3).ToString(),
                                      FAGroupCompanyID = (int?)FeeSet.ItemArray.GetValue(4),
                                      GCompanyName = FeeSet.ItemArray.GetValue(5).ToString(),
                                      FACompanyID = (int?)FeeSet.ItemArray.GetValue(6),
                                      CompanyName = FeeSet.ItemArray.GetValue(7).ToString(),
                                      FAGLID = (int?)FeeSet.ItemArray.GetValue(8),
                                      GLName = FeeSet.ItemArray.GetValue(9).ToString(),
                                      FASLID = (int?)FeeSet.ItemArray.GetValue(10),
                                      SLName = FeeSet.ItemArray.GetValue(11).ToString(),
                                      FASLBID = (int?)FeeSet.ItemArray.GetValue(12),
                                      BSLName = FeeSet.ItemArray.GetValue(13).ToString(),
                                      AutoID = (int)FeeSet.ItemArray.GetValue(14)
                                  }).ToList();
                ViewData["FeeSetting"] = FeeSetting;

                object[] obj = new object[1];

                obj[0] = DbCampusContext.RenderPertialViewtoString(this, "_FeeFASettingGrid").Replace("fillFASettingGridData?", "FeeFASetting?parentid=" + ids[0] + "&amp;menuid=" + ids[1] + "&amp;");
                CR.Message = "";
                CR.Data = obj;
                return Json(CR);
            }
            catch (Exception e)
            {
                CR.Message = e.Message;
                return Json(CR);
            }
        }
        [Authorize]
        public JsonResult FeeFASettingSave(string[] AccSel, string[] LedgerData)
        {
            CommonResponse CR = new CommonResponse();
            try
            {
                if (CheckSession())
                {
                    CR.Message = "Login Again";
                    return Json(CR);
                }
                int intSchoolid = (int)Session["SchoolID"];
                int intAcaStart = (int)Session["AcaStart"];
                int FeeAccID = Convert.ToInt32(AccSel[0].Split('^')[0]);
                int PayModeID = Convert.ToInt32(AccSel[0].Split('^')[1]);
                int DBankID = Convert.ToInt32(AccSel[0].Split('^')[2]);
                int intUserID = Convert.ToInt32(Session["UID"]);
                db.FeeFATransferSettings.RemoveRange(db.FeeFATransferSettings.Where(model => model.AcaStart == intAcaStart && model.SchoolID == intSchoolid && model.FeeAccID == FeeAccID && model.PayModeID == PayModeID).ToList());
                FeeFATransferSetting FFT;
                int intAutoID;
                int intRow = 0;
                foreach (string LD in LedgerData)
                {
                    FFT = new FeeFATransferSetting();
                    if (Convert.ToInt32(LD.Split('^')[0]) == 0)
                    {
                        intAutoID = (db.FeeFATransferSettings.Max(model => (int?)model.AutoID) ?? 0) + 1;
                        intAutoID = intAutoID + intRow;
                        intRow++;
                    }
                    else
                    {
                        intAutoID = Convert.ToInt32(LD.Split('^')[0]);
                    }
                    FFT.AutoID = intAutoID;
                    FFT.FeeAccID = FeeAccID;
                    FFT.PayModeID = PayModeID;
                    FFT.DBankID = DBankID;
                    FFT.FeeHeadID = Convert.ToInt32(LD.Split('^')[1]);
                    FFT.FAGroupCompanyID = Convert.ToInt32(LD.Split('^')[2]);
                    FFT.FACompanyID = Convert.ToInt32(LD.Split('^')[3]);
                    FFT.FAGLID = Convert.ToInt32(LD.Split('^')[4]);
                    FFT.FASLID = Convert.ToInt32(LD.Split('^')[5]);
                    FFT.FASLBID = Convert.ToInt32(LD.Split('^')[6]);
                    FFT.AcaStart = intAcaStart;
                    FFT.SchoolID = intSchoolid;
                    FFT.EntryUserID = intUserID;
                    FFT.EntryDate = DateTime.Now;
                    db.FeeFATransferSettings.Add(FFT);
                }
                fillUserUpdateDetails("Fee FA Setting is Saved for A/c ID " + FeeAccID + " of PayModeID " + PayModeID + "");
                db.SaveChanges();
                CR.Message = "Saved Successfully";
                return Json(CR);

            }
            catch (Exception ex)
            {
                CR.Message = ex.Message;
                return Json(CR);
            }
        }

        #endregion

        #region Fee Concession Mapping

        public ActionResult FeeConcessionMapping()
        {
            if (CheckSession()) { return RedirectToAction("Logon", "Logon"); }
            fillPermission();
            int intSchoolid = (int)Session["SchoolID"];
            int intAcaStart = (int)Session["AcaStart"];
            ViewBag.ddlConcessionType = db.FEEConcessionTypeMasters.OrderBy(model => model.AutoID).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.CTypeName }).ToList();
            FillFeeConcessionMapping(0, 0);
            //    ViewBag.FeeConcessionMapping = db.FeeConcessionMapping(intSchoolid, intAcaStart,0,0).Tables[0]; 
            return View("FeeConcessionMapping");
        }

        public JsonResult FillFeeConcessionMapping(int ClassID, int SectionID)
        {
            CommonResponse CR = new CommonResponse();
            if (CheckSession())
            {
                CR.Message = "Login Again";
                return Json(CR);
            }
            int intSchoolid = (int)Session["SchoolID"];
            int intAcaStart = (int)Session["AcaStart"];

            DataSet ds = db.FeeConcessionMapping(intSchoolid, intAcaStart, ClassID, SectionID);
            var FeeConData = (from FeeData in ds.Tables[0].Select().ToList()
                              select new FeeConcessionMapping()
                              {
                                  SlNo = (int)FeeData.ItemArray.GetValue(0),
                                  StudentID = (int)FeeData.ItemArray.GetValue(1),
                                  AdmissionNo = FeeData.ItemArray.GetValue(2).ToString(),
                                  FeeNo = FeeData.ItemArray.GetValue(3).ToString(),
                                  Name = FeeData.ItemArray.GetValue(4).ToString(),
                                  CurConcessionID = (int)FeeData.ItemArray.GetValue(5),
                                  CurConcessionName = FeeData.ItemArray.GetValue(6).ToString()
                              }).ToList();

            ViewData["FeeConcessionMapping"] = FeeConData;
            CR.Message = "";
            return Json(CR);
        }

        public JsonResult BindFeeConcessionMapping(int ClassID, int SectionID)
        {
            CommonResponse CR = new CommonResponse();
            try
            {
                if (CheckSession())
                {
                    CR.Message = "Login Again";
                    return Json(CR);
                }

                FillFeeConcessionMapping(ClassID, SectionID);
                CR.Message = "";
                object[] obj = new object[2];
                ViewBag.ddlConcessionType = db.FEEConcessionTypeMasters.OrderBy(model => model.AutoID).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.CTypeName }).ToList();

                obj[0] = DbCampusContext.RenderPertialViewtoString(this, "_FeeConcessionMapGrid").Replace("BindFeeConcessionMapping?", "FeeConcessionMapping?parentid=" + ids[0] + "&amp;menuid=" + ids[1] + "&amp;");
                CR.Data = obj;

                return Json(CR);
            }
            catch (Exception ex)
            {
                CR.Message = ex.Message;
                return Json(CR);
            }
        }

        public JsonResult SaveFeeConcessionMapping(string[] FeeConcession, encodeshdata trdata)
        {
            CommonResponse CR = new CommonResponse();
            using (TransactionScope transaction = new TransactionScope())
            {
                try
                {
                    trdata.actualdata = "[" + "\"" + string.Join("\",\"", FeeConcession) + "\"]";
                    if (RequestAuthentication(trdata) == false)
                    {
                        CR.Message = "Login Again";
                        return Json(CR);
                    }
                    if (CheckSession())
                    {
                        CR.Message = "Login Again";
                        return Json(CR);
                    }
                    int Acastart = Convert.ToInt32(Session["AcaStart"]);
                    int SchoolID = Convert.ToInt32(Session["SchoolID"]);

                    foreach (string item in FeeConcession)
                    {
                        db.StudentInsertFeeConcessionEntry(Convert.ToInt32(SchoolID), Convert.ToInt32(Acastart), Convert.ToInt32(item.Split('^')[0]), Convert.ToInt32(item.Split('^')[1]), (int)Session["UID"]);
                        fillUserUpdateDetails("Fee Concession  Assigned for StudentID=" + Convert.ToInt32(item.Split('^')[0]) + ",ConcessionTypeID=" + Convert.ToInt32(item.Split('^')[1]) + " ");
                        db.SaveChanges();
                        CR.Message = "Saved Successfully";
                    }

                    transaction.Complete();
                    return Json(CR);
                }
                catch (Exception ex)
                {
                    CR.Message = ex.Message;
                    transaction.Dispose();
                    return Json(CR);
                }

            }
        }

        #endregion
        private void fillUserUpdateDetails(string msg)
        {
            UserUpdateDetails uud = new UserUpdateDetails();
            uud.UID = Convert.ToInt32(Session["UID"]);
            uud.SessionID = Session.SessionID;
            uud.UpdateDate = DateTime.Now;
            uud.FormName = ids[2];
            uud.Details = msg;
            db.UserUpdateDetailss.Add(uud);
        }

        private List<FeeInstallmentType> fillFeeInstallmentType()
        {
            List<FeeInstallmentType> ddlType = new List<FeeInstallmentType>();
            FeeInstallmentType obj = new FeeInstallmentType();
            obj.FeeInstallmentTypeID = 0;
            obj.FeeInstallmentName = "Installment";
            ddlType.Add(obj);
            obj = new FeeInstallmentType();
            obj.FeeInstallmentTypeID = 1;
            obj.FeeInstallmentName = "Annual";
            ddlType.Add(obj);
            obj = new FeeInstallmentType();
            obj.FeeInstallmentTypeID = 2;
            obj.FeeInstallmentName = "Lifetime";
            ddlType.Add(obj);
            return ddlType;
        }

        private List<MTDDLMaster> fillFineType()
        {
            List<MTDDLMaster> ddlType = new List<MTDDLMaster>();
            MTDDLMaster obj = new MTDDLMaster();
            obj.DDLID = "0";
            obj.DDLName = "";
            ddlType.Add(obj);
            obj = new MTDDLMaster();
            obj.DDLID = "1";
            obj.DDLName = "Day";
            ddlType.Add(obj);
            obj = new MTDDLMaster();
            obj.DDLID = "2";
            obj.DDLName = "Month";
            ddlType.Add(obj);
            obj = new MTDDLMaster();
            obj.DDLID = "3";
            obj.DDLName = "Once";
            ddlType.Add(obj);
            obj = new MTDDLMaster();
            obj.DDLID = "4";
            obj.DDLName = "Limit";
            ddlType.Add(obj);
            return ddlType;
        }
        [Authorize]
        public JsonResult FeeStudentDetails(string ArgValue, string ArgType)
        {
            CommonResponse CR = new CommonResponse();
            try
            {
                if (CheckSession())
                {
                    CR.Message = "Login Again";
                    return Json(CR);
                }

                int acastart = (int)Session["AcaStart"];
                int schoolid = (int)Session["SchoolID"];
                List<FeeStudentDetails> FSD = db.FeeStudentDetails(acastart, schoolid, ArgValue, ArgType);
                if (FSD.Count() > 0)
                {
                    CR.Message = "";
                    FeeStudentDetails Stdobj = FSD[0];
                    object[] obj = new object[1];
                    obj[0] = Stdobj;
                    CR.Data = obj;
                    return Json(CR);
                }
                else
                {
                    CR.Message = "Student not found";
                    return Json(CR);
                }
            }
            catch (Exception e)
            {
                CR.Message = e.Message;
                return Json(CR);
            }
        }
        [Authorize]
        public JsonResult TransactionDetails(string TransactionID)
        {
            CommonResponse CR = new CommonResponse();
            try
            {
                if (CheckSession())
                {
                    CR.Message = "Login Again";
                    return Json(CR);

                }
                int acastart = (int)Session["AcaStart"];
                int schoolid = (int)Session["SchoolID"];
                List<object> OTD = db.OnlineTransactionDetail(acastart, schoolid, TransactionID);
                if (OTD.Count > 0)
                {
                    ViewData["GetData"] = OTD;
                    object[] obj = new object[1];
                    obj[0] = DbCampusContext.RenderPertialViewtoString(this, "_OnlineTransactionDetail");

                    CR.Message = "";
                    CR.Data = obj;
                }
                //else
                //    CR.Message = "No Payment Found";

                return Json(CR);
            }
            catch (Exception e)
            {
                CR.Message = e.Message;
                return Json(CR);
            }
        }

        private bool finformula(ReportDocument rd, string name)
        {
            for (int i = 0; i < rd.DataDefinition.FormulaFields.Count; i++)
                if (rd.DataDefinition.FormulaFields[i].Name == name) return true;
            return false;
        }
    }
}using CampusCare.Models;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Web.Script.Serialization;
using System.Web.Security;
using System.Data.OleDb;
using System.Net;
using System.Data;
using System.Data.SqlClient;
using System.Globalization;



namespace CampusCare.Controllers
{
    public class CampusController : CCWebController
    {
        #region Main Master

        [HttpPost]
        public ActionResult FilterBank(string FilterType, string Value)
        {
            CommonResponse cr = new CommonResponse();
            int AcaStart = (int)Session["AcaStart"];
            int SchoolID = (int)Session["SchoolID"];
            //fillPermission();
            object[] obj = new object[1];
            try
            {
                if (CheckSession())
                {
                    cr.Message = "Login Again";
                    return Json(cr);
                }
                if (FilterType == "StartWith")
                {

                    var FilterData = db.FEEBankMasters.Where(model => model.FBName.StartsWith(Value) && model.AutoID != 0 && model.SchoolID == SchoolID).OrderBy(model => model.FBName).Select(model => new MTMainMaster() { MainID = model.AutoID, MainName = model.FBName }).ToList();
                    ViewData["GetData"] = db.FEEBankMasters.Where(model => model.FBName.StartsWith(Value) && model.AutoID != 0 && model.SchoolID == SchoolID).OrderBy(model => model.FBName).Select(model => new MTMainMaster() { MainID = model.AutoID, MainName = model.FBName }).ToList();

                    ViewData["PageCount"] = FilterData.Count() == 0 ? 1 : FilterData.Count();
                }
                else if (FilterType == "Equal")
                {
                    var FilterData = db.FEEBankMasters.Where(model => model.FBName == Value && model.AutoID != 0 && model.SchoolID == SchoolID).OrderBy(model => model.FBName).Select(model => new MTMainMaster() { MainID = model.AutoID, MainName = model.FBName }).ToList();
                    ViewData["GetData"] = db.FEEBankMasters.Where(model => model.FBName == Value && model.AutoID != 0 && model.SchoolID == SchoolID).OrderBy(model => model.FBName).Select(model => new MTMainMaster() { MainID = model.AutoID, MainName = model.FBName }).ToList();
                    ViewData["PageCount"] = FilterData.Count() == 0 ? 1 : FilterData.Count();
                }
                else if (FilterType == "Contain")
                {

                    var FilterData = db.FEEBankMasters.Where(model => model.FBName.Contains(Value) && model.AutoID != 0 && model.SchoolID == SchoolID).OrderBy(model => model.FBName).Select(model => new MTMainMaster() { MainID = model.AutoID, MainName = model.FBName }).ToList();
                    ViewData["GetData"] = db.FEEBankMasters.Where(model => model.FBName.Contains(Value) && model.AutoID != 0 && model.SchoolID == SchoolID).OrderBy(model => model.FBName).Select(model => new MTMainMaster() { MainID = model.AutoID, MainName = model.FBName }).ToList();
                    ViewData["PageCount"] = FilterData.Count() == 0 ? 1 : FilterData.Count();
                }
                else
                {
                    db.FEEBankMasters.Where(model => model.AutoID != 0 && model.SchoolID == SchoolID).OrderBy(model => model.FBName).Select(model => new MTMainMaster() { MainID = model.AutoID, MainName = model.FBName }).ToList();
                    var FilterData = db.FEEBankMasters.Where(model => model.AutoID != 0 && model.SchoolID == SchoolID).OrderBy(model => model.FBName).Select(model => new MTMainMaster() { MainID = model.AutoID, MainName = model.FBName }).ToList();
                    ViewData["GetData"] = db.FEEBankMasters.Where(model => model.AutoID != 0 && model.SchoolID == SchoolID).OrderBy(model => model.FBName).Select(model => new MTMainMaster() { MainID = model.AutoID, MainName = model.FBName }).ToList();
                    ViewData["PageCount"] = 20;
                }
                ViewData["UserPermission"] = db.FillUserMenuPermission(Convert.ToInt32(Session["UID"]), Convert.ToInt32(ids[1]))[0];
                obj[0] = DbCampusContext.RenderPertialViewtoString(this, "_MainGrid").Replace("FilterBank?", "MainMaster?menuid=" + ids[1] + "&amp;");
                cr.Data = obj;
                return Json(cr);
            }
            catch (Exception ex)
            {
                cr.Message = ex.Message;
                return Json(cr);

            }
        }

        private void fillMainData()
        {
            ViewData["ColName"] = getMainName();
            int AcaStart = (int)Session["AcaStart"];
            int SchoolID = (int)Session["SchoolID"];
            List<MTMainMaster> lobj = new List<MTMainMaster>();
            // MTMainMaster obj;
            switch (ids[2])
            {
                #region Preference

                case "mnuHouse":
                    lobj = db.MThousemasters.Where(model => model.AutoID != 0).OrderBy(model => model.HouseName).ToList().Select(model => new MTMainMaster() { MainID = model.AutoID, MainName = model.HouseName }).ToList();
                    break;

                case "mnuSocialCategory":
                    lobj = db.MTCategoryMasters.Where(model => model.AutoID != 0).OrderBy(model => model.CategoryName).ToList().Select(model => new MTMainMaster() { MainID = model.AutoID, MainName = model.CategoryName }).ToList();
                    break;

                case "mnuReligion":
                    lobj = db.MTReligionMasters.Where(model => model.AutoID != 0).OrderBy(model => model.ReligionName).ToList().Select(model => new MTMainMaster() { MainID = model.AutoID, MainName = model.ReligionName }).ToList();
                    break;

                case "mnuTitle":
                    lobj = db.MTTitleMasters.Where(model => model.AutoID != 0).OrderBy(model => model.TitleName).ToList().Select(model => new MTMainMaster() { MainID = model.AutoID, MainName = model.TitleName }).ToList();
                    break;

                case "mnuMaritalStatus":
                    lobj = db.MTMaritalStatusMasters.Where(model => model.AutoID != 0).OrderBy(model => model.MaritalStatusName).ToList().Select(model => new MTMainMaster() { MainID = model.AutoID, MainName = model.MaritalStatusName }).ToList();
                    break;

                case "mnuBloodGroup":
                    lobj = db.MTBloodGroupMasters.Where(model => model.AutoID != 0).OrderBy(model => model.BloodGroupName).ToList().Select(model => new MTMainMaster() { MainID = model.AutoID, MainName = model.BloodGroupName }).ToList();
                    break;

                case "mnuMotherTongue":
                    lobj = db.MTMotherTongueMasters.Where(model => model.AutoID != 0).OrderBy(model => model.MName).ToList().Select(model => new MTMainMaster() { MainID = model.AutoID, MainName = model.MName }).ToList();
                    break;

                case "mnuQualification":
                    lobj = db.MTPQualificationMasters.Where(model => model.AutoID != 0).OrderBy(model => model.PQlifiName).ToList().Select(model => new MTMainMaster() { MainID = model.AutoID, MainName = model.PQlifiName }).ToList();
                    break;

                case "mnuOccupation":
                    lobj = db.MTPOccupationMasters.Where(model => model.AutoID != 0).OrderBy(model => model.POccupName).ToList().Select(model => new MTMainMaster() { MainID = model.AutoID, MainName = model.POccupName }).ToList();
                    break;

                case "mnuDesignation":
                    lobj = db.MTPDesignationMasters.Where(model => model.AutoID != 0).OrderBy(model => model.PDesgName).ToList().Select(model => new MTMainMaster() { MainID = model.AutoID, MainName = model.PDesgName }).ToList();
                    break;

                case "mnuClass":
                    lobj = db.MTClassMasters.Where(model => model.AutoID != 0).OrderBy(model => model.PriorityNo).ToList().Select(model => new MTMainMaster() { MainID = model.AutoID, MainName = model.ClassName, PriorityNo = model.PriorityNo }).ToList();
                    break;

                case "mnuSection":
                    lobj = db.MTSectionMasters.Where(model => model.AutoID != 0).OrderBy(model => model.SectionName).ToList().Select(model => new MTMainMaster() { MainID = model.AutoID, MainName = model.SectionName }).ToList();
                    break;

                case "mnuBoard":
                    lobj = db.MTBoardMasters.Where(model => model.AutoID != 0).OrderBy(model => model.BoardName).ToList().Select(model => new MTMainMaster() { MainID = model.AutoID, MainName = model.BoardName }).ToList();
                    break;

                case "mnuBoardingCategory":
                    lobj = db.MTBoardingCategoryMasters.Where(model => model.AutoID != 0).OrderBy(model => model.BoardingCategoryName).ToList().Select(model => new MTMainMaster() { MainID = model.AutoID, MainName = model.BoardingCategoryName }).ToList();
                    break;

                case "mnuCountry":
                    lobj = db.MTCountryMasters.Where(model => model.AutoID != 0).OrderBy(model => model.CountryName).ToList().Select(model => new MTMainMaster() { MainID = model.AutoID, MainName = model.CountryName }).ToList();
                    break;

                case "mnuNationality":
                    lobj = db.MTNationalityMasters.Where(model => model.AutoID != 0).OrderBy(model => model.NationalityName).ToList().Select(model => new MTMainMaster() { MainID = model.AutoID, MainName = model.NationalityName }).ToList();
                    break;

                case "mnuDocument":
                    lobj = db.MTDocumentMasters.Where(model => model.AutoID != 0).OrderBy(model => model.DocumentName).ToList().Select(model => new MTMainMaster() { MainID = model.AutoID, MainName = model.DocumentName }).ToList();
                    break;
                case "mnuActivity":
                    lobj = db.MTActivitymasters.Where(model => model.AutoID != 0).OrderBy(model => model.ActivityNames).ToList().Select(model => new MTMainMaster() { MainID = model.AutoID, MainName = model.ActivityNames }).ToList();
                    break;
                case "mnuLocality":
                    lobj = db.MTLocalityMasters.Where(model => model.AutoID != 0).OrderBy(model => model.LocalityNames).ToList().Select(model => new MTMainMaster() { MainID = model.AutoID, MainName = model.LocalityNames }).ToList();
                    break;

                #endregion

                #region Staff

                case "mnuAccountType":
                    lobj = db.PRLAccountTypeMasters.Where(model => model.AutoID != 0).OrderBy(model => model.ACTPriority).ToList().Select(model => new MTMainMaster() { MainID = model.AutoID, MainName = model.ACTName, PriorityNo = model.ACTPriority }).ToList();
                    break;

                case "mnuStaffCategory":
                    lobj = db.PRLStaffCategoryMasters.Where(model => model.AutoID != 0).OrderBy(model => model.SCPriority).ToList().Select(model => new MTMainMaster() { MainID = model.AutoID, MainName = model.SCategory, PriorityNo = model.SCPriority }).ToList();
                    break;

                case "mnuDepartment":
                    lobj = db.PRLDepartmentMasters.Where(model => model.AutoID != 0).OrderBy(model => model.Dorder).ToList().Select(model => new MTMainMaster() { MainID = model.AutoID, MainName = model.DName, PriorityNo = model.Dorder }).ToList();
                    break;

                case "mnuOccupt":
                    lobj = db.PRLOccupationMasters.Where(model => model.PRLOccupationID != 0).OrderBy(model => model.QName).ToList().Select(model => new MTMainMaster() { MainID = model.PRLOccupationID, MainName = model.QName }).ToList();
                    break;

                case "mnuPDesignation":
                    lobj = db.PRLDesignationMasters.Where(model => model.AutoID != 0).OrderBy(model => model.Priority).ToList().Select(model => new MTMainMaster() { MainID = model.AutoID, MainName = model.DName, PriorityNo = model.Priority }).ToList();
                    break;

                case "mnuEducationalQualification":
                    lobj = db.PRLEducationalQualificationMasters.Where(model => model.AutoID != 0).OrderBy(model => model.Priority).ToList().Select(model => new MTMainMaster() { MainID = model.AutoID, MainName = model.QName, PriorityNo = model.Priority }).ToList();
                    break;

                case "mnuEducationalSubjects":
                    lobj = db.PRLEducationalSubjectMasters.Where(model => model.AutoID != 0).OrderBy(model => model.SubName).ToList().Select(model => new MTMainMaster() { MainID = model.AutoID, MainName = model.SubName }).ToList();
                    break;

                case "mnuNatureOfAppointment":
                    lobj = db.PRLNatureOfAppointmentMasters.Where(model => model.AutoID != 0).OrderBy(model => model.NOA).ToList().Select(model => new MTMainMaster() { MainID = model.AutoID, MainName = model.NOA }).ToList();
                    break;

                case "mnuSavingHeads":
                    lobj = db.PRLTaxSavingHeadss.Where(model => model.Saving_Head_ID != 0).OrderBy(model => model.Saving_Head_ID).ToList().Select(model => new MTMainMaster() { MainID = model.Saving_Head_ID, MainName = model.Saving_Head_Name }).ToList();
                    break;

                case "mnuDeductionHeads":
                    lobj = db.PRLTaxDeductionHeadss.Where(model => model.Deduction_Head_ID != 300).OrderBy(model => model.Deduction_Head_ID).Select(model => new MTMainMaster() { MainID = model.Deduction_Head_ID, MainName = model.Deduction_Head_Name }).ToList();
                    break;

                case "mnuCategoryMaster":
                    lobj = db.PRLLeaveCategoryMasters.Where(model => model.AutoID != 0).OrderBy(model => model.LeaveCategoryName).Select(model => new MTMainMaster() { MainID = model.AutoID, MainName = model.LeaveCategoryName }).ToList();
                    break;

                #endregion

                #region Payroll

                case "mnuDATypeMaster":
                    lobj = db.PRLDATypeMAsters.Where(model => model.DAID != 0).OrderBy(model => model.DAID).Select(model => new MTMainMaster() { MainID = model.DAID, MainName = model.DAType }).ToList();
                    break;

                #endregion

                #region Fee

                case "mnuStreamMaster":
                    lobj = db.FeeStreamMasters.Where(model => model.AutoID != 0 && model.SchoolID == SchoolID).OrderBy(model => model.FeeStreamName).Select(model => new MTMainMaster() { MainID = model.AutoID, MainName = model.FeeStreamName }).ToList();
                    break;
                case "mnuConcessionType":
                    lobj = db.FEEConcessionTypeMasters.Where(model => model.AutoID != 0 && model.SchoolID == SchoolID).OrderBy(model => model.CTypeName).Select(model => new MTMainMaster() { MainID = model.AutoID, MainName = model.CTypeName }).ToList();
                    break;
                case "mnuBankMaster":
                    lobj = db.FEEBankMasters.Where(model => model.AutoID != 0 && model.SchoolID == SchoolID).OrderBy(model => model.FBName).Select(model => new MTMainMaster() { MainID = model.AutoID, MainName = model.FBName }).ToList();
                    break;

                #endregion

                #region Transport

                case "mnuStopGroupMaster":
                    lobj = db.TRBusStopGroupMasters.Where(model => model.AutoID != 0 && model.SchoolID == SchoolID).OrderBy(model => model.BusStopGroupName).Select(model => new MTMainMaster() { MainID = model.AutoID, MainName = model.BusStopGroupName }).ToList();
                    break;
                case "mnuMonthMaster":
                    lobj = db.TRBusMonthMasters.Where(model => model.AutoID != 0 && model.SchoolID == SchoolID).OrderBy(model => model.AutoID).Select(model => new MTMainMaster() { MainID = model.AutoID, MainName = model.MonthName, PriorityNo = model.Priority }).ToList();
                    break;

                #endregion

                #region Question Bank

                case "mnuQuestionSubject":
                    lobj = db.QuestionBankSubjectMasters.Where(model => model.AutoID != 0).OrderBy(model => model.SubName).Select(model => new MTMainMaster() { MainID = model.AutoID, MainName = model.SubName }).ToList();
                    break;

                #endregion

                #region  Health
                case "mnuAllergy":
                    lobj = db.MTAllergyMasters.Where(model => model.AutoID != 0).OrderBy(model => model.AllergyNames).Select(model => new MTMainMaster() { MainID = model.AutoID, MainName = model.AllergyNames }).ToList();
                    break;
                case "mnuDisease":
                    lobj = db.MTDiseaseMasters.Where(model => model.AutoID != 0).OrderBy(model => model.DiseaseNames).Select(model => new MTMainMaster() { MainID = model.AutoID, MainName = model.DiseaseNames }).ToList();
                    break;
                case "mnuImmunization":
                    lobj = db.MTImmunizationMasters.Where(model => model.AutoID != 0).OrderBy(model => model.ImmunizationNames).Select(model => new MTMainMaster() { MainID = model.AutoID, MainName = model.ImmunizationNames }).ToList();
                    break;
                case "mnuMeasurement":
                    lobj = db.MTMeasurementMasters.Where(model => model.AutoID != 0).OrderBy(model => model.MeasurementNames).Select(model => new MTMainMaster() { MainID = model.AutoID, MainName = model.MeasurementNames }).ToList();
                    break;
                case "mnuDoctor":
                    lobj = db.MTDoctorMasters.Where(model => model.AutoID != 0).OrderBy(model => model.DoctorNames).Select(model => new MTMainMaster() { MainID = model.AutoID, MainName = model.DoctorNames }).ToList();
                    break;
                case "mnuNurse":
                    lobj = db.MTNurseMaster.Where(model => model.AutoID != 0).OrderBy(model => model.NurseNames).Select(model => new MTMainMaster() { MainID = model.AutoID, MainName = model.NurseNames }).ToList();
                    break;
                case "mnuRecord":
                    lobj = db.MTRecordMasters.Where(model => model.AutoID != 0).OrderBy(model => model.RecordNames).Select(model => new MTMainMaster() { MainID = model.AutoID, MainName = model.RecordNames }).ToList();
                    break;
                #endregion

                #region Discipline

                case "mnuDLGroup":
                    lobj = db.DLDisciplineGroupMasters.Where(model => model.AutoID != 0 && model.AcaStarts == AcaStart && model.SCID == SchoolID).OrderBy(model => model.GName).Select(model => new MTMainMaster() { MainID = model.AutoID, MainName = model.GName }).ToList();
                    break;

                #endregion

                #region School Online
                case "mnuAreaMaster":
                    lobj = db.MTFeedBackAreaMasters.Where(model => model.AutoID != 0 && model.SchoolIDs == CCSession.SchoolID).OrderBy(model => model.PriorityNo).ToList().Select(model => new MTMainMaster() { MainID = model.AutoID, MainName = model.AreaName, PriorityNo = model.PriorityNo }).ToList();
                    break;
                case "mnuParameterMaster":
                    lobj = db.MTParameterMasters.Where(model => model.AutoID != 0).OrderBy(model => model.PriorityNo).ToList().Select(model => new MTMainMaster() { MainID = model.AutoID, MainName = model.ParameterName, PriorityNo = model.PriorityNo }).ToList();
                    break;
                #endregion


                default:
                    break;
            }
            ViewData["GetData"] = lobj;
            ViewData["PriorityNo"] = ChekMainPriority();
        }

        private int getMainCount()
        {
            switch (ids[2])
            {

                #region Preference
                case "mnuHouse":
                    return db.MThousemasters.Count();
                case "mnuSocialCategory":
                    return db.MTCategoryMasters.Count();
                case "mnuReligion":
                    return db.MTReligionMasters.Count();
                case "mnuTitle":
                    return db.MTTitleMasters.Count();
                case "mnuMaritalStatus":
                    return db.MTMaritalStatusMasters.Count();
                case "mnuBloodGroup":
                    return db.MTBloodGroupMasters.Count();
                case "mnuDesignation":
                    return db.MTPDesignationMasters.Count();
                case "mnuOccupation":
                    return db.MTPOccupationMasters.Count();
                case "mnuQualification":
                    return db.MTPQualificationMasters.Count();
                case "mnuMotherTongue":
                    return db.MTMotherTongueMasters.Count();
                case "mnuClass":
                    return db.MTClassMasters.Count();
                case "mnuSection":
                    return db.MTSectionMasters.Count();
                case "mnuBoard":
                    return db.MTBoardMasters.Count();
                case "mnuBoardingCategory":
                    return db.MTBoardingCategoryMasters.Count();
                case "mnuCountry":
                    return db.MTCountryMasters.Count();
                case "mnuNationality":
                    return db.MTNationalityMasters.Count();
                case "mnuDocument":
                    return db.MTDocumentMasters.Count();
                case "mnuActivity":
                    return db.MTActivitymasters.Count();
                case "mnuLocality":
                    return db.MTLocalityMasters.Count();

                #endregion

                #region Staff

                case "mnuAccountType":
                    return db.PRLAccountTypeMasters.Count();
                case "mnuStaffCategory":
                    return db.PRLStaffCategoryMasters.Count();
                case "mnuDepartment":
                    return db.PRLDepartmentMasters.Count();
                case "mnuOccupt":
                    return db.PRLOccupationMasters.Count();
                case "mnuPDesignation":
                    return db.PRLDesignationMasters.Count();
                case "mnuEducationalQualification":
                    return db.PRLEducationalQualificationMasters.Count();
                case "mnuEducationalSubjects":
                    return db.PRLEducationalSubjectMasters.Count();
                case "mnuNatureOfAppointment":
                    return db.PRLNatureOfAppointmentMasters.Count();
                case "mnuSavingHeads":
                    return db.PRLTaxSavingHeadss.Count();
                case "mnuDeductionHeads":
                    return db.PRLTaxDeductionHeadss.Count();
                case "mnuCategoryMaster":
                    return db.PRLLeaveCategoryMasters.Count();

                case "mnuDATypeMaster":
                    return db.PRLDATypeMAsters.Count();
                #endregion

                #region Fee

                case "mnuStreamMaster":
                    return db.FeeStreamMasters.Count();
                case "mnuConcessionType":
                    return db.FEEConcessionTypeMasters.Count();
                case "mnuBankMaster":
                    return db.FEEBankMasters.Count();

                #endregion

                #region Transport

                case "mnuStopGroupMaster":
                    return db.TRBusStopGroupMasters.Count();
                case "mnuMonthMaster":
                    return db.TRBusMonthMasters.Count();

                #endregion

                #region Question Bank

                case "mnuQuestionSubject":
                    return db.QuestionBankSubjectMasters.Count();

                #endregion

                #region  Health
                case "mnuAllergy":
                    return db.MTAllergyMasters.Count();
                case "mnuDisease":
                    return db.MTDiseaseMasters.Count();
                case "mnuImmunization":
                    return db.MTImmunizationMasters.Count();
                case "mnuMeasurement":
                    return db.MTMeasurementMasters.Count();
                case "mnuDoctor":
                    return db.MTDoctorMasters.Count();
                case "mnuNurse":
                    return db.MTNurseMaster.Count();
                case "mnuRecord":
                    return db.MTRecordMasters.Count();
                #endregion

                #region  Discipline
                case "mnuDLGroup":
                    return db.DLDisciplineGroupMasters.Count();

                #endregion

                #region School Online
                case "mnuAreaMaster":
                    return db.MTFeedBackAreaMasters.Count();
                case "mnuParameterMaster":
                    return db.MTParameterMasters.Count();
                #endregion

                default:
                    return 0;
            }
        }
        private int getMainMaxInserID()
        {
            switch (ids[2])
            {
                #region Preference

                case "mnuHouse":
                    return db.MThousemasters.Max(model => model.AutoID);
                case "mnuSocialCategory":
                    return db.MTCategoryMasters.Max(model => model.AutoID);
                case "mnuReligion":
                    return db.MTReligionMasters.Max(model => model.AutoID);
                case "mnuTitle":
                    return db.MTTitleMasters.Max(model => model.AutoID);
                case "mnuMaritalStatus":
                    return db.MTMaritalStatusMasters.Max(model => model.AutoID);
                case "mnuBloodGroup":
                    return db.MTBloodGroupMasters.Max(model => model.AutoID);
                case "mnuMotherTongue":
                    return db.MTMotherTongueMasters.Max(model => model.AutoID);
                case "mnuQualification":
                    return db.MTPQualificationMasters.Max(model => model.AutoID);
                case "mnuDesignation":
                    return db.MTPDesignationMasters.Max(model => model.AutoID);
                case "mnuOccupation":
                    return db.MTPOccupationMasters.Max(model => model.AutoID);
                case "mnuClass":
                    return db.MTClassMasters.Max(model => model.AutoID);
                case "mnuSection":
                    return db.MTSectionMasters.Max(model => model.AutoID);
                case "mnuBoard":
                    return db.MTBoardMasters.Max(model => model.AutoID);
                case "mnuBoardingCategory":
                    return db.MTBoardingCategoryMasters.Max(model => model.AutoID);
                case "mnuCountry":
                    return db.MTCountryMasters.Max(model => model.AutoID);
                case "mnuNationality":
                    return db.MTNationalityMasters.Max(model => model.AutoID);
                case "mnuDocument":
                    return db.MTDocumentMasters.Max(model => model.AutoID);
                case "mnuActivity":
                    return db.MTActivitymasters.Max(model => model.AutoID);
                case "mnuLocality":
                    return db.MTLocalityMasters.Max(model => model.AutoID);

                #endregion

                #region Staff

                case "mnuAccountType":
                    return db.PRLAccountTypeMasters.Max(model => model.AutoID);
                case "mnuStaffCategory":
                    return db.PRLStaffCategoryMasters.Max(model => model.AutoID);
                case "mnuDepartment":
                    return db.PRLDepartmentMasters.Max(model => model.AutoID);
                case "mnuOccupt":
                    return db.PRLOccupationMasters.Max(model => model.PRLOccupationID);
                case "mnuPDesignation":
                    return db.PRLDesignationMasters.Max(model => model.AutoID);
                case "mnuEducationalQualification":
                    return db.PRLEducationalQualificationMasters.Max(model => model.AutoID);
                case "mnuEducationalSubjects":
                    return db.PRLEducationalSubjectMasters.Max(model => model.AutoID);
                case "mnuNatureOfAppointment":
                    return db.PRLNatureOfAppointmentMasters.Max(model => model.AutoID);
                case "mnuSavingHeads":
                    return db.PRLTaxSavingHeadss.Max(model => model.Saving_Head_ID);
                case "mnuDeductionHeads":
                    return db.PRLTaxDeductionHeadss.Max(Model => Model.Deduction_Head_ID);
                case "mnuCategoryMaster":
                    return db.PRLLeaveCategoryMasters.Max(Model => Model.AutoID);
                case "mnuDATypeMaster":
                    return db.PRLDATypeMAsters.Max(model => model.DAID);
                #endregion
                #region School Online
                case "mnuAreaMaster":
                    return db.MTFeedBackAreaMasters.Max(model => model.AutoID);
                case "mnuParameterMaster":
                    return db.MTParameterMasters.Max(model => model.AutoID);
                #endregion

                default:
                    return 0;
            }
        }
                

        private string getMainName()
        {
            string str = "";
            switch (ids[2])
            {
                #region Preference

                case "mnuSocialCategory":
                    str = "Social Category";
                    break;
                case "mnuHouse":
                    str = "House";
                    break;
                case "mnuReligion":
                    str = "Religion";
                    break;
                case "mnuTitle":
                    str = "Title";
                    break;
                case "mnuMaritalStatus":
                    str = "Marital Status";
                    break;
                case "mnuBloodGroup":
                    str = "Blood Group";
                    break;
                case "mnuQualification":
                    str = "Qualification";
                    break;
                case "mnuDesignation":
                    str = "Designation";
                    break;
                case "mnuOccupation":
                    str = "Occupation";
                    break;
                case "mnuMotherTongue":
                    str = "Mother Tongue";
                    break;
                case "mnuClass":
                    str = "Class";
                    break;
                case "mnuSection":
                    str = "Section";
                    break;
                case "mnuBoard":
                    str = "Board";
                    break;
                case "mnuBoardingCategory":
                    str = "Boarding Category";
                    break;
                case "mnuCountry":
                    str = "Country";
                    break;
                case "mnuNationality":
                    str = "Nationality";
                    break;
                case "mnuDocument":
                    str = "Document";
                    break;
                case "mnuActivity":
                    str = "Activity";
                    break;
                case "mnuLocality":
                    str = "Locality";
                    break;

                #endregion

                #region Staff

                case "mnuAccountType":
                    str = "Account Type";
                    break;
                case "mnuStaffCategory":
                    str = "Staff Category";
                    break;
                case "mnuDepartment":
                    str = "Department";
                    break;
                case "mnuOccupt":
                    str = " Occupation";
                    break;
                case "mnuPDesignation":
                    str = " Designation ";
                    break;
                case "mnuEducationalQualification":
                    str = "Educational Qualification";
                    break;
                case "mnuEducationalSubjects":
                    str = "Educational Subjects";
                    break;
                case "mnuNatureOfAppointment":
                    str = " Nature of Appointment";
                    break;
                case "mnuSavingHeads":
                    str = " Saving Heads";
                    break;
                case "mnuDeductionHeads":
                    str = "Deduction Heads";
                    break;
                case "mnuCategoryMaster":
                    str = "Leave Category";
                    break;
                case "mnuDATypeMaster":
                    str = "DA Type";
                    break;
                #endregion

                #region Fee

                case "mnuStreamMaster":
                    str = "Stream";
                    break;
                case "mnuConcessionType":
                    str = "Concession Type";
                    break;
                case "mnuBankMaster":
                    str = "Bank";
                    break;
                #endregion


                #region Transport
                case "mnuStopGroupMaster":
                    str = "Stop Group";
                    break;
                case "mnuMonthMaster":
                    str = "Month";
                    break;
                #endregion

                #region Question Bank
                case "mnuQuestionSubject":
                    str = "Subject";
                    break;
                #endregion

                #region  Health
                case "mnuAllergy":
                    str = "Allergy";
                    break;
                case "mnuDisease":
                    str = "Disease";
                    break;
                case "mnuImmunization":
                    str = "Immunization";
                    break;
                case "mnuMeasurement":
                    str = "Measurement";
                    break;
                case "mnuDoctor":
                    str = "Doctor";
                    break;
                case "mnuNurse":
                    str = "Nurse";
                    break;
                case "mnuRecord":
                    str = "Record";
                    break;
                #endregion

                #region  Discipline
                case "mnuDLGroup":
                    str = "Group";
                    break;
                #endregion

                #region School Online
                case "mnuAreaMaster":
                    str = "Area Master";
                    break;
                case "mnuParameterMaster":
                    str = "Parameter Master";
                    break;
                #endregion

                default:
                    break;
            }
            return str;
        }

        private void fillObjData(int? id, MTMainMaster Obj)
        {
            switch (ids[2])
            {
                #region Preference

                case "mnuHouse":
                    MThousemaster objHouse = db.MThousemasters.Find(id);
                    Obj.MainID = objHouse.AutoID;
                    Obj.MainName = objHouse.HouseName;
                    break;
                case "mnuSocialCategory":
                    MTCategoryMaster objCat = db.MTCategoryMasters.Find(id);
                    Obj.MainID = objCat.AutoID;
                    Obj.MainName = objCat.CategoryName;
                    break;

                case "mnuReligion":
                    MTReligionMaster objReligion = db.MTReligionMasters.Find(id);
                    Obj.MainID = objReligion.AutoID;
                    Obj.MainName = objReligion.ReligionName;
                    break;

                case "mnuTitle":
                    MTTitleMaster objTitile = db.MTTitleMasters.Find(id);
                    Obj.MainID = objTitile.AutoID;
                    Obj.MainName = objTitile.TitleName;
                    break;

                case "mnuMaritalStatus":
                    MTMaritalStatusMaster objMartial = db.MTMaritalStatusMasters.Find(id);
                    Obj.MainID = objMartial.AutoID;
                    Obj.MainName = objMartial.MaritalStatusName;
                    break;

                case "mnuBloodGroup":
                    MTBloodGroupMaster objBloodGroup = db.MTBloodGroupMasters.Find(id);
                    Obj.MainID = objBloodGroup.AutoID;
                    Obj.MainName = objBloodGroup.BloodGroupName;
                    break;
                case "mnuQualification":
                    MTPQualificationMaster objQualification = db.MTPQualificationMasters.Find(id);
                    Obj.MainID = objQualification.AutoID;
                    Obj.MainName = objQualification.PQlifiName;
                    break;

                case "mnuDesignation":
                    MTPDesignationMaster objDesign = db.MTPDesignationMasters.Find(id);
                    Obj.MainID = objDesign.AutoID;
                    Obj.MainName = objDesign.PDesgName;
                    break;

                case "mnuOccupation":
                    MTPOccupationMaster objOccupation = db.MTPOccupationMasters.Find(id);
                    Obj.MainID = objOccupation.AutoID;
                    Obj.MainName = objOccupation.POccupName;
                    break;

                case "mnuMotherTongue":
                    MTMotherTongueMaster objMotherToungue = db.MTMotherTongueMasters.Find(id);
                    Obj.MainID = objMotherToungue.AutoID;
                    Obj.MainName = objMotherToungue.MName;
                    break;
                case "mnuClass":
                    MTClassMaster objClass = db.MTClassMasters.Find(id);
                    Obj.MainID = objClass.AutoID;
                    Obj.MainName = objClass.ClassName;
                    Obj.PriorityNo = objClass.PriorityNo;
                    break;
                case "mnuSection":
                    MTSectionMaster objSection = db.MTSectionMasters.Find(id);
                    Obj.MainID = objSection.AutoID;
                    Obj.MainName = objSection.SectionName;
                    break;
                case "mnuBoard":
                    MTBoardMaster objBoard = db.MTBoardMasters.Find(id);
                    Obj.MainID = objBoard.AutoID;
                    Obj.MainName = objBoard.BoardName;
                    break;
                case "mnuBoardingCategory":
                    MTBoardingCategoryMaster objBoardingCategory = db.MTBoardingCategoryMasters.Find(id);
                    Obj.MainID = objBoardingCategory.AutoID;
                    Obj.MainName = objBoardingCategory.BoardingCategoryName;
                    break;
                case "mnuCountry":
                    MTCountryMaster objCountry = db.MTCountryMasters.Find(id);
                    Obj.MainID = objCountry.AutoID;
                    Obj.MainName = objCountry.CountryName;
                    break;
                case "mnuNationality":
                    MTNationalityMaster objNationality = db.MTNationalityMasters.Find(id);
                    Obj.MainID = objNationality.AutoID;
                    Obj.MainName = objNationality.NationalityName;
                    break;
                case "mnuDocument":
                    MTDocumentMaster objDocument = db.MTDocumentMasters.Find(id);
                    Obj.MainID = objDocument.AutoID;
                    Obj.MainName = objDocument.DocumentName;
                    break;

                case "mnuActivity":
                    MTActivitymaster objAcitivity = db.MTActivitymasters.Find(id);
                    Obj.MainID = objAcitivity.AutoID;
                    Obj.MainName = objAcitivity.ActivityNames;
                    break;
                case "mnuLocality":
                    MTLocalityMaster objLoc = db.MTLocalityMasters.Find(id);
                    Obj.MainID = objLoc.AutoID;
                    Obj.MainName = objLoc.LocalityNames;
                    break;
                #endregion

                #region Staff

                case "mnuDATypeMaster":
                    PRLDATypeMAster objDAtype = db.PRLDATypeMAsters.Find(id);
                    Obj.MainID = objDAtype.DAID;
                    Obj.MainName = objDAtype.DAType;
                    Obj.EntryUserID = objDAtype.EntryUserID;
                    Obj.EntryDate = objDAtype.EntryDate;
                    break;

                case "mnuAccountType":
                    PRLAccountTypeMaster objAccountType = db.PRLAccountTypeMasters.Find(id);
                    Obj.MainID = objAccountType.AutoID;
                    Obj.MainName = objAccountType.ACTName;
                    Obj.PriorityNo = objAccountType.ACTPriority;
                    Obj.EntryUserID = objAccountType.EntryUserID;
                    Obj.EntryDate = objAccountType.EntryDate;

                    break;
                case "mnuStaffCategory":
                    PRLStaffCategoryMaster objStaffCategory = db.PRLStaffCategoryMasters.Find(id);
                    Obj.MainID = objStaffCategory.AutoID;
                    Obj.MainName = objStaffCategory.SCategory;
                    Obj.PriorityNo = objStaffCategory.SCPriority;
                    Obj.EntryUserID = objStaffCategory.EntryUserID;
                    Obj.EntryDate = objStaffCategory.EntryDate;
                    break;
                case "mnuDepartment":
                    PRLDepartmentMaster objDepartment = db.PRLDepartmentMasters.Find(id);
                    Obj.MainID = objDepartment.AutoID;
                    Obj.MainName = objDepartment.DName;
                    Obj.PriorityNo = objDepartment.Dorder;
                    Obj.EntryUserID = objDepartment.EntryUserID;
                    Obj.EntryDate = objDepartment.EntryDate;
                    break;
                case "mnuOccupt":
                    PRLOccupationMaster objOccupdation = db.PRLOccupationMasters.Find(id);
                    Obj.MainID = objOccupdation.PRLOccupationID;
                    Obj.MainName = objOccupdation.QName;
                    Obj.EntryUserID = objOccupdation.EntryUserID;
                    Obj.EntryDate = objOccupdation.EntryDate;
                    break;
                case "mnuPDesignation":
                    PRLDesignationMaster objDesignation = db.PRLDesignationMasters.Find(id);
                    Obj.MainID = objDesignation.AutoID;
                    Obj.MainName = objDesignation.DName;
                    Obj.PriorityNo = objDesignation.Priority;
                    Obj.EntryUserID = objDesignation.EntryUserID;
                    Obj.EntryDate = objDesignation.EntryDate;

                    break;
                case "mnuEducationalQualification":
                    PRLEducationalQualificationMaster objEductionalQualification = db.PRLEducationalQualificationMasters.Find(id);
                    Obj.MainID = objEductionalQualification.AutoID;
                    Obj.MainName = objEductionalQualification.QName;
                    Obj.PriorityNo = objEductionalQualification.Priority;
                    Obj.EntryUserID = objEductionalQualification.EntryUserID;
                    Obj.EntryDate = objEductionalQualification.EntryDate;
                    break;
                case "mnuEducationalSubjects":
                    PRLEducationalSubjectMaster objEdSubjects = db.PRLEducationalSubjectMasters.Find(id);
                    Obj.MainID = objEdSubjects.AutoID;
                    Obj.MainName = objEdSubjects.SubName;
                    Obj.EntryUserID = objEdSubjects.EntryUserID;
                    Obj.EntryDate = objEdSubjects.EntryDate;
                    break;
                case "mnuNatureOfAppointment":
                    PRLNatureOfAppointmentMaster objNOA = db.PRLNatureOfAppointmentMasters.Find(id);
                    Obj.MainID = objNOA.AutoID;
                    Obj.MainName = objNOA.NOA;
                    Obj.EntryUserID = objNOA.EntryUserID;
                    Obj.EntryDate = objNOA.EntryDate;

                    break;
                case "mnuSavingHeads":
                    PRLTaxSavingHeads objSavingHeads = db.PRLTaxSavingHeadss.Find(id);
                    Obj.MainID = objSavingHeads.Saving_Head_ID;
                    Obj.MainName = objSavingHeads.Saving_Head_Name;
                    Obj.EntryUserID = objSavingHeads.EntryUserID;
                    Obj.EntryDate = objSavingHeads.EntryDate;
                    break;
                case "mnuDeductionHeads":
                    PRLTaxDeductionHeads objdedHeads = db.PRLTaxDeductionHeadss.Find(id);
                    Obj.MainID = objdedHeads.Deduction_Head_ID;
                    Obj.MainName = objdedHeads.Deduction_Head_Name;
                    Obj.EntryUserID = objdedHeads.EntryUserID;
                    Obj.EntryDate = objdedHeads.EntryDate;
                    break;

                case "mnuCategoryMaster":
                    PRLLeaveCategoryMaster objLeave = db.PRLLeaveCategoryMasters.Find(id);
                    Obj.MainID = objLeave.AutoID;
                    Obj.MainName = objLeave.LeaveCategoryName;
                    Obj.EntryUserID = objLeave.EntryUserID;
                    Obj.EntryDate = objLeave.EntryDate;
                    break;
                #endregion

                #region Fee

                case "mnuStreamMaster":
                    FeeStreamMaster objStream = db.FeeStreamMasters.Find(id);
                    Obj.MainID = objStream.AutoID;
                    Obj.MainName = objStream.FeeStreamName;
                    Obj.EntryUserID = objStream.EntryUserID;
                    Obj.EntryDate = objStream.EntryDate;
                    Obj.UpdateUserID = objStream.UpdateUserID;
                    Obj.UpdateDate = objStream.UpdateDate;
                    break;
                case "mnuConcessionType":
                    FEEConcessionTypeMaster objConcessionType = db.FEEConcessionTypeMasters.Find(id);
                    Obj.MainID = objConcessionType.AutoID;
                    Obj.MainName = objConcessionType.CTypeName;
                    Obj.EntryUserID = objConcessionType.EntryUserID;
                    Obj.EntryDate = objConcessionType.EntryDate;
                    Obj.UpdateUserID = objConcessionType.UpdateUserID;
                    Obj.UpdateDate = objConcessionType.UpdateDate;
                    break;
                case "mnuBankMaster":
                    FEEBankMaster objBank = db.FEEBankMasters.Find(id);
                    Obj.MainID = objBank.AutoID;
                    Obj.MainName = objBank.FBName;
                    Obj.EntryUserID = objBank.EntryUserID;
                    Obj.EntryDate = objBank.EntryDate;
                    Obj.UpdateUserID = objBank.UpdateUserID;
                    Obj.UpdateDate = objBank.UpdateDate;
                    break;
                #endregion

                #region Transport
                case "mnuStopGroupMaster":
                    TRBusStopGroupMaster objSG = db.TRBusStopGroupMasters.Find(id);
                    Obj.MainID = objSG.AutoID;
                    Obj.MainName = objSG.BusStopGroupName;
                    Obj.EntryUserID = Convert.ToInt32(Session["UID"].ToString());
                    Obj.EntryDate = DateTime.Now;
                    break;

                case "mnuMonthMaster":
                    TRBusMonthMaster objMonth = db.TRBusMonthMasters.Find(id);
                    Obj.MainID = objMonth.AutoID;
                    Obj.MainName = objMonth.MonthName;
                    Obj.PriorityNo = objMonth.Priority;
                    Obj.EntryUserID = Convert.ToInt32(Session["UID"].ToString());
                    Obj.EntryDate = DateTime.Now;
                    break;

                #endregion

                #region Question Bank
                case "mnuQuestionSubject":
                    QuestionBankSubjectMaster objSub = db.QuestionBankSubjectMasters.Find(id);
                    Obj.MainID = objSub.AutoID;
                    Obj.MainName = objSub.SubName;
                    Obj.EntryUserID = Convert.ToInt32(Session["UID"].ToString());
                    Obj.EntryDate = DateTime.Now;
                    break;
                #endregion

                #region  Health
                case "mnuAllergy":
                    MTAllergyMaster objAll = db.MTAllergyMasters.Find(id);
                    Obj.MainID = objAll.AutoID;
                    Obj.MainName = objAll.AllergyNames;
                    Obj.EntryUserID = Convert.ToInt32(Session["UID"].ToString());
                    Obj.EntryDate = DateTime.Now;
                    break;
                case "mnuDisease":
                    MTDiseaseMaster objDise = db.MTDiseaseMasters.Find(id);
                    Obj.MainID = objDise.AutoID;
                    Obj.MainName = objDise.DiseaseNames;
                    Obj.EntryUserID = Convert.ToInt32(Session["UID"].ToString());
                    Obj.EntryDate = DateTime.Now;
                    break;
                case "mnuImmunization":
                    MTImmunizationMaster objImmu = db.MTImmunizationMasters.Find(id);
                    Obj.MainID = objImmu.AutoID;
                    Obj.MainName = objImmu.ImmunizationNames;
                    Obj.EntryUserID = Convert.ToInt32(Session["UID"].ToString());
                    Obj.EntryDate = DateTime.Now;
                    break;
                case "mnuMeasurement":
                    MTMeasurementMaster objMeasur = db.MTMeasurementMasters.Find(id);
                    Obj.MainID = objMeasur.AutoID;
                    Obj.MainName = objMeasur.MeasurementNames;
                    Obj.EntryUserID = Convert.ToInt32(Session["UID"].ToString());
                    Obj.EntryDate = DateTime.Now;
                    break;
                case "mnuDoctor":
                    MTDoctorMaster objDoct = db.MTDoctorMasters.Find(id);
                    Obj.MainID = objDoct.AutoID;
                    Obj.MainName = objDoct.DoctorNames;
                    Obj.EntryUserID = Convert.ToInt32(Session["UID"].ToString());
                    Obj.EntryDate = DateTime.Now;
                    break;
                case "mnuNurse":
                    MTNurseMaster objNurs = db.MTNurseMaster.Find(id);
                    Obj.MainID = objNurs.AutoID;
                    Obj.MainName = objNurs.NurseNames;
                    Obj.EntryUserID = Convert.ToInt32(Session["UID"].ToString());
                    Obj.EntryDate = DateTime.Now;
                    break;
                case "mnuRecord":
                    MTRecordMaster objRec = db.MTRecordMasters.Find(id);
                    Obj.MainID = objRec.AutoID;
                    Obj.MainName = objRec.RecordNames;
                    Obj.EntryUserID = Convert.ToInt32(Session["UID"].ToString());
                    Obj.EntryDate = DateTime.Now;
                    break;
                #endregion

                #region  Discipline
                case "mnuDLGroup":
                    DLDisciplineGroupMaster objDLLL = db.DLDisciplineGroupMasters.Find(id);
                    Obj.MainID = objDLLL.AutoID;
                    Obj.MainName = objDLLL.GName;
                    Obj.SchoolID = objDLLL.SCID;
                    Obj.Acastart = objDLLL.AcaStarts;
                    Obj.EntryUserID = Convert.ToInt32(Session["UID"].ToString());
                    Obj.EntryDate = DateTime.Now;
                    //Obj.

                    break;


                #endregion

                #region School Online
                case "mnuAreaMaster":
                    MTFeedBackAreaMaster objArea = db.MTFeedBackAreaMasters.Find(id);
                    Obj.MainID = objArea.AutoID;
                    Obj.MainName = objArea.AreaName;
                    Obj.PriorityNo = objArea.PriorityNo;
                    break;
                case "mnuParameterMaster":
                    MTPARAMETERMASTER objPara = db.MTParameterMasters.Find(id);
                    Obj.MainID = objPara.AutoID;
                    Obj.MainName = objPara.ParameterName;
                    Obj.PriorityNo = objPara.PriorityNo;
                    break;

                #endregion
                default:
                    break;
            }
        }

        private void addObjData(MTMainMaster Obj)
        {
            int SchoolID = (int)Session["SchoolID"];
            switch (ids[2])
            {
                #region Preference

                case "mnuHouse":
                    MThousemaster objHouse = new MThousemaster();
                    //  objHouse.AutoID = Obj.MainID;
                    objHouse.HouseName = Obj.MainName;
                    objHouse.EntryUserID = Obj.EntryUserID;
                    objHouse.EntryDate = Obj.EntryDate;
                    //objHouse.UpdateUserID = Obj.UpdateUserID;
                    //objHouse.UpdateDate = Obj.UpdateDate;
                    db.MThousemasters.Add(objHouse);
                    break;
                case "mnuSocialCategory":
                    MTCategoryMaster objCat = new MTCategoryMaster();
                    //objCat.AutoID = Obj.MainID;
                    objCat.CategoryName = Obj.MainName;
                    objCat.EntryUserID = Obj.EntryUserID;
                    objCat.EntryDate = Obj.EntryDate;
                    //objCat.UpdateUserID = Obj.UpdateUserID;
                    //objCat.UpdateDate = Obj.UpdateDate;
                    db.MTCategoryMasters.Add(objCat);
                    break;

                case "mnuReligion":
                    MTReligionMaster objReligion = new MTReligionMaster();
                    //objReligion.AutoID = Obj.MainID;
                    objReligion.ReligionName = Obj.MainName;
                    objReligion.EntryUserID = Obj.EntryUserID;
                    objReligion.EntryDate = Obj.EntryDate;
                    //objReligion.UpdateUserID = Obj.UpdateUserID;
                    //objReligion.UpdateDate = Obj.UpdateDate;
                    db.MTReligionMasters.Add(objReligion);
                    break;

                case "mnuTitle":
                    MTTitleMaster objTitle = new MTTitleMaster();
                    objTitle.AutoID = Obj.MainID;
                    objTitle.TitleName = Obj.MainName;
                    objTitle.EntryUserID = Obj.EntryUserID;
                    objTitle.EntryDate = Obj.EntryDate;
                    //objTitle.UpdateUserID = Obj.UpdateUserID;
                    //objTitle.UpdateDate = Obj.UpdateDate;
                    db.MTTitleMasters.Add(objTitle);
                    break;
                case "mnuMaritalStatus":
                    MTMaritalStatusMaster objMartial = new MTMaritalStatusMaster();
                    //  objMartial.AutoID = Obj.MainID;
                    objMartial.MaritalStatusName = Obj.MainName;
                    objMartial.EntryUserID = Obj.EntryUserID;
                    objMartial.EntryDate = Obj.EntryDate;
                    //objMartial.UpdateUserID = Obj.UpdateUserID;
                    //objMartial.UpdateDate = Obj.UpdateDate;
                    db.MTMaritalStatusMasters.Add(objMartial);
                    break;

                case "mnuBloodGroup":
                    MTBloodGroupMaster objBlood = new MTBloodGroupMaster();
                    // objBlood.AutoID = Obj.MainID;
                    objBlood.BloodGroupName = Obj.MainName;
                    objBlood.EntryUserID = Obj.EntryUserID;
                    objBlood.EntryDate = Obj.EntryDate;
                    //objBlood.UpdateUserID = Obj.UpdateUserID;
                    //objBlood.UpdateDate = Obj.UpdateDate;
                    db.MTBloodGroupMasters.Add(objBlood);
                    break;

                case "mnuQualification":
                    MTPQualificationMaster objQualification = new MTPQualificationMaster();
                    //  objQualification.AutoID = Obj.MainID;
                    objQualification.PQlifiName = Obj.MainName;
                    objQualification.EntryUserID = Obj.EntryUserID;
                    objQualification.EntryDate = Obj.EntryDate;
                    //objQualification.UpdateUserID = Obj.UpdateUserID;
                    //objQualification.UpdateDate = Obj.UpdateDate;
                    db.MTPQualificationMasters.Add(objQualification);
                    break;


                case "mnuDesignation":
                    MTPDesignationMaster objDesign = new MTPDesignationMaster();
                    //  objDesign.AutoID = Obj.MainID;
                    objDesign.PDesgName = Obj.MainName;
                    objDesign.EntryUserID = Obj.EntryUserID;
                    objDesign.EntryDate = Obj.EntryDate;
                    //objDesign.UpdateUserID = Obj.UpdateUserID;
                    //objDesign.UpdateDate = Obj.UpdateDate;
                    db.MTPDesignationMasters.Add(objDesign);
                    break;

                case "mnuOccupation":
                    MTPOccupationMaster objOccup = new MTPOccupationMaster();
                    // objOccup.AutoID = Obj.MainID;
                    objOccup.POccupName = Obj.MainName;
                    objOccup.EntryUserID = Obj.EntryUserID;
                    objOccup.EntryDate = Obj.EntryDate;
                    //objOccup.UpdateUserID = Obj.UpdateUserID;
                    //objOccup.UpdateDate = Obj.UpdateDate;
                    db.MTPOccupationMasters.Add(objOccup);
                    break;

                case "mnuMotherTongue":
                    MTMotherTongueMaster objMotherTougue = new MTMotherTongueMaster();
                    // objMotherTougue.AutoID = Obj.MainID;
                    objMotherTougue.MName = Obj.MainName;
                    objMotherTougue.EntryUserID = Obj.EntryUserID;
                    objMotherTougue.EntryDate = Obj.EntryDate;
                    //objMotherTougue.UpdateUserID = Obj.UpdateUserID;
                    //objMotherTougue.UpdateDate = Obj.UpdateDate;
                    db.MTMotherTongueMasters.Add(objMotherTougue);
                    break;
                case "mnuClass":
                    MTClassMaster objClass = new MTClassMaster();
                    //  objClass.AutoID = Obj.MainID;
                    objClass.ClassName = Obj.MainName;
                    objClass.PriorityNo = Obj.PriorityNo;
                    objClass.EntryUserID = Obj.EntryUserID;
                    objClass.EntryDate = Obj.EntryDate;
                    //objClass.UpdateUserID = Obj.UpdateUserID;
                    //objClass.UpdateDate = Obj.UpdateDate;
                    db.MTClassMasters.Add(objClass);
                    break;
                case "mnuSection":
                    MTSectionMaster objSection = new MTSectionMaster();
                    //objSection.AutoID = Obj.MainID;
                    objSection.SectionName = Obj.MainName;
                    objSection.EntryUserID = Obj.EntryUserID;
                    objSection.EntryDate = Obj.EntryDate;
                    //objSection.UpdateUserID = Obj.UpdateUserID;
                    //objSection.UpdateDate = Obj.UpdateDate;
                    db.MTSectionMasters.Add(objSection);
                    break;
                case "mnuBoard":
                    MTBoardMaster objBoard = new MTBoardMaster();
                    //  objBoard.AutoID = Obj.MainID;
                    objBoard.BoardName = Obj.MainName;
                    objBoard.EntryUserID = Obj.EntryUserID;
                    objBoard.EntryDate = Obj.EntryDate;
                    //objBoard.UpdateUserID = Obj.UpdateUserID;
                    //objBoard.UpdateDate = Obj.UpdateDate;
                    db.MTBoardMasters.Add(objBoard);
                    break;
                case "mnuBoardingCategory":
                    MTBoardingCategoryMaster objBoardingCategory = new MTBoardingCategoryMaster();
                    // objBoardingCategory.AutoID = Obj.MainID;
                    objBoardingCategory.BoardingCategoryName = Obj.MainName;
                    objBoardingCategory.EntryUserID = Obj.EntryUserID;
                    objBoardingCategory.EntryDate = Obj.EntryDate;
                    //objBoardingCategory.UpdateUserID = Obj.UpdateUserID;
                    //objBoardingCategory.UpdateDate = Obj.UpdateDate;
                    db.MTBoardingCategoryMasters.Add(objBoardingCategory);
                    break;
                case "mnuCountry":
                    MTCountryMaster objCountry = new MTCountryMaster();
                    //objCountry.AutoID = Obj.MainID;
                    objCountry.CountryName = Obj.MainName;
                    objCountry.EntryUserID = Obj.EntryUserID;
                    objCountry.EntryDate = Obj.EntryDate;
                    //objCountry.UpdateUserID = Obj.UpdateUserID;
                    //objCountry.UpdateDate = Obj.UpdateDate;
                    db.MTCountryMasters.Add(objCountry);
                    break;
                case "mnuNationality":
                    MTNationalityMaster objNationality = new MTNationalityMaster();
                    // objNationality.AutoID = Obj.MainID;
                    objNationality.NationalityName = Obj.MainName;
                    objNationality.EntryUserID = Obj.EntryUserID;
                    objNationality.EntryDate = Obj.EntryDate;
                    //objNationality.UpdateUserID = Obj.UpdateUserID;
                    //objNationality.UpdateDate = Obj.UpdateDate;
                    db.MTNationalityMasters.Add(objNationality);
                    break;

                case "mnuActivity":
                    MTActivitymaster objAcitivity = new MTActivitymaster();
                    // objAcitivity.AutoID = Obj.MainID;
                    objAcitivity.ActivityNames = Obj.MainName;
                    objAcitivity.EntryUID = Obj.EntryUserID;
                    objAcitivity.EntDate = Obj.EntryDate;
                    //objAcitivity.UpateUID = Obj.UpdateUserID;
                    //objAcitivity.UpDate = Obj.UpdateDate;
                    db.MTActivitymasters.Add(objAcitivity);
                    break;

                case "mnuLocality":
                    MTLocalityMaster objLocal = new MTLocalityMaster();
                    // objLocal.AutoID = Obj.MainID;
                    objLocal.LocalityNames = Obj.MainName;
                    objLocal.EntryUserID = Obj.EntryUserID;
                    objLocal.EntryDate = Obj.EntryDate;
                    //objLocal.UpdateUserID = Obj.UpdateUserID;
                    //objLocal.UpdateDate = Obj.UpdateDate;
                    db.MTLocalityMasters.Add(objLocal);
                    break;

                case "mnuDocument":
                    MTDocumentMaster objDoct = new MTDocumentMaster();
                    //  objDoct.AutoID = Obj.MainID;
                    objDoct.DocumentName = Obj.MainName;
                    objDoct.EntryUserID = Obj.EntryUserID;
                    objDoct.EntryDate = Obj.EntryDate;
                    objDoct.UpdateUserID = Obj.UpdateUserID;
                    objDoct.UpdateDate = Obj.UpdateDate;
                    db.MTDocumentMasters.Add(objDoct);
                    break;
                #endregion

                #region Staff

                case "mnuSavingHeads":
                    PRLTaxSavingHeads objSavingHeads = new PRLTaxSavingHeads();
                    //objSavingHeads.Saving_Head_ID = Obj.MainID;
                    objSavingHeads.Saving_Head_Name = Obj.MainName;
                    objSavingHeads.EntryUserID = Obj.EntryUserID;
                    objSavingHeads.EntryDate = Obj.EntryDate;
                    objSavingHeads.UpdateUserID = Obj.UpdateUserID;
                    objSavingHeads.UpdateDate = Obj.UpdateDate;
                    db.PRLTaxSavingHeadss.Add(objSavingHeads);
                    break;
                case "mnuDeductionHeads":
                    PRLTaxDeductionHeads objDedHeads = new PRLTaxDeductionHeads();
                    //objDedHeads.Deduction_Head_ID = Obj.MainID;
                    objDedHeads.Deduction_Head_Name = Obj.MainName;
                    objDedHeads.EntryUserID = Obj.EntryUserID;
                    objDedHeads.EntryDate = Obj.EntryDate;
                    objDedHeads.UpdateUserID = Obj.UpdateUserID;
                    objDedHeads.UpdateDate = Obj.UpdateDate;
                    db.PRLTaxDeductionHeadss.Add(objDedHeads);
                    break;
                case "mnuAccountType":
                    PRLAccountTypeMaster objAccountType = new PRLAccountTypeMaster();
                    //objAccountType.AutoID = Obj.MainID;
                    objAccountType.ACTName = Obj.MainName;
                    objAccountType.ACTPriority = Obj.PriorityNo;
                    objAccountType.EntryUserID = Obj.EntryUserID;
                    objAccountType.EntryDate = Obj.EntryDate;
                    objAccountType.UpdateUserID = Obj.UpdateUserID;
                    objAccountType.UpdateDate = Obj.UpdateDate;
                    db.PRLAccountTypeMasters.Add(objAccountType);
                    break;
                case "mnuStaffCategory":
                    PRLStaffCategoryMaster objStaffCategory = new PRLStaffCategoryMaster();
                    //objStaffCategory.AutoID = Obj.MainID;
                    objStaffCategory.SCategory = Obj.MainName;
                    objStaffCategory.SCPriority = Obj.PriorityNo;
                    objStaffCategory.EntryUserID = Obj.EntryUserID;
                    objStaffCategory.EntryDate = Obj.EntryDate;
                    objStaffCategory.UpdateUserID = Obj.UpdateUserID;
                    objStaffCategory.UpdateDate = Obj.UpdateDate;
                    db.PRLStaffCategoryMasters.Add(objStaffCategory);
                    break;
                case "mnuDepartment":
                    PRLDepartmentMaster objDepartment = new PRLDepartmentMaster();
                    //objDepartment.AutoID = Obj.MainID;
                    objDepartment.DName = Obj.MainName;
                    objDepartment.Dorder = Obj.PriorityNo;
                    objDepartment.EntryUserID = Obj.EntryUserID;
                    objDepartment.EntryDate = Obj.EntryDate;
                    objDepartment.UpdateUserID = Obj.UpdateUserID;
                    objDepartment.UpdateDate = Obj.UpdateDate;
                    db.PRLDepartmentMasters.Add(objDepartment);
                    break;
                case "mnuOccupt":
                    PRLOccupationMaster objOccupation = new PRLOccupationMaster();
                    //objOccupation.PRLOccupationID = Obj.MainID;
                    objOccupation.QName = Obj.MainName;
                    objOccupation.EntryUserID = Obj.EntryUserID;
                    objOccupation.EntryDate = Obj.EntryDate;
                    objOccupation.UpdateUserID = Obj.UpdateUserID;
                    objOccupation.UpdateDate = Obj.UpdateDate;
                    db.PRLOccupationMasters.Add(objOccupation);
                    break;
                case "mnuPDesignation":
                    PRLDesignationMaster objDesignation = new PRLDesignationMaster();
                    //objDesignation.AutoID = Obj.MainID;
                    objDesignation.DName = Obj.MainName;
                    objDesignation.Priority = Obj.PriorityNo;
                    objDesignation.EntryUserID = Obj.EntryUserID;
                    objDesignation.EntryUserID = Obj.EntryUserID;
                    objDesignation.UpdateUserID = Obj.UpdateUserID;
                    objDesignation.UpdateDate = Obj.UpdateDate;
                    db.PRLDesignationMasters.Add(objDesignation);
                    break;
                case "mnuEducationalQualification":
                    PRLEducationalQualificationMaster objEductionalQualification = new PRLEducationalQualificationMaster();
                    //objEductionalQualification.AutoID = Obj.MainID;
                    objEductionalQualification.QName = Obj.MainName;
                    objEductionalQualification.Priority = Obj.PriorityNo;
                    objEductionalQualification.EntryUserID = Obj.EntryUserID;
                    objEductionalQualification.EntryDate = Obj.EntryDate;
                    objEductionalQualification.UpdateUserID = Obj.UpdateUserID;
                    objEductionalQualification.UpdateDate = Obj.UpdateDate;
                    db.PRLEducationalQualificationMasters.Add(objEductionalQualification);
                    break;
                case "mnuEducationalSubjects":
                    PRLEducationalSubjectMaster objEdSubjects = new PRLEducationalSubjectMaster();
                    //objEdSubjects.AutoID = Obj.MainID;
                    objEdSubjects.SubName = Obj.MainName;
                    objEdSubjects.EntryUserID = Obj.EntryUserID;
                    objEdSubjects.EntryDate = objEdSubjects.EntryDate;
                    objEdSubjects.UpdateUserID = objEdSubjects.UpdateUserID;
                    objEdSubjects.UpdateDate = objEdSubjects.UpdateDate;
                    db.PRLEducationalSubjectMasters.Add(objEdSubjects);
                    break;
                case "mnuNatureOfAppointment":
                    PRLNatureOfAppointmentMaster objNOA = new PRLNatureOfAppointmentMaster();
                    //objNOA.AutoID = Obj.MainID;
                    objNOA.NOA = Obj.MainName;
                    objNOA.EntryUserID = Obj.EntryUserID;
                    objNOA.EntryDate = Obj.EntryDate;
                    objNOA.UpdateUserID = Obj.UpdateUserID;
                    objNOA.UpdateDate = Obj.UpdateDate;
                    db.PRLNatureOfAppointmentMasters.Add(objNOA);
                    break;

                case "mnuCategoryMaster":
                    PRLLeaveCategoryMaster objLeave = new PRLLeaveCategoryMaster();
                    //objLeave.AutoID = Obj.MainID;
                    objLeave.LeaveCategoryName = Obj.MainName;
                    objLeave.EntryUserID = Obj.EntryUserID;
                    objLeave.EntryDate = Obj.EntryDate;
                    objLeave.UpdateUserID = Obj.UpdateUserID;
                    objLeave.UpdateDate = Obj.UpdateDate;
                    db.PRLLeaveCategoryMasters.Add(objLeave);
                    break;

                case "mnuDATypeMaster":
                    PRLDATypeMAster objDA = new PRLDATypeMAster();
                    //objDA.DAID = Obj.MainID;
                    objDA.DAType = Obj.MainName;
                    objDA.EntryUserID = Obj.EntryUserID;
                    objDA.EntryDate = Obj.EntryDate;
                    objDA.UpdateUserID = Obj.UpdateUserID;
                    objDA.UpdateDate = Obj.UpdateDate;
                    db.PRLDATypeMAsters.Add(objDA);
                    break;
                #endregion

                #region Fee

                case "mnuStreamMaster":
                    FeeStreamMaster objStream = new FeeStreamMaster();
                    objStream.AutoID = Obj.MainID;
                    objStream.FeeStreamName = Obj.MainName;
                    objStream.SchoolID = SchoolID;
                    objStream.EntryUserID = Obj.EntryUserID;
                    objStream.EntryDate = Obj.EntryDate;
                    objStream.UpdateUserID = Obj.UpdateUserID;
                    objStream.UpdateDate = Obj.UpdateDate;
                    db.FeeStreamMasters.Add(objStream);
                    break;
                case "mnuConcessionType":
                    FEEConcessionTypeMaster objConcessionType = new FEEConcessionTypeMaster();
                    objConcessionType.AutoID = Obj.MainID;
                    objConcessionType.CTypeName = Obj.MainName;
                    objConcessionType.SchoolID = SchoolID;
                    objConcessionType.EntryUserID = Obj.EntryUserID;
                    objConcessionType.EntryDate = Obj.EntryDate;
                    objConcessionType.UpdateUserID = Obj.UpdateUserID;
                    objConcessionType.UpdateDate = Obj.UpdateDate;
                    db.FEEConcessionTypeMasters.Add(objConcessionType);
                    break;
                case "mnuBankMaster":
                    FEEBankMaster objBank = new FEEBankMaster();
                    objBank.AutoID = Obj.MainID;
                    objBank.FBName = Obj.MainName;
                    objBank.SchoolID = SchoolID;
                    objBank.EntryUserID = Obj.EntryUserID;
                    objBank.EntryDate = Obj.EntryDate;
                    objBank.UpdateUserID = Obj.UpdateUserID;
                    objBank.UpdateDate = Obj.UpdateDate;
                    db.FEEBankMasters.Add(objBank);
                    break;

                #endregion
                #region Transport
                case "mnuStopGroupMaster":
                    TRBusStopGroupMaster objSG = new TRBusStopGroupMaster();
                    objSG.AutoID = Obj.MainID;
                    objSG.BusStopGroupName = Obj.MainName;
                    objSG.SchoolID = Convert.ToInt32(Session["SchoolID"].ToString());
                    objSG.EntryUserID = Convert.ToInt32(Session["UID"].ToString());
                    objSG.EntryDate = DateTime.Now;
                    db.TRBusStopGroupMasters.Add(objSG);
                    break;

                case "mnuMonthMaster":
                    TRBusMonthMaster objMonth = new TRBusMonthMaster();
                    objMonth.AutoID = Obj.MainID;
                    objMonth.MonthName = Obj.MainName;
                    objMonth.Priority = (db.TRBusMonthMasters.Max(model => (int?)model.Priority) ?? 0) + 1;
                    objMonth.SchoolID = Convert.ToInt32(Session["SchoolID"].ToString());
                    objMonth.EntryUserID = Convert.ToInt32(Session["UID"].ToString());
                    objMonth.EntryDate = DateTime.Now;

                    db.TRBusMonthMasters.Add(objMonth);
                    break;

                #endregion


                #region Question Bank
                case "mnuQuestionSubject":
                    QuestionBankSubjectMaster objSub = new QuestionBankSubjectMaster();
                    objSub.SubName = Obj.MainName;
                    objSub.EntryUserID = Convert.ToInt32(Session["UID"].ToString());
                    objSub.EntryDate = DateTime.Now;
                    db.QuestionBankSubjectMasters.Add(objSub);
                    break;
                #endregion

                #region  Health
                case "mnuAllergy":
                    MTAllergyMaster objHA = new MTAllergyMaster();
                    objHA.AutoID = Obj.MainID;
                    objHA.AllergyNames = Obj.MainName;
                    objHA.EntryUserID = Obj.EntryUserID;
                    objHA.EntryDate = Obj.EntryDate;
                    objHA.UpdateUserID = Convert.ToInt32(Session["UID"].ToString());
                    objHA.UpdateDate = DateTime.Now;
                    db.MTAllergyMasters.Add(objHA);
                    break;
                case "mnuDisease":
                    MTDiseaseMaster objHD = new MTDiseaseMaster();
                    objHD.AutoID = Obj.MainID;
                    objHD.DiseaseNames = Obj.MainName;
                    objHD.EntryUserID = Obj.EntryUserID;
                    objHD.EntryDate = Obj.EntryDate;
                    objHD.UpdateUserID = Convert.ToInt32(Session["UID"].ToString());
                    objHD.UpdateDate = DateTime.Now;
                    db.MTDiseaseMasters.Add(objHD);
                    break;
                case "mnuImmunization":
                    MTImmunizationMaster objHI = new MTImmunizationMaster();
                    objHI.AutoID = Obj.MainID;
                    objHI.ImmunizationNames = Obj.MainName;
                    objHI.EntryUserID = Obj.EntryUserID;
                    objHI.EntryDate = Obj.EntryDate;
                    objHI.UpdateUserID = Convert.ToInt32(Session["UID"].ToString());
                    objHI.UpdateDate = DateTime.Now;
                    db.MTImmunizationMasters.Add(objHI);
                    break;
                case "mnuMeasurement":
                    MTMeasurementMaster objHMs = new MTMeasurementMaster();
                    objHMs.AutoID = Obj.MainID;
                    objHMs.MeasurementNames = Obj.MainName;
                    objHMs.EntryUserID = Obj.EntryUserID;
                    objHMs.EntryDate = Obj.EntryDate;
                    objHMs.UpdateUserID = Convert.ToInt32(Session["UID"].ToString());
                    objHMs.UpdateDate = DateTime.Now;
                    db.MTMeasurementMasters.Add(objHMs);
                    break;
                case "mnuDoctor":
                    MTDoctorMaster objHDo = new MTDoctorMaster();
                    objHDo.AutoID = Obj.MainID;
                    objHDo.DoctorNames = Obj.MainName;
                    objHDo.EntryUserID = Obj.EntryUserID;
                    objHDo.EntryDate = Obj.EntryDate;
                    objHDo.UpdateUserID = Convert.ToInt32(Session["UID"].ToString());
                    objHDo.UpdateDate = DateTime.Now;
                    db.MTDoctorMasters.Add(objHDo);
                    break;
                case "mnuNurse":
                    MTNurseMaster objHNu = new MTNurseMaster();
                    objHNu.AutoID = Obj.MainID;
                    objHNu.NurseNames = Obj.MainName;
                    objHNu.EntryUserID = Obj.EntryUserID;
                    objHNu.EntryDate = Obj.EntryDate;
                    objHNu.UpdateUserID = Convert.ToInt32(Session["UID"].ToString());
                    objHNu.UpdateDate = DateTime.Now;
                    db.MTNurseMaster.Add(objHNu);
                    break;
                case "mnuRecord":
                    MTRecordMaster objHRe = new MTRecordMaster();
                    objHRe.AutoID = Obj.MainID;
                    objHRe.RecordNames = Obj.MainName;
                    objHRe.EntryUserID = Obj.EntryUserID;
                    objHRe.EntryDate = Obj.EntryDate;
                    objHRe.UpdateUserID = Convert.ToInt32(Session["UID"].ToString());
                    objHRe.UpdateDate = DateTime.Now;
                    db.MTRecordMasters.Add(objHRe);
                    break;
                #endregion

                #region Discipline
                case "mnuDLGroup":
                    DLDisciplineGroupMaster objDLE = new DLDisciplineGroupMaster();
                    // objDLE.AutoID = Obj.MainID;
                    objDLE.GName = Obj.MainName;
                    objDLE.SCID = Convert.ToInt32(Session["SchoolID"].ToString());
                    objDLE.AcaStarts = Convert.ToInt32(Session["Acastart"].ToString());
                    objDLE.EntryUserID = Obj.EntryUserID;
                    objDLE.EntryDate = Obj.EntryDate;

                    db.DLDisciplineGroupMasters.Add(objDLE);
                    break;


                #endregion

                #region School Online

                case "mnuAreaMaster":
                    MTFeedBackAreaMaster objFeedArea = new MTFeedBackAreaMaster();
                    objFeedArea.AreaName = Obj.MainName;
                    objFeedArea.PriorityNo = Obj.PriorityNo;
                    objFeedArea.SchoolIDs = CCSession.SchoolID;
                    objFeedArea.EntryUserID = Obj.EntryUserID;
                    objFeedArea.EntryDate = Obj.EntryDate;
                    db.MTFeedBackAreaMasters.Add(objFeedArea);
                    break;

                case "mnuParameterMaster":
                    MTPARAMETERMASTER objPara = new MTPARAMETERMASTER();
                    objPara.ParameterName = Obj.MainName;
                    objPara.PriorityNo = Obj.PriorityNo;
                    objPara.EntryUserID = Obj.EntryUserID;
                    objPara.EntryDate = Obj.EntryDate;
                    db.MTParameterMasters.Add(objPara);
                    break;

                #endregion

                default:
                    break;
            }
        }

        private void updateObjData(MTMainMaster Obj)
        {
            switch (ids[2])
            {
                #region Preference
                case "mnuHouse":
                    MThousemaster objHouse = db.MThousemasters.Find(Obj.MainID);
                    objHouse.HouseName = Obj.MainName;
                    objHouse.UpdateUserID = Obj.UpdateUserID;
                    objHouse.UpdateDate = Obj.UpdateDate;
                    break;
                case "mnuSocialCategory":
                    MTCategoryMaster objCat = db.MTCategoryMasters.Find(Obj.MainID);
                    objCat.CategoryName = Obj.MainName;
                    objCat.UpdateUserID = Obj.UpdateUserID;
                    objCat.UpdateDate = Obj.UpdateDate;
                    break;

                case "mnuReligion":
                    MTReligionMaster objReligion = db.MTReligionMasters.Find(Obj.MainID);
                    objReligion.ReligionName = Obj.MainName;
                    objReligion.UpdateUserID = Obj.UpdateUserID;
                    objReligion.UpdateDate = Obj.UpdateDate;
                    break;

                case "mnuTitle":
                    MTTitleMaster objTitle = db.MTTitleMasters.Find(Obj.MainID);
                    objTitle.TitleName = Obj.MainName;
                    objTitle.UpdateUserID = Obj.UpdateUserID;
                    objTitle.UpdateDate = Obj.UpdateDate;
                    break;

                case "mnuMaritalStatus":
                    MTMaritalStatusMaster objMartial = db.MTMaritalStatusMasters.Find(Obj.MainID);
                    objMartial.MaritalStatusName = Obj.MainName;
                    objMartial.UpdateUserID = Obj.UpdateUserID;
                    objMartial.UpdateDate = Obj.UpdateDate;
                    break;

                case "mnuBloodGroup":
                    MTBloodGroupMaster objBlood = db.MTBloodGroupMasters.Find(Obj.MainID);
                    objBlood.BloodGroupName = Obj.MainName;
                    objBlood.UpdateUserID = Obj.UpdateUserID;
                    objBlood.UpdateDate = Obj.UpdateDate;
                    break;
                case "mnuMotherTongue":
                    MTMotherTongueMaster objMotherToungue = db.MTMotherTongueMasters.Find(Obj.MainID);
                    objMotherToungue.MName = Obj.MainName;
                    objMotherToungue.UpdateUserID = Obj.UpdateUserID;
                    objMotherToungue.UpdateDate = Obj.UpdateDate;
                    break;

                case "mnuQualification":
                    MTPQualificationMaster objPQulf = db.MTPQualificationMasters.Find(Obj.MainID);
                    objPQulf.PQlifiName = Obj.MainName;
                    objPQulf.UpdateUserID = Obj.UpdateUserID;
                    objPQulf.UpdateDate = Obj.UpdateDate;
                    break;

                case "mnuDesignation":
                    MTPDesignationMaster objPDesign = db.MTPDesignationMasters.Find(Obj.MainID);
                    objPDesign.PDesgName = Obj.MainName;
                    objPDesign.UpdateUserID = Obj.UpdateUserID;
                    objPDesign.UpdateDate = Obj.UpdateDate;
                    break;

                case "mnuOccupation":
                    MTPOccupationMaster objPOcc = db.MTPOccupationMasters.Find(Obj.MainID);
                    objPOcc.POccupName = Obj.MainName;
                    objPOcc.UpdateUserID = Obj.UpdateUserID;
                    objPOcc.UpdateDate = Obj.UpdateDate;
                    break;
                case "mnuClass":
                    MTClassMaster objClass = db.MTClassMasters.Find(Obj.MainID);
                    objClass.ClassName = Obj.MainName;
                    objClass.PriorityNo = Obj.PriorityNo;
                    objClass.UpdateUserID = Obj.UpdateUserID;
                    objClass.UpdateDate = Obj.UpdateDate;
                    break;
                case "mnuSection":
                    MTSectionMaster objSection = db.MTSectionMasters.Find(Obj.MainID);
                    objSection.SectionName = Obj.MainName;
                    objSection.UpdateUserID = Obj.UpdateUserID;
                    objSection.UpdateDate = Obj.UpdateDate;
                    break;
                case "mnuBoard":
                    MTBoardMaster objBoard = db.MTBoardMasters.Find(Obj.MainID);
                    objBoard.BoardName = Obj.MainName;
                    objBoard.UpdateUserID = Obj.UpdateUserID;
                    objBoard.UpdateDate = Obj.UpdateDate;
                    break;
                case "mnuBoardingCategory":
                    MTBoardingCategoryMaster objBoardingCategory = db.MTBoardingCategoryMasters.Find(Obj.MainID);
                    objBoardingCategory.BoardingCategoryName = Obj.MainName;
                    objBoardingCategory.UpdateUserID = Obj.UpdateUserID;
                    objBoardingCategory.UpdateDate = Obj.UpdateDate;
                    break;
                case "mnuCountry":
                    MTCountryMaster objCountry = db.MTCountryMasters.Find(Obj.MainID);
                    objCountry.CountryName = Obj.MainName;
                    objCountry.UpdateUserID = Obj.UpdateUserID;
                    objCountry.UpdateDate = Obj.UpdateDate;
                    break;
                case "mnuNationality":
                    MTNationalityMaster objNationality = db.MTNationalityMasters.Find(Obj.MainID);
                    objNationality.NationalityName = Obj.MainName;
                    objNationality.UpdateUserID = Obj.UpdateUserID;
                    objNationality.UpdateDate = Obj.UpdateDate;
                    break;
                case "mnuDocument":
                    MTDocumentMaster objDocument = db.MTDocumentMasters.Find(Obj.MainID);
                    objDocument.DocumentName = Obj.MainName;
                    objDocument.UpdateUserID = Obj.UpdateUserID;
                    objDocument.UpdateDate = Obj.UpdateDate;
                    break;
                case "mnuActivity":
                    MTActivitymaster objActitvity = db.MTActivitymasters.Find(Obj.MainID);
                    objActitvity.ActivityNames = Obj.MainName;
                    objActitvity.UpateUID = Obj.UpdateUserID;
                    objActitvity.UpDate = Obj.UpdateDate;
                    break;
                case "mnuLocality":
                    MTLocalityMaster objLocal = db.MTLocalityMasters.Find(Obj.MainID);
                    objLocal.LocalityNames = Obj.MainName;
                    objLocal.UpdateUserID = Obj.UpdateUserID;
                    objLocal.UpdateDate = Obj.UpdateDate;
                    break;
                #endregion

                #region Staff

                case "mnuDATypeMaster":
                    PRLDATypeMAster objDA = db.PRLDATypeMAsters.Find(Obj.MainID);
                    objDA.DAType = Obj.MainName;
                    objDA.UpdateUserID = Obj.UpdateUserID;
                    objDA.UpdateDate = Obj.UpdateDate;
                    break;

                case "mnuAccountType":
                    PRLAccountTypeMaster objAccountType = db.PRLAccountTypeMasters.Find(Obj.MainID);
                    objAccountType.ACTName = Obj.MainName;
                    objAccountType.ACTPriority = Obj.PriorityNo;
                    objAccountType.UpdateUserID = Obj.UpdateUserID;
                    objAccountType.UpdateDate = Obj.UpdateDate;
                    break;
                case "mnuStaffCategory":
                    PRLStaffCategoryMaster objStaffCategory = db.PRLStaffCategoryMasters.Find(Obj.MainID);
                    objStaffCategory.SCategory = Obj.MainName;
                    objStaffCategory.SCPriority = Obj.PriorityNo;
                    objStaffCategory.UpdateUserID = Obj.UpdateUserID;
                    objStaffCategory.UpdateDate = Obj.UpdateDate;
                    break;
                case "mnuDepartment":
                    PRLDepartmentMaster objDepartment = db.PRLDepartmentMasters.Find(Obj.MainID);
                    objDepartment.DName = Obj.MainName;
                    objDepartment.Dorder = Obj.PriorityNo;
                    objDepartment.UpdateUserID = Obj.UpdateUserID;
                    objDepartment.UpdateDate = Obj.UpdateDate;
                    break;
                case "mnuOccupt":
                    PRLOccupationMaster objOccupation = db.PRLOccupationMasters.Find(Obj.MainID);
                    objOccupation.QName = Obj.MainName;
                    objOccupation.UpdateUserID = Obj.UpdateUserID;
                    objOccupation.UpdateDate = Obj.UpdateDate;
                    break;
                case "mnuPDesignation":
                    PRLDesignationMaster objDesignation = db.PRLDesignationMasters.Find(Obj.MainID);
                    objDesignation.DName = Obj.MainName;
                    objDesignation.Priority = Obj.PriorityNo;
                    objDesignation.UpdateUserID = Obj.UpdateUserID;
                    objDesignation.UpdateDate = Obj.UpdateDate;
                    break;
                case "mnuEducationalQualification":
                    PRLEducationalQualificationMaster objEductionalQualification = db.PRLEducationalQualificationMasters.Find(Obj.MainID);
                    objEductionalQualification.QName = Obj.MainName;
                    objEductionalQualification.Priority = Obj.PriorityNo;
                    objEductionalQualification.UpdateUserID = Obj.UpdateUserID;
                    objEductionalQualification.UpdateDate = Obj.UpdateDate;
                    break;
                case "mnuEducationalSubjects":
                    PRLEducationalSubjectMaster objEDSubjects = db.PRLEducationalSubjectMasters.Find(Obj.MainID);
                    objEDSubjects.SubName = Obj.MainName;
                    objEDSubjects.UpdateUserID = Obj.UpdateUserID;
                    objEDSubjects.UpdateDate = objEDSubjects.UpdateDate;
                    break;
                case "mnuNatureOfAppointment":
                    PRLNatureOfAppointmentMaster objNOA = db.PRLNatureOfAppointmentMasters.Find(Obj.MainID);
                    objNOA.NOA = Obj.MainName;
                    objNOA.UpdateUserID = Obj.UpdateUserID;
                    objNOA.UpdateDate = Obj.UpdateDate;
                    break;
                case "mnuSavingHeads":
                    PRLTaxSavingHeads objSavingHeads = db.PRLTaxSavingHeadss.Find(Obj.MainID);
                    objSavingHeads.Saving_Head_Name = Obj.MainName;
                    objSavingHeads.UpdateUserID = Obj.UpdateUserID;
                    objSavingHeads.UpdateDate = Obj.UpdateDate;
                    break;
                case "mnuDeductionHeads":
                    PRLTaxDeductionHeads objDedHeads = db.PRLTaxDeductionHeadss.Find(Obj.MainID);
                    objDedHeads.Deduction_Head_Name = Obj.MainName;
                    objDedHeads.UpdateUserID = Obj.UpdateUserID;
                    objDedHeads.UpdateDate = Obj.UpdateDate;
                    break;

                case "mnuCategoryMaster":
                    PRLLeaveCategoryMaster objLeave = db.PRLLeaveCategoryMasters.Find(Obj.MainID);
                    objLeave.LeaveCategoryName = Obj.MainName;
                    objLeave.UpdateUserID = Obj.UpdateUserID;
                    objLeave.UpdateDate = Obj.UpdateDate;
                    break;
                #endregion

                #region Fee

                case "mnuStreamMaster":
                    FeeStreamMaster objStream = db.FeeStreamMasters.Find(Obj.MainID);
                    objStream.FeeStreamName = Obj.MainName;
                    objStream.UpdateUserID = Obj.UpdateUserID;
                    objStream.UpdateDate = Obj.UpdateDate;
                    break;
                case "mnuConcessionType":
                    FEEConcessionTypeMaster objConcessionType = db.FEEConcessionTypeMasters.Find(Obj.MainID);
                    objConcessionType.CTypeName = Obj.MainName;
                    objConcessionType.UpdateUserID = Obj.UpdateUserID;
                    objConcessionType.UpdateDate = Obj.UpdateDate;
                    break;
                case "mnuBankMaster":
                    FEEBankMaster objBank = db.FEEBankMasters.Find(Obj.MainID);
                    objBank.FBName = Obj.MainName;
                    objBank.UpdateUserID = Obj.UpdateUserID;
                    objBank.UpdateDate = Obj.UpdateDate;
                    break;
                #endregion

                #region Transport
                case "mnuStopGroupMaster":
                    TRBusStopGroupMaster objSG = db.TRBusStopGroupMasters.Find(Obj.MainID);
                    objSG.BusStopGroupName = Obj.MainName;
                    objSG.UpdateUserID = Convert.ToInt32(Session["UID"].ToString());
                    objSG.UpdateDate = DateTime.Now;
                    break;

                case "mnuMonthMaster":
                    TRBusMonthMaster objMonth = db.TRBusMonthMasters.Find(Obj.MainID);
                    objMonth.MonthName = Obj.MainName;
                    //objMonth.Priority = Obj.PriorityNo;
                    objMonth.UpdateUserID = Convert.ToInt32(Session["UID"].ToString());
                    objMonth.UpdateDate = DateTime.Now;
                    break;

                #endregion

                #region Question Bank
                case "mnuQuestionSubject":
                    QuestionBankSubjectMaster objSub = db.QuestionBankSubjectMasters.Find(Obj.MainID);
                    objSub.SubName = Obj.MainName;
                    objSub.UpdateUserID = Convert.ToInt32(Session["UID"].ToString());
                    objSub.UpdateDate = DateTime.Now;
                    break;
                #endregion


                #region  Health
                case "mnuAllergy":
                    MTAllergyMaster objHUA = db.MTAllergyMasters.Find(Obj.MainID);
                    objHUA.AllergyNames = Obj.MainName;
                    objHUA.UpdateUserID = Obj.UpdateUserID;
                    objHUA.UpdateDate = Obj.UpdateDate;
                    break;
                case "mnuDisease":
                    MTDiseaseMaster objHUD = db.MTDiseaseMasters.Find(Obj.MainID);
                    objHUD.DiseaseNames = Obj.MainName;
                    objHUD.UpdateUserID = Obj.UpdateUserID;
                    objHUD.UpdateDate = Obj.UpdateDate;
                    break;
                case "mnuImmunization":
                    MTImmunizationMaster objHUI = db.MTImmunizationMasters.Find(Obj.MainID);
                    objHUI.ImmunizationNames = Obj.MainName;
                    objHUI.UpdateUserID = Obj.UpdateUserID;
                    objHUI.UpdateDate = Obj.UpdateDate;
                    break;
                case "mnuMeasurement":
                    MTMeasurementMaster objHUM = db.MTMeasurementMasters.Find(Obj.MainID);
                    objHUM.MeasurementNames = Obj.MainName;
                    objHUM.UpdateUserID = Obj.UpdateUserID;
                    objHUM.UpdateDate = Obj.UpdateDate;
                    break;
                case "mnuDoctor":
                    MTDoctorMaster objHUDoc = db.MTDoctorMasters.Find(Obj.MainID);
                    objHUDoc.DoctorNames = Obj.MainName;
                    objHUDoc.UpdateUserID = Obj.UpdateUserID;
                    objHUDoc.UpdateDate = Obj.UpdateDate;
                    break;
                case "mnuNurse":
                    MTNurseMaster objHUNur = db.MTNurseMaster.Find(Obj.MainID);
                    objHUNur.NurseNames = Obj.MainName;
                    objHUNur.UpdateUserID = Obj.UpdateUserID;
                    objHUNur.UpdateDate = Obj.UpdateDate;
                    break;
                case "mnuRecord":
                    MTRecordMaster objHURec = db.MTRecordMasters.Find(Obj.MainID);
                    objHURec.RecordNames = Obj.MainName;
                    objHURec.UpdateUserID = Obj.UpdateUserID;
                    objHURec.UpdateDate = Obj.UpdateDate;
                    break;
                #endregion

                #region Discipline
                case "mnuDLGroup":
                    DLDisciplineGroupMaster objDLE = db.DLDisciplineGroupMasters.Find(Obj.MainID);
                    objDLE.GName = Obj.MainName;
                    objDLE.SCID = Convert.ToInt32(Session["SchoolID"].ToString());
                    objDLE.AcaStarts = Convert.ToInt32(Session["Acastart"].ToString());
                    objDLE.UpdateUserID = Convert.ToInt32(Session["UID"].ToString());
                    objDLE.UpdateDate = DateTime.Now;
                    break;


                #endregion

                #region School Online

                case "mnuAreaMaster":
                    MTFeedBackAreaMaster objFeedArea = db.MTFeedBackAreaMasters.Find(Obj.MainID);
                    objFeedArea.AreaName = Obj.MainName;
                    objFeedArea.PriorityNo = Obj.PriorityNo;
                    objFeedArea.UpdateUserID = Obj.UpdateUserID;
                    objFeedArea.UpdateDate = Obj.UpdateDate;
                    break;

                case "mnuParameterMaster":
                    MTPARAMETERMASTER objPara = db.MTParameterMasters.Find(Obj.MainID);
                    objPara.ParameterName = Obj.MainName;
                    objPara.PriorityNo = Obj.PriorityNo;
                    objPara.UpdateUserID = Obj.UpdateUserID;
                    objPara.UpdateDate = Obj.UpdateDate;
                    break;

                #endregion

                default:
                    break;
            }
        }

        private void removeObjData(int? id)
        {
            switch (ids[2])
            {
                #region Preference

                case "mnuHouse":
                    MThousemaster objHouse = db.MThousemasters.Find(id);
                    db.MThousemasters.Remove(objHouse);
                    break;
                case "mnuSocialCategory":
                    MTCategoryMaster objCat = db.MTCategoryMasters.Find(id);
                    db.MTCategoryMasters.Remove(objCat);
                    break;

                case "mnuReligion":
                    MTReligionMaster objReligion = db.MTReligionMasters.Find(id);
                    db.MTReligionMasters.Remove(objReligion);
                    break;
                case "mnuTitle":
                    MTTitleMaster objTitle = db.MTTitleMasters.Find(id);
                    db.MTTitleMasters.Remove(objTitle);
                    break;
                case "mnuMaritalStatus":
                    MTMaritalStatusMaster objMarital = db.MTMaritalStatusMasters.Find(id);
                    db.MTMaritalStatusMasters.Remove(objMarital);
                    break;
                case "mnuBloodGroup":
                    MTBloodGroupMaster objBloodgp = db.MTBloodGroupMasters.Find(id);
                    db.MTBloodGroupMasters.Remove(objBloodgp);
                    break;

                case "mnuOccupation":
                    MTPOccupationMaster objPOccupn = db.MTPOccupationMasters.Find(id);
                    db.MTPOccupationMasters.Remove(objPOccupn);
                    break;
                case "mnuQualification":
                    MTPQualificationMaster objPQualifn = db.MTPQualificationMasters.Find(id);
                    db.MTPQualificationMasters.Remove(objPQualifn);
                    break;
                case "mnuDesignation":
                    MTPDesignationMaster objPDesgn = db.MTPDesignationMasters.Find(id);
                    db.MTPDesignationMasters.Remove(objPDesgn);
                    break;
                case "mnuMotherTongue":
                    MTMotherTongueMaster objMotherToungue = db.MTMotherTongueMasters.Find(id);
                    db.MTMotherTongueMasters.Remove(objMotherToungue);
                    break;
                case "mnuClass":
                    MTClassMaster objClass = db.MTClassMasters.Find(id);
                    db.MTClassMasters.Remove(objClass);
                    break;
                case "mnuSection":
                    MTSectionMaster objSection = db.MTSectionMasters.Find(id);
                    db.MTSectionMasters.Remove(objSection);
                    break;
                case "mnuBoard":
                    MTBoardMaster objBoard = db.MTBoardMasters.Find(id);
                    db.MTBoardMasters.Remove(objBoard);
                    break;
                case "mnuBoardingCategory":
                    MTBoardingCategoryMaster objBoardingCategory = db.MTBoardingCategoryMasters.Find(id);
                    db.MTBoardingCategoryMasters.Remove(objBoardingCategory);
                    break;
                case "mnuCountry":
                    MTCountryMaster objCountry = db.MTCountryMasters.Find(id);
                    db.MTCountryMasters.Remove(objCountry);
                    break;
                case "mnuNationality":
                    MTNationalityMaster objNationality = db.MTNationalityMasters.Find(id);
                    db.MTNationalityMasters.Remove(objNationality);
                    break;
                case "mnuDocument":
                    MTDocumentMaster objDocument = db.MTDocumentMasters.Find(id);
                    db.MTDocumentMasters.Remove(objDocument);
                    break;
                case "mnuActivity":
                    MTActivitymaster objActitvity = db.MTActivitymasters.Find(id);
                    db.MTActivitymasters.Remove(objActitvity);
                    break;

                case "mnuLocality":
                    MTLocalityMaster objLocal = db.MTLocalityMasters.Find(id);
                    db.MTLocalityMasters.Remove(objLocal);
                    break;

                #endregion

                #region Staff
                case "mnuDATypeMaster":
                    PRLDATypeMAster objDAType = db.PRLDATypeMAsters.Find(id);
                    db.PRLDATypeMAsters.Remove(objDAType);
                    break;
                case "mnuAccountType":
                    PRLAccountTypeMaster objAccountType = db.PRLAccountTypeMasters.Find(id);
                    db.PRLAccountTypeMasters.Remove(objAccountType);
                    break;
                case "mnuStaffCategory":
                    PRLStaffCategoryMaster objStaffCategory = db.PRLStaffCategoryMasters.Find(id);
                    db.PRLStaffCategoryMasters.Remove(objStaffCategory);
                    break;
                case "mnuDepartment":
                    PRLDepartmentMaster objDepartment = db.PRLDepartmentMasters.Find(id);
                    db.PRLDepartmentMasters.Remove(objDepartment);
                    break;
                case "mnuOccupt":
                    PRLOccupationMaster objOccupation = db.PRLOccupationMasters.Find(id);
                    db.PRLOccupationMasters.Remove(objOccupation);
                    break;
                case "mnuPDesignation":
                    PRLDesignationMaster objDesignation = db.PRLDesignationMasters.Find(id);
                    db.PRLDesignationMasters.Remove(objDesignation);
                    break;
                case "mnuEducationalQualification":
                    PRLEducationalQualificationMaster objEductionalQualification = db.PRLEducationalQualificationMasters.Find(id);
                    db.PRLEducationalQualificationMasters.Remove(objEductionalQualification);
                    break;
                case "mnuEducationalSubjects":
                    PRLEducationalSubjectMaster objEdSubjects = db.PRLEducationalSubjectMasters.Find(id);
                    db.PRLEducationalSubjectMasters.Remove(objEdSubjects);
                    break;
                case "mnuNatureOfAppointment":
                    PRLNatureOfAppointmentMaster objNOA = db.PRLNatureOfAppointmentMasters.Find(id);
                    db.PRLNatureOfAppointmentMasters.Remove(objNOA);
                    break;
                case "mnuSavingHeads":
                    PRLTaxSavingHeads objSavingHeads = db.PRLTaxSavingHeadss.Find(id);
                    db.PRLTaxSavingHeadss.Remove(objSavingHeads);
                    break;
                case "mnuDeductionHeads":
                    PRLTaxDeductionHeads objDedHeads = db.PRLTaxDeductionHeadss.Find(id);
                    db.PRLTaxDeductionHeadss.Remove(objDedHeads);
                    break;

                case "mnuCategoryMaster":
                    PRLLeaveCategoryMaster objLeave = db.PRLLeaveCategoryMasters.Find(id);
                    db.PRLLeaveCategoryMasters.Remove(objLeave);
                    break;

                #endregion

                #region Fee

                case "mnuStreamMaster":
                    FeeStreamMaster objStream = db.FeeStreamMasters.Find(id);
                    db.FeeStreamMasters.Remove(objStream);
                    break;
                case "mnuConcessionType":
                    FEEConcessionTypeMaster objConcessionType = db.FEEConcessionTypeMasters.Find(id);
                    db.FEEConcessionTypeMasters.Remove(objConcessionType);
                    break;
                case "mnuBankMaster":
                    FEEBankMaster objBank = db.FEEBankMasters.Find(id);
                    db.FEEBankMasters.Remove(objBank);
                    break;
                #endregion

                #region Transport

                case "mnuStopGroupMaster":
                    TRBusStopGroupMaster objSG = db.TRBusStopGroupMasters.Find(id);
                    db.TRBusStopGroupMasters.Remove(objSG);
                    break;

                case "mnuMonthMaster":
                    TRBusMonthMaster objMon = db.TRBusMonthMasters.Find(id);
                    db.TRBusMonthMasters.Remove(objMon);
                    break;
                #endregion

                #region Question Bank

                case "mnuQuestionSubject":
                    QuestionBankSubjectMaster objSub = db.QuestionBankSubjectMasters.Find(id);
                    db.QuestionBankSubjectMasters.Remove(objSub);
                    break;

                #endregion

                #region  Health
                case "mnuAllergy":
                    MTAllergyMaster objHDAa = db.MTAllergyMasters.Find(id);
                    db.MTAllergyMasters.Remove(objHDAa);
                    break;
                case "mnuDisease":
                    MTDiseaseMaster objHDA = db.MTDiseaseMasters.Find(id);
                    db.MTDiseaseMasters.Remove(objHDA);
                    break;
                case "mnuImmunization":
                    MTImmunizationMaster objHDIm = db.MTImmunizationMasters.Find(id);
                    db.MTImmunizationMasters.Remove(objHDIm);
                    break;
                case "mnuMeasurement":
                    MTMeasurementMaster objHDMs = db.MTMeasurementMasters.Find(id);
                    db.MTMeasurementMasters.Remove(objHDMs);
                    break;
                case "mnuDoctor":
                    MTDoctorMaster objHDDoc = db.MTDoctorMasters.Find(id);
                    db.MTDoctorMasters.Remove(objHDDoc);
                    break;
                case "mnuNurse":
                    MTNurseMaster objHNur = db.MTNurseMaster.Find(id);
                    db.MTNurseMaster.Remove(objHNur);
                    break;
                case "mnuRecord":
                    MTNurseMaster objHDR = db.MTNurseMaster.Find(id);
                    db.MTNurseMaster.Remove(objHDR);
                    break;
                #endregion

                #region Discipline
                case "mnuDLGroup":
                    DLDisciplineGroupMaster objDLR = db.DLDisciplineGroupMasters.Find(id);
                    db.DLDisciplineGroupMasters.Remove(objDLR);
                    break;


                #endregion

                #region School Online

                case "mnuAreaMaster":
                    MTFeedBackAreaMaster objFeedArea = db.MTFeedBackAreaMasters.Find(id);
                    db.MTFeedBackAreaMasters.Remove(objFeedArea);
                    break;

                case "mnuParameterMaster":
                    MTPARAMETERMASTER objPara = db.MTParameterMasters.Find(id);
                    db.MTParameterMasters.Remove(objPara);
                    break;

                #endregion

                default:
                    break;
            }
        }

        private string CheckMain(MTMainMaster obj)
        {
            int SchoolID = (int)Session["SchoolID"];
            string str = "";
            switch (ids[2])
            {
                #region Preference

                case "mnuHouse":
                    if (db.MThousemasters.Where(model => (model.HouseName == obj.MainName && model.AutoID != obj.MainID)).Count() > 0)
                    {
                        str = "House Name Already Exists";
                    }
                    break;
                case "mnuSocialCategory":
                    if (db.MTCategoryMasters.Where(model => (model.CategoryName == obj.MainName && model.AutoID != obj.MainID)).Count() > 0)
                    {
                        str = "Social Category  Already Exists";
                    }
                    break;

                case "mnuReligion":
                    if (db.MTReligionMasters.Where(model => (model.ReligionName == obj.MainName && model.AutoID != obj.MainID)).Count() > 0)
                    {
                        str = "Religion Name Already Exists";
                    }
                    break;
                case "mnuTitle":
                    if (db.MTTitleMasters.Where(model => (model.TitleName == obj.MainName && model.AutoID != obj.MainID)).Count() > 0)
                    {
                        str = "Title Name Already Exists";
                    }
                    break;
                case "mnuMaritalStatus":
                    if (db.MTMaritalStatusMasters.Where(model => (model.MaritalStatusName == obj.MainName && model.AutoID != obj.MainID)).Count() > 0)
                    {
                        str = "Marital Status Already Exists";
                    }
                    break;
                case "mnuBloodGroup":
                    if (db.MTBloodGroupMasters.Where(model => (model.BloodGroupName == obj.MainName && model.AutoID != obj.MainID)).Count() > 0)
                    {
                        str = "BloodGroup Name Already Exists";
                    }
                    break;

                case "mnuClass":
                    if (db.MTClassMasters.Where(model => (model.ClassName == obj.MainName && model.AutoID != obj.MainID)).Count() > 0)
                    {
                        str = "Class Name Already Exists";
                    }

                    if (db.MTClassMasters.Where(model => (model.PriorityNo == obj.PriorityNo && model.AutoID != obj.MainID)).Count() > 0)
                    {
                        str = "Priority No Already Exists";
                    }
                    break;
                case "mnuSection":
                    if (db.MTSectionMasters.Where(model => (model.SectionName == obj.MainName && model.AutoID != obj.MainID)).Count() > 0)
                    {
                        str = "Section Name Already Exists";
                    }
                    break;
                case "mnuBoard":
                    if (db.MTBoardMasters.Where(model => (model.BoardName == obj.MainName && model.AutoID != obj.MainID)).Count() > 0)
                    {
                        str = "Board Name Already Exists";
                    }
                    break;
                case "mnuBoardingCategory":
                    if (db.MTBoardingCategoryMasters.Where(model => (model.BoardingCategoryName == obj.MainName && model.AutoID != obj.MainID)).Count() > 0)
                    {
                        str = "Boarding Category Name Already Exists";
                    }
                    break;
                case "mnuCountry":
                    if (db.MTCountryMasters.Where(model => (model.CountryName == obj.MainName && model.AutoID != obj.MainID)).Count() > 0)
                    {
                        str = "Country Name Already Exists";
                    }
                    break;
                case "mnuNationality":
                    if (db.MTNationalityMasters.Where(model => (model.NationalityName == obj.MainName && model.AutoID != obj.MainID)).Count() > 0)
                    {
                        str = "Nationality Name Already Exists";
                    }
                    break;
                case "mnuDocument":
                    if (db.MTDocumentMasters.Where(model => (model.DocumentName == obj.MainName && model.AutoID != obj.MainID)).Count() > 0)
                    {
                        str = "Document Name Already Exists";
                    }
                    break;
                case "mnuActivity":
                    if (db.MTActivitymasters.Where(model => (model.ActivityNames == obj.MainName && model.AutoID != obj.MainID)).Count() > 0)
                    {
                        str = "Activity Already Exists";
                    }
                    break;
                case "mnuLocality":
                    if (db.MTLocalityMasters.Where(model => (model.LocalityNames == obj.MainName && model.AutoID != obj.MainID)).Count() > 0)
                    {
                        str = "Locality Already Exists";
                    }
                    break;
                case "mnuMotherTongue":
                    if (db.MTMotherTongueMasters.Where(model => (model.MName == obj.MainName && model.AutoID != obj.MainID)).Count() > 0)
                    {
                        str = "Mother Toungue Already Exists";
                    }
                    break;
                case "mnuQualification":
                    if (db.MTPQualificationMasters.Where(model => (model.PQlifiName == obj.MainName && model.AutoID != obj.MainID)).Count() > 0)
                    {
                        str = "Qualification Already Exists";
                    }
                    break;
                case "mnuOccupation":
                    if (db.MTPOccupationMasters.Where(model => (model.POccupName == obj.MainName && model.AutoID != obj.MainID)).Count() > 0)
                    {
                        str = "Occupation Already Exists";
                    }
                    break;
                case "mnuDesignation":
                    if (db.MTPDesignationMasters.Where(model => (model.PDesgName == obj.MainName && model.AutoID != obj.MainID)).Count() > 0)
                    {
                        str = "Designation Already Exists";
                    }
                    break;

                #endregion

                #region Staff
                case "mnuAccountType":
                    if (db.PRLAccountTypeMasters.Where(model => (model.ACTName == obj.MainName && model.AutoID != obj.MainID)).Count() > 0)
                    {
                        str = "Account Type Already Exists";
                    }
                    if (db.PRLAccountTypeMasters.Where(model => (model.ACTPriority == obj.PriorityNo && model.AutoID != obj.MainID)).Count() > 0)
                    {
                        str = " Priority Already Exists";
                    }
                    break;
                case "mnuStaffCategory":
                    if (db.PRLStaffCategoryMasters.Where(model => (model.SCategory == obj.MainName && model.AutoID != obj.MainID)).Count() > 0)
                    {
                        str = "Staff Category Already Exists";
                    }
                    if (db.PRLStaffCategoryMasters.Where(model => (model.SCPriority == obj.PriorityNo && model.AutoID != obj.MainID)).Count() > 0)
                    {
                        str = " Priority Already Exists";
                    }
                    break;
                case "mnuDepartment":
                    if (db.PRLDepartmentMasters.Where(model => (model.DName == obj.MainName && model.AutoID != obj.MainID)).Count() > 0)
                    {
                        str = " Departement Already Exists";
                    }
                    if (db.PRLDepartmentMasters.Where(model => (model.Dorder == obj.PriorityNo && model.AutoID != obj.MainID)).Count() > 0)
                    {
                        str = "Priority Already Exists";
                    }
                    break;
                case "mnuOccupt":
                    if (db.PRLOccupationMasters.Where(model => (model.QName == obj.MainName && model.PRLOccupationID != obj.MainID)).Count() > 0)
                    {
                        str = "Occupation  Already Exists";
                    }
                    break;
                case "mnuPDesignation":
                    if (db.PRLDesignationMasters.Where(model => (model.DName == obj.MainName && model.AutoID != obj.MainID)).Count() > 0)
                    {
                        str = " Designation Already Exists";
                    }
                    if (db.PRLDesignationMasters.Where(model => (model.Priority == obj.PriorityNo && model.AutoID != obj.MainID)).Count() > 0)
                    {
                        str = "Priority Already Exists";
                    }
                    break;
                case "mnuEducationalQualification":
                    if (db.PRLEducationalQualificationMasters.Where(model => (model.QName == obj.MainName && model.AutoID != obj.MainID)).Count() > 0)
                    {
                        str = "Educational Qualification Already Exists";
                    }
                    if (db.PRLEducationalQualificationMasters.Where(model => (model.Priority == obj.PriorityNo && model.AutoID != obj.MainID)).Count() > 0)
                    {
                        str = "Priority Already Exists";
                    }
                    break;
                case "mnuEducationalSubjects":
                    if (db.PRLEducationalSubjectMasters.Where(model => (model.SubName == obj.MainName && model.AutoID != obj.MainID)).Count() > 0)
                    {
                        str = " Educational Subject Already Exists";
                    }
                    break;
                case "mnuNatureOfAppointment":
                    if (db.PRLNatureOfAppointmentMasters.Where(model => (model.NOA == obj.MainName && model.AutoID != obj.MainID)).Count() > 0)
                    {
                        str = "Nature of Appointment Already Exists";
                    }
                    break;
                case "mnuSavingHeads":
                    if (db.PRLTaxSavingHeadss.Where(model => (model.Saving_Head_Name == obj.MainName && model.Saving_Head_ID != obj.MainID)).Count() > 0)
                    {
                        str = " Saving Head Already Exists";
                    }
                    break;
                case "mnuDeductionHeads":
                    if (db.PRLTaxDeductionHeadss.Where(model => (model.Deduction_Head_Name == obj.MainName && model.Deduction_Head_ID != obj.MainID)).Count() > 0)
                    {
                        str = " Deduction Head Already Exists";
                    }
                    break;

                case "mnuCategoryMaster":
                    if (db.PRLLeaveCategoryMasters.Where(model => (model.LeaveCategoryName == obj.MainName && model.AutoID != obj.MainID)).Count() > 0)
                    {
                        str = " Leave Category  Already Exists";
                    }
                    break;

                #endregion

                case "mnuDATypeMaster":
                    if (db.PRLDATypeMAsters.Where(model => model.DAType == obj.MainName && model.DAID != obj.MainID).Count() > 0)
                    {
                        str = "DA Type Already Exists";
                    }
                    break;

                #region Fee

                case "mnuStreamMaster":
                    if (db.FeeStreamMasters.Where(model => (model.FeeStreamName == obj.MainName && model.SchoolID == SchoolID && model.AutoID != obj.MainID)).Count() > 0)
                    {
                        str = " Fee Stream Already Exists";
                    }
                    break;
                case "mnuConcessionType":
                    if (db.FEEConcessionTypeMasters.Where(model => (model.CTypeName == obj.MainName && model.SchoolID == SchoolID && model.AutoID != obj.MainID)).Count() > 0)
                    {
                        str = " Fee Concession Type Already Exists";
                    }
                    break;
                case "mnuBankMaster":
                    if (db.FEEBankMasters.Where(model => (model.FBName == obj.MainName && model.SchoolID == SchoolID && model.AutoID != obj.MainID)).Count() > 0)
                    {
                        str = " Bank Already Exists";
                    }
                    break;
                #endregion

                #region Transport
                case "mnuStopGroupMaster":
                    if (db.TRBusStopGroupMasters.Where(model => model.BusStopGroupName == obj.MainName && model.SchoolID == SchoolID && model.AutoID != obj.MainID).Count() > 0)
                    {
                        str = " Stop Group Name Already Exists";
                    }
                    break;

                case "mnuMonthMaster":
                    if (db.TRBusMonthMasters.Where(model => model.MonthName == obj.MainName && model.SchoolID == SchoolID && model.AutoID != obj.MainID).Count() > 0)
                    {
                        str = " Month Name Already Exists";
                    }
                    //if (db.TRBusMonthMasters.Where(model => model.Priority == obj.PriorityNo && model.SchoolID == SchoolID && model.AutoID != obj.MainID).Count() > 0)
                    //{
                    //    str = " Priority No Already Exists";
                    //}
                    break;
                #endregion

                #region  Question Bank
                case "mnuQuestionSubject":
                    if (db.QuestionBankSubjectMasters.Where(model => model.SubName == obj.MainName && model.AutoID != obj.MainID).Count() > 0)
                    {
                        str = " Subject Name Already Exists";
                    }
                    break;
                #endregion

                #region  Discipline
                case "mnuDLGroup":
                    int AcaStart = Convert.ToInt16(Session["Acastart"]);
                    if (db.DLDisciplineGroupMasters.Where(model => model.GName == obj.MainName && model.AutoID != obj.MainID && model.SCID == SchoolID && model.AcaStarts == AcaStart).Count() > 0)
                    {
                        str = " Group Already Exists";
                    }
                    break;

                #endregion

                #region School Online

                case "mnuAreaMaster":
                    if (db.MTFeedBackAreaMasters.Where(model => (model.AreaName == obj.MainName && model.AutoID != obj.MainID && model.SchoolIDs == CCSession.SchoolID)).Count() > 0)
                    {
                        str = "Area Name Already Exists";
                    }

                    if (db.MTFeedBackAreaMasters.Where(model => (model.PriorityNo == obj.PriorityNo && model.AutoID != obj.MainID && model.SchoolIDs == CCSession.SchoolID)).Count() > 0)
                    {
                        str = "Priority No Already Exists";
                    }
                    break;
                case "mnuParameterMaster":

                    if (db.MTParameterMasters.Where(model => (model.ParameterName == obj.MainName && model.AutoID != obj.MainID)).Count() > 0)
                    {
                        str = "Parameter Name Already Exists";
                    }

                    if (db.MTParameterMasters.Where(model => (model.PriorityNo == obj.PriorityNo && model.AutoID != obj.MainID)).Count() > 0)
                    {
                        str = "Priority No Already Exists";
                    }
                    break;
                #endregion


                default:
                    break;
            }
            return str;
        }

        private string CheckMainDelete(int? id)
        {
            string str = "";
            switch (ids[2])
            {
                #region Preference
                case "mnuClass":
                    if (db.spGetPrimaryValueExists("ClassID", "MTClassMaster", id.ToString())[0].TotalRecords > 0)
                    {
                        str = "Class Already in Use";
                    }
                    break;
                case "mnuSection":
                    if (db.spGetPrimaryValueExists("SectionID", "MTSectionMaster", id.ToString())[0].TotalRecords > 0)
                    {
                        str = "Section Already in Use";
                    }
                    break;
                case "mnuBoard":
                    if (db.spGetPrimaryValueExists("BoardID", "MTBoardMaster", id.ToString())[0].TotalRecords > 0)
                    {
                        str = "Board Already in Use";
                    }
                    break;
                case "mnuBoardingCategory":
                    if (db.spGetPrimaryValueExists("BoardingCategoryID", "MTBoardingCategoryMaster", id.ToString())[0].TotalRecords > 0)
                    {
                        str = "Boarding Category Already in Use";
                    }
                    break;

                case "mnuCountry":
                    if (db.spGetPrimaryValueExists("CountryID", "MTCountryMAster", id.ToString())[0].TotalRecords > 0)
                    {
                        str = "Country Already in Use";
                    }
                    break;
                case "mnuState":
                    if (db.spGetPrimaryValueExists("StateID", "MTStateMAster", id.ToString())[0].TotalRecords > 0)
                    {
                        str = "State Already in Use";
                    }
                    break;
                case "mnuDistrictCity":
                    if (db.spGetPrimaryValueExists("CityID", "MTCityMaster", id.ToString())[0].TotalRecords > 0)
                    {
                        str = "City Already in Use";
                    }
                    break;
                case "mnuNationality":
                    if (db.spGetPrimaryValueExists("NationalityID", "MTNationalityMaster", id.ToString())[0].TotalRecords > 0)
                    {
                        str = "Nationality Already in Use";
                    }
                    break;
                case "mnuMotherTongue":
                    if (db.spGetPrimaryValueExists("MotherTongueID", "MTMotherTongueMaster", id.ToString())[0].TotalRecords > 0)
                    {
                        str = "MotherTongue Already in Use";
                    }
                    break;

                case "mnuReligion":
                    if (db.spGetPrimaryValueExists("ReligionID", "MTReligionMaster", id.ToString())[0].TotalRecords > 0)
                    {
                        str = "Religion Already in Use";
                    }
                    break;

                case "mnuSocialCategory":
                    if (db.spGetPrimaryValueExists("CategoryID", "MTCategoryMAster", id.ToString())[0].TotalRecords > 0)
                    {
                        str = "Category Already in Use";
                    }
                    break;

                case "mnuTitle":
                    if (db.spGetPrimaryValueExists("TitleID", "MTtitleMAster", id.ToString())[0].TotalRecords > 0)
                    {
                        str = "Title Already in Use";
                    }
                    break;
                case "mnuMaritalStatus":
                    if (db.spGetPrimaryValueExists("MaritalStatusID", "MTMaritalStatusMaster", id.ToString())[0].TotalRecords > 0)
                    {
                        str = "MaritalStatus Already in Use";
                    }
                    break;
                case "mnuBloodGroup":
                    if (db.spGetPrimaryValueExists("BloodGroupID", "MTBloodGroupMaster", id.ToString())[0].TotalRecords > 0)
                    {
                        str = "BloodGroup Already in Use";
                    }
                    break;
                case "mnuHouse":
                    if (db.spGetPrimaryValueExists("HouseID", "MTHouseMaster", id.ToString())[0].TotalRecords > 0)
                    {
                        str = "House Already in Use";
                    }
                    break;
                case "mnuActivity":
                    if (db.spGetPrimaryValueExists("ActivityID", "MTActivityMaster", id.ToString())[0].TotalRecords > 0)
                    {
                        str = "Activity Already in Use";
                    }
                    break;
                case "mnuQualification":
                    if (db.spGetPrimaryValueExists("PQualificationID", "MTPQualificationMaster", id.ToString())[0].TotalRecords > 0)
                    {
                        str = "Qualification Already in Use";
                    }
                    break;
                case "mnuDesignation":
                    if (db.spGetPrimaryValueExists("PDesignationID", "MTPDesignationMaster", id.ToString())[0].TotalRecords > 0)
                    {
                        str = "Designation Already in Use";
                    }
                    break;
                case "mnuOccupation":
                    if (db.spGetPrimaryValueExists("POccupationID", "MTPOccupationMaster", id.ToString())[0].TotalRecords > 0)
                    {
                        str = "Occupation Already in Use";
                    }
                    break;
                case "mnuLocality":
                    if (db.spGetPrimaryValueExists("LocalityID", "MTLocalityMaster", id.ToString())[0].TotalRecords > 0)
                    {
                        str = "Loacality Already in Use";
                    }
                    break; ;



                #endregion

                #region Staff

                case "mnuAccountType":
                    if (db.spGetPrimaryValueExists("PRLAccountTypeID", "PRLAccountTypeMaster", id.ToString())[0].TotalRecords > 0)
                    {
                        str = "Account Type Already in Use";
                    }
                    break;
                case "mnuStaffCategory":
                    if (db.spGetPrimaryValueExists("PRLStaffCategoryID", "PRLStaffCategoryMaster", id.ToString())[0].TotalRecords > 0)
                    {
                        str = "Staff Category Already in Use";
                    }
                    break;
                case "mnuDepartment":
                    if (db.spGetPrimaryValueExists("PRLDepartmentID", "PRLDepartmentMaster", id.ToString())[0].TotalRecords > 0)
                    {
                        str = "Department  Already in Use";
                    }
                    break;
                case "mnuOccupt":
                    if (db.spGetPrimaryValueExists("PRLOccupationID", "PRLOccupationMaster", id.ToString())[0].TotalRecords > 0)
                    {
                        str = "Occupation Already in Use";
                    }
                    break;
                case "mnuPDesignation":
                    if (db.spGetPrimaryValueExists("PRLDesignationID", "PRLDesignationMaster", id.ToString())[0].TotalRecords > 0)
                    {
                        str = "Designation Already in Use";
                    }
                    break;
                case "mnuEducationalQualification":
                    if (db.spGetPrimaryValueExists("PRLEducationalQualificationID", "PRLEducationalQualificationMaster", id.ToString())[0].TotalRecords > 0)
                    {
                        str = "Educational Qualification Already in Use";
                    }
                    break;
                case "mnuNatureOfAppointment":
                    if (db.spGetPrimaryValueExists("PRLNatureOfAppointmentID", "PRLNatureOfAppointmentMaster", id.ToString())[0].TotalRecords > 0)
                    {
                        str = "Nature of Appointment Already in Use";
                    }
                    break;
                case "mnuCategoryMaster":
                    if (db.spGetPrimaryValueExists("PRLLeaveCategoryID", "PRLLeaveCategoryMaster", id.ToString())[0].TotalRecords > 0)
                    {
                        str = "Leave Category Already in Use";
                    }
                    break;
                #endregion

                case "mnuDATypeMaster":
                    if (db.spGetPrimaryValueExists("DAID", "PRLDATypeMAster", id.ToString())[0].TotalRecords > 0)
                    {
                        str = "DA Type Already in Use";
                    }
                    break;

                #region Fee

                case "mnuStreamMaster":
                    if (db.spGetPrimaryValueExists("FeeStreamID", "FeeStreamMaster", id.ToString())[0].TotalRecords > 0)
                    {
                        str = "Fee Stream Already in Use";
                    }
                    if (db.FEEGroupMasters.Where(model => model.StrmID == id).ToList().Count > 0)
                    {
                        str = "Fee Stream Already in Use";
                    }
                    break;    
                case "mnuConcessionType":
                    if (db.spGetPrimaryValueExists("FeeConcessionTypeID", "FEEConcessionTypeMaster", id.ToString())[0].TotalRecords > 0)
                    {
                        str = "Fee Concession Type Already in Use";
                    }
                    break;
                case "mnuBankMaster":
                    if (db.spGetPrimaryValueExists("BankID", "FEEBankMaster", id.ToString())[0].TotalRecords > 0)
                    {
                        str = "Bank Already in Use";
                    }
                    break;
                #endregion
                    
                #region Transport
                case "mnuStopGroupMaster":
                    if (db.spGetPrimaryValueExists("BusStopGroupID", "TRBusStopGroupMaster", id.ToString())[0].TotalRecords > 0)
                    {
                        str = "Stop Group Name Already in Use";
                    }
                    break;

                case "mnuMonthMaster":
                    if (db.spGetPrimaryValueExists("MonthID", "TRBusMonthMaster", id.ToString())[0].TotalRecords > 0)
                    {
                        str = "Month Name Already in Use";
                    }
                    break;
                #endregion

                #region Question Bank

                case "mnuQuestionSubject":
                    if (db.spGetPrimaryValueExists("QBSubjectID", "QuestionBankSubjectMaster", id.ToString())[0].TotalRecords > 0)
                    {
                        str = "Subject Name Already in Use";
                    }
                    break;
                #endregion

                #region  Health
                case "mnuAllergy":
                    if (db.spGetPrimaryValueExists("AllergyID", "MTAllergyMaster", id.ToString())[0].TotalRecords > 0)
                    {
                        str = "Allergy Already in Use";
                    }
                    break;
                case "mnuDisease":
                    if (db.spGetPrimaryValueExists("DiseaseID", "MTDiseaseMaster", id.ToString())[0].TotalRecords > 0)
                    {
                        str = "Disease Already in Use";
                    }
                    break;
                case "mnuImmunization":
                    if (db.spGetPrimaryValueExists("ImmunizationID", "MTImmunizationMaster", id.ToString())[0].TotalRecords > 0)
                    {
                        str = "Immunization Already in Use";
                    }
                    break;
                case "mnuMeasurement":
                    if (db.spGetPrimaryValueExists("MeasurementID", "MTMeasurementMaster", id.ToString())[0].TotalRecords > 0)
                    {
                        str = "Measurement Already in Use";
                    }
                    break;
                case "mnuDoctor":
                    if (db.spGetPrimaryValueExists("DoctorID", "MTDoctorMaster", id.ToString())[0].TotalRecords > 0)
                    {
                        str = "Doctor Already in Use";
                    }
                    break;
                case "mnuNurse":
                    if (db.spGetPrimaryValueExists("NurseID", "MTNurseMaster", id.ToString())[0].TotalRecords > 0)
                    {
                        str = "Nurse Already in Use";
                    }
                    break;
                case "mnuRecord":
                    if (db.spGetPrimaryValueExists("RecordID", "MTRecordMaster", id.ToString())[0].TotalRecords > 0)
                    {
                        str = "Record Already in Use";
                    }
                    break;
                #endregion

                #region Discipline
                case "mnuDLGroup":
                    if (db.spGetPrimaryValueExists("GroupID", "DLDisciplineGroupMaster", id.ToString())[0].TotalRecords > 0)
                    {
                        str = "Record Already in Use";
                    }

                    break;
                #endregion


                #region School Online
                case "mnuAreaMaster":
                    if (db.spGetPrimaryValueExists("FBAreaID", "MTFeedBackAreaMaster", id.ToString())[0].TotalRecords > 0)
                    {
                        str = "Area Name Already in Use";
                    }
                    break;
                case "mnuParameterMaster":
                    if (db.spGetPrimaryValueExists("ParameterID", "MTParameterMaster", id.ToString())[0].TotalRecords > 0)
                    {
                        str = "Parameter Name Already in Use";
                    }
                    break;
                #endregion
                default:
                    string name = getMainName();
                    if (db.spGetPrimaryValueExists(name + "ID", "MT" + name + "Master", id.ToString())[0].TotalRecords > 0)
                    {
                        str = name + " Already in Use";
                    }
                    break;
            }
            return str;
        }

        private int ChekMainPriority()
        {
            switch (ids[2])
            {
                case "mnuClass":
                case "mnuAccountType":
                case "mnuStaffCategory":
                case "mnuDepartment":
                case "mnuPDesignation":
                case "mnuEducationalQualification":
                //case "mnuMonthMaster":
                case "mnuAreaMaster":
                case "mnuParameterMaster":
                    return 1;

                default:
                    return 0;
            }
        }

        [HttpGet]
        [Authorize]
        public ActionResult MainMaster()
        {
            if (CheckSession()) { return RedirectToAction("Logon", "Logon"); }
            fillPermission();
            fillMainData();
            List<MTDDLMaster> objddlMster = new List<MTDDLMaster>();
            objddlMster.Add(new MTDDLMaster { DDLID = "Name", DDLName = "Name" });
            ViewBag.FilterDDL = objddlMster.ToList();
            List<MTDDLMaster> objFilter = new List<MTDDLMaster>();

            objFilter.Add(new MTDDLMaster { DDLID = "Contain", DDLName = "Contain" });
            objFilter.Add(new MTDDLMaster { DDLID = "StartWith", DDLName = "Start With" });
            objFilter.Add(new MTDDLMaster { DDLID = "Equal", DDLName = "Equal" });
            ViewBag.FilterType = objFilter;
            ViewData["PageCount"] = 20;
            return View("MainMaster");
        }

        [HttpGet]
        [Authorize]
        public ActionResult MainCreate(int? id, string MenuName = "", string CrlID = "")
        {
            if (CheckSession()) { return RedirectToAction("Logon", "Logon"); }
            MTMainMaster obj = new MTMainMaster();
            obj.MainID = 0;
            obj.PriorityNo = 0;
            if (MenuName != "")
            {
                ids[2] = MenuName;

                int MenuID = (int)(db.MTMenuMasters.Where(x => x.MenuName == MenuName).Select(x => x.MenuID).ToList()[0]);
                int UID = Convert.ToInt32(Session["UID"]);
                ViewData["Permission"] = db.FillUserMenuPermission(UID, MenuID)[0];
                MTMenulimitmaster objMTMenulimitmaster = ViewData["Permission"] as MTMenulimitmaster;
                if (id != null && id != 0 && objMTMenulimitmaster.EditOption == "N")
                {
                    obj.MainID = -1;
                    obj.MainName = objMTMenulimitmaster.EditOption;
                    obj.MainName2 = "E";
                    return PartialView("_MainCreateEdit", obj);
                }
                else if (id == 0 && objMTMenulimitmaster.NewOption == "N")
                {
                    obj.MainID = -1;
                    obj.MainName = objMTMenulimitmaster.NewOption;
                    obj.MainName2 = "N";
                    return PartialView("_MainCreateEdit", obj);
                }

            }
            if (CrlID != "")
            {
                ViewData["CrlID"] = CrlID;
            }
            else
            {
                ViewData["CrlID"] = "";
            }

            ViewData["PriorityNo"] = ChekMainPriority();
            ViewData["ColName"] = getMainName();
            ViewData["MainID"] = id;
            if (id != null && id > 0)
            {
                fillObjData(id, obj);
            }
            return PartialView("_MainCreateEdit", obj);
        }


        [HttpPost]
        [Authorize]
        public JsonResult MainCreate(MTMainMaster MainClass, string CtrlID, encodeshdata trdata)
        {
            int msg = MainClass.MainID;
            CommonResponse Em = new CommonResponse();
            MTMainMaster obj = new MTMainMaster();
            try
            {
                string url = Request.RawUrl;

                string strDetails = "";
                trdata.actualdata = MainClass.MainID.ToString() + "^" + MainClass.MainName + "^" + MainClass.PriorityNo.ToString();
                if (RequestAuthentication(trdata) == false)
                {
                    Em.Message = "Login Again";
                    return Json(Em);
                }
                if (CheckSession())
                {
                    Em.Message = "Login Again";
                    return Json(Em);
                }
                TempData["msg"] = "";
                if (ModelState.IsValid)
                {
                    string strmsg = CheckMain(MainClass);
                    if (strmsg == "")
                    {
                        if (MainClass.MainID != 0)
                        {
                            fillObjData(MainClass.MainID, obj);
                            obj.MainName = MainClass.MainName.Replace("''", "'");
                            obj.MainName2 = MainClass.MainName2;
                            obj.PriorityNo = MainClass.PriorityNo;
                            obj.UpdateUserID = (int)Session["UID"];
                            obj.UpdateDate = DateTime.Now;
                            updateObjData(obj);
                            strDetails = "" + ids[3].ToString() + ": " + MainClass.MainName + ", Is Modified";
                        }
                        else
                        {
                            if (getMainCount() == 0)
                            {
                                obj.MainID = 0;
                                obj.MainName = "";
                                obj.MainName2 = "";
                                obj.PriorityNo = 0;
                                addObjData(obj);
                                //MainClass.MainID = 1;
                            }
                            else
                            {
                                //MainClass.MainID = getMainMaxID();
                                MainClass.EntryUserID = (int)Session["UID"];
                                MainClass.EntryDate = DateTime.Now;
                            }
                            addObjData(MainClass);
                            strDetails = "" + ids[3].ToString() + ": " + MainClass.MainName + ", Is Added";
                        }
                        db.SaveChanges();
                        UserUpdateDetails uud = new UserUpdateDetails();
                        uud.UID = Convert.ToInt32(Session["UID"]);
                        uud.SessionID = Session.SessionID;
                        uud.UpdateDate = DateTime.Now;
                        uud.FormName = ids[2].ToString();
                        uud.Details = strDetails;
                        db.UserUpdateDetailss.Add(uud);
                        db.SaveChanges();
                        ViewData["MainID"] = null;
                        fillMainData();

                        if (msg != 0)
                        {
                            Em.Message = "Updated Successfully^" + MainClass.MainID + "^" + CtrlID;
                        }
                        else
                        {
                            MainClass.MainID = getMainMaxInserID();
                            Em.Message = "Saved Successfully^" + MainClass.MainID + "^" + CtrlID;
                        }

                        object[] objects = new object[1];
                        objects[0] = DbCampusContext.RenderPertialViewtoString(this, "_MainGrid").Replace("MainCreate?", "MainMaster?parentid=" + ids[0] + "&amp;menuid=" + ids[1] + "&amp;");
                        Em.Data = objects;

                        //str[1] = DbCampusContext.RenderPertialViewtoString(this, "_MainGrid").Replace("MainCreate?", "MainMaster?parentid=" + ids[0] + "&amp;menuid=" + ids[1] + "&amp;");
                        return Json(Em);
                    }
                    else
                    {
                        Em.Message = strmsg;
                        //ViewData["MainID"] = 0;
                        return Json(Em);
                        //str[0] = strmsg;
                    }
                }
                else
                {
                    Em.Message = ModelState.Values.SelectMany(v => v.Errors).ToList()[0].ErrorMessage;
                    //str[0] = "Data Not Valid";
                    ViewData["MainID"] = 0;
                    return Json(Em);
                }
            }
            catch (Exception ex)
            {
                //str[0] = ex.Message;
                Em.Message = ex.Message;
                return Json(Em);
            }
        }

        [HttpPost]
        [Authorize]
        public JsonResult MainDelete(int? id)
        {
            CommonResponse CR = new CommonResponse();
            string[] str = { "", "" };
            try
            {
                if (CheckSession())
                {
                    CR.Message = "Login Again";
                    return Json(CR);
                }
                if (ModelState.IsValid)
                {
                    CR.Message = CheckMainDelete(id);
                    if (CR.Message != "")
                    {
                        return Json(CR);
                    }
                    UserUpdateDetails uud = new UserUpdateDetails();
                    uud.UID = Convert.ToInt32(Session["UID"]);
                    uud.SessionID = Session.SessionID;
                    uud.UpdateDate = DateTime.Now;
                    uud.FormName = ids[2].ToString();
                    uud.Details = "Delete " + getMainName() + " ID=" + id.ToString() + "";
                    removeObjData(id);
                    db.UserUpdateDetailss.Add(uud);
                    db.SaveChanges();
                    ViewData["MainID"] = null;
                    fillMainData();
                    CR.Message = "Deleted Successfully";
                    object[] objects = new object[1];
                    objects[0] = DbCampusContext.RenderPertialViewtoString(this, "_MainGrid").Replace("MainDelete/" + id.ToString() + "?", "MainMaster?parentid=" + ids[0] + "&amp;menuid=" + ids[1] + "&amp;");
                    CR.Data = objects;
                    return Json(CR);
                }
                else
                {
                    CR.Message = "Data not valid";
                    return Json(CR);
                }
            }
            catch (Exception ex)
            {
                CR.Message = ex.Message;
                return Json(CR);
            }
        }

        #endregion
        
        #region DDL Master
        private void fillDDLData(string id, string ddl = "")
        {
            string[] pid = id.Split('^');
            if (ddl == "")
            {
                ViewData["ddlID"] = pid[0];
            }
            else
            {
                ViewData["ddlID"] = ddl;
            }

            int SID = (int)Session["SchoolID"];
            int SAcaStart = (int)Session["AcaStart"];
            int intUID = (int)Session["UID"];
            List<MTDDLMaster> lobj = new List<MTDDLMaster>();

            switch (pid[0].Split('_')[0])
            {


                case "CounselorID":
                    ViewData["ddlName"] = "Counselor";
                    lobj = db.FOMCounselorMasters.Where(model => model.CounselorID != 0).OrderBy(model => model.CounselorName).Select(model => new MTDDLMaster() { DDLID = model.CounselorID.ToString(), DDLName = model.CounselorName }).ToList();
                    break;

                case "PersonContactID":
                    ViewData["ddlName"] = "PersonContactName";
                    lobj = db.FOMPersonContactMasters.Where(model => model.PersonContactID != 0).OrderBy(model => model.PersonContact).Select(model => new MTDDLMaster() { DDLID = model.PersonContactID.ToString(), DDLName = model.PersonContact }).ToList();
                    break;

                case "PurposeID":
                    ViewData["ddlName"] = "PurposeName";
                    lobj = db.FOMPurposeMAsters.Where(model => model.PurposeID != 0).OrderBy(model => model.Purpose).Select(model => new MTDDLMaster() { DDLID = model.PurposeID.ToString(), DDLName = model.Purpose }).ToList();
                    break;

                case "GatePassReasonID":
                    ViewData["ddlName"] = "Reason";
                    lobj = db.FOMGatePassReasonMasters.Where(model => model.ReasonID != 0).OrderBy(model => model.ReasonName).Select(model => new MTDDLMaster() { DDLID = model.ReasonID.ToString(), DDLName = model.ReasonName }).ToList();
                    break;


              

                case "OccupationID":
                    ViewData["ddlName"] = "Occupation";
                    lobj = db.PRLOccupationMasters.Where(model => model.PRLOccupationID != 0).OrderBy(model => model.QName).Select(model => new MTDDLMaster() { DDLID = model.PRLOccupationID.ToString(), DDLName = model.QName }).ToList();
                    break;

                case "NalID":
                    ViewData["ddlName"] = "Nationality";
                    lobj = db.MTNationalityMasters.Where(model => model.AutoID != 0).OrderBy(model => model.NationalityName).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.NationalityName }).ToList();
                    break;

                case "RelID":
                    ViewData["ddlName"] = "Religion";
                    lobj = db.MTReligionMasters.Where(model => model.AutoID != 0).OrderBy(model => model.ReligionName).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.ReligionName }).ToList();
                    break;

                case "MarID":
                    ViewData["ddlName"] = "Marital Status";
                    lobj = db.MTMaritalStatusMasters.Where(model => model.AutoID != 0).OrderBy(model => model.MaritalStatusName).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.MaritalStatusName }).ToList();

                    break;
                case "BloodID":
                    ViewData["ddlName"] = "Blood Group";
                    lobj = db.MTBloodGroupMasters.Where(model => model.AutoID != 0).OrderBy(model => model.BloodGroupName).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.BloodGroupName }).ToList();

                    break;
                case "MTID":
                    if (ddl == "SecondID")
                    {
                        ViewData["ddlName"] = "Second Language";
                    }
                    else if (ddl == "ThirdID")
                    {
                        ViewData["ddlName"] = "Third Language";
                    }
                    else
                    {
                        ViewData["ddlName"] = "Mother Tongue";
                    }
                    lobj = db.MTMotherTongueMasters.Where(model => model.AutoID != 0).OrderBy(model => model.MName).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.MName }).ToList();

                    break;
                case "SocialCategoryID":
                    ViewData["ddlName"] = "Social Category";
                    lobj = db.MTCategoryMasters.Where(model => model.AutoID != 0).OrderBy(model => model.CategoryName).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.CategoryName }).ToList();

                    break;
                case "CLID":
                    ViewData["ddlName"] = "Class";
                    lobj = db.MTClassMasters.Where(model => model.AutoID != 0).OrderBy(model => model.PriorityNo).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.ClassName }).ToList();

                    break;
                case "SECID":
                    ViewData["ddlName"] = "Section";
                    lobj = db.MTSectionMasters.Where(model => model.AutoID != 0).OrderBy(model => model.SectionName).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.SectionName }).ToList();

                    break;
                case "TitleID":
                    ViewData["ddlName"] = "Title";
                    int GID = Convert.ToInt32(pid[1]);
                    lobj = db.MTTitleMasters.Where(model => model.AutoID != 0 && model.GenderID == GID).OrderBy(model => model.TitleName).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.TitleName }).ToList();
                    break;
                case "CityID":
                    ViewData["ddlName"] = "City";
                    lobj = db.fillCityGrid().Select(model => new MTDDLMaster() { DDLID = model.CityID.ToString() + "^" + model.StateName + "^" + model.CountryName, DDLName = model.CityName }).ToList();
                    break;
                case "AccID":
                    ViewData["ddlName"] = "Account";
                    lobj = db.FeeAccTypes.Where(model => model.AutoID != 0 && model.SchoolID == SID).OrderBy(model => model.AutoID).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.AccName }).ToList();

                    break;
                case "StyleID":
                    ViewData["ddlName"] = "Year Style";
                    lobj = db.MTAcaYearStyleMasters.Where(model => model.AutoID != 0).OrderBy(model => model.StyleName).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.StyleName }).ToList();
                    break;
                case "LocalityID":
                    ViewData["ddlName"] = "Locality";
                    lobj = db.MTLocalityMasters.Where(model => model.AutoID != 0).OrderBy(model => model.LocalityNames).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.LocalityNames }).ToList();
                    break;

                case "EnquiryStatusID":
                    ViewData["ddlName"] = "Enquiry Status";
                    lobj = db.MTEnquiryStatusMasters.Where(model => model.StatusIDs != 0).OrderBy(model => model.StatusNames).Select(model => new MTDDLMaster() { DDLID = model.StatusIDs.ToString(), DDLName = model.StatusNames }).ToList();
                    break;

                case "PQualifID":
                    ViewData["ddlName"] = "Qualification";
                    lobj = db.MTPQualificationMasters.Where(model => model.AutoID != 0).OrderBy(model => model.PQlifiName).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.PQlifiName }).ToList();
                    break;

                #region Student Information DDL

                case "ClasWiseSECID":
                    ViewData["ddlName"] = "Section";
                    int CID = Convert.ToInt32(pid[1]);

                    lobj = (from SYD in db.SIStudentYearWiseDetails
                            join SM in db.MTSectionMasters on SYD.SECID equals SM.AutoID
                            where SYD.AcaStarting == SAcaStart && SYD.SchID == SID
                            && SYD.ClsID == CID
                            orderby SM.SectionName
                            select new MTDDLMaster() { DDLID = SM.AutoID.ToString(), DDLName = SM.SectionName }).Distinct().ToList();

                    break;
                case "FeeGrpID":
                    ViewData["ddlName"] = "FeeGroup";
                    int StreamID = Convert.ToInt32(pid[1]);
                    int classid = Convert.ToInt32(pid[2]);
                    int secid = Convert.ToInt32(pid[3]);

                    lobj = (from fm in db.FEEGroupMasters
                            join fd in db.FEEGroupDetails on fm.AutoID equals fd.FGID
                            where fm.SchoolID == SID && fm.AcaStart == SAcaStart && fm.StrmID == StreamID && fd.ClassID == classid && fd.SectionID == secid
                            orderby fm.FGName
                            select new MTDDLMaster() { DDLID = fm.AutoID.ToString(), DDLName = fm.FGName }).ToList();
                    break;

                case "FeeInsID":
                    ViewData["ddlName"] = "Fee Applicable From";
                    int FeeID = Convert.ToInt32(pid[1]);
                    int StrID = Convert.ToInt32(pid[2]);

                    lobj = (from a in
                                (from fm in db.FEEGroupMasters
                                 join IM in db.FEEInstallmentMasters on fm.StyleID equals IM.StyleID
                                 join FSD in db.FEEStructureUserMasters on fm.AutoID equals FSD.FGID
                                 orderby IM.AutoID
                                 where fm.SchoolID == SID && fm.AcaStart == SAcaStart && fm.AutoID == FeeID && fm.SchoolID == IM.SchoolID && fm.AcaStart == IM.AcaStart && fm.StrmID == StrID
                                 select new { DDLID = IM.AutoID, DDLName = IM.FIName }).Distinct().ToList()
                            select new MTDDLMaster() { DDLID = a.DDLID.ToString(), DDLName = a.DDLName }).ToList();

                    break;
                case "GenderID":
                    ViewData["ddlName"] = "Gender";
                    lobj = db.MTGenderMasters.Where(model => model.AutoID != 0).OrderBy(model => model.GenderNames).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.GenderNames }).ToList();
                    break;
                case "HousID":
                    ViewData["ddlName"] = "House";
                    lobj = db.MThousemasters.Where(model => model.AutoID != 0).OrderBy(model => model.HouseName).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.HouseName }).ToList();
                    break;

                case "BoardCatID":
                    ViewData["ddlName"] = "Boarding Category";
                    lobj = db.MTBoardingCategoryMasters.Where(model => model.AutoID != 0).OrderBy(model => model.BoardingCategoryName).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.BoardingCategoryName }).ToList();
                    break;
                case "BordID":
                    ViewData["ddlName"] = "Board";
                    lobj = db.MTBoardMasters.Where(model => model.AutoID != 0).OrderBy(model => model.BoardName).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.BoardName }).ToList();
                    break;

                case "POccuID":
                    ViewData["ddlName"] = "Occupation";
                    lobj = db.MTPOccupationMasters.Where(model => model.AutoID != 0).OrderBy(model => model.POccupName).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.POccupName }).ToList();
                    break;
                case "PDesigID":
                    ViewData["ddlName"] = "Designation";
                    lobj = db.MTPDesignationMasters.Where(model => model.AutoID != 0).OrderBy(model => model.PDesgName).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.PDesgName }).ToList();
                    break;
                case "ContryID":
                    ViewData["ddlName"] = "Country";
                    lobj = db.MTCountryMasters.Where(model => model.AutoID != 0).OrderBy(model => model.CountryName).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.CountryName }).ToList();
                    break;
                case "FeeConcessTypeID":
                    ViewData["ddlName"] = "Fee Concession Type";
                    lobj = db.FEEConcessionTypeMasters.Where(model => model.AutoID != 0 && model.SchoolID == SID).OrderBy(model => model.CTypeName).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.CTypeName }).ToList();
                    break;

                #endregion

                #region Fee DDL


                case "FeeAccID":
                    ViewData["ddlName"] = "Fee Account";
                    lobj = db.FeeAccTypes.Where(model => model.AutoID != 0).OrderBy(model => model.AccName).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.AccName }).ToList();
                    break;
                case "PayModeID":
                    ViewData["ddlName"] = "Paymode";
                    lobj = db.FeePayModeMasters.Where(model => model.AutoID != 0).OrderBy(model => model.PayModeName).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.PayModeName }).ToList();
                    break;
                case "GLedID":
                    lobj.Clear();
                    int GCompp = Convert.ToInt32(pid[1]);
                    ViewData["ddlName"] = "General Ledger";
                    lobj = (from GLM in db.FAGroupLedgerMasters
                            join GGM in db.FAGeneralLedgerMasters on GLM.AutoID equals GGM.FAGGID
                            where GGM.AutoID != 0 && GGM.GCompID == GCompp && (GLM.FANatureOfGroupID == 2 || GLM.FANatureOfGroupID == 3)
                            select new MTDDLMaster() { DDLID = GGM.AutoID.ToString(), DDLName = GGM.GeneralName }).ToList();

                    break;

                case "SLID":
                    lobj.Clear();
                    int GLID = Convert.ToInt32(pid[1]);
                    ViewData["ddlName"] = "Sub Ledger";
                    lobj = db.FASubLedgerMasters.Where(model => model.AutoID != 0 && model.FAGLID == GLID).OrderBy(model => model.SLName).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.SLName }).ToList();

                    break;
                case "SLBID":
                    lobj.Clear();
                    GCompp = Convert.ToInt32(pid[1]);
                    int PayMode = Convert.ToInt32(pid[2]);

                    if (PayMode == 1)
                    {
                        ViewData["ddlName"] = "Cash Ledger";
                        lobj = (from SL in db.FASubLedgerMasters
                                join FGL in db.FAGeneralLedgerMasters on SL.FAGLID equals FGL.AutoID
                                where SL.AutoID != 0 && SL.GCompID == FGL.GCompID && SL.GCompID == GCompp && FGL.FAGLCode == "GL0000001"
                                orderby SL.SLName
                                select new MTDDLMaster() { DDLID = SL.AutoID.ToString(), DDLName = SL.SLName }).ToList();
                    }
                    else
                    {
                        ViewData["ddlName"] = "Bank Ledger";
                        lobj = (from SL in db.FASubLedgerMasters
                                join FGL in db.FAGeneralLedgerMasters on SL.FAGLID equals FGL.AutoID
                                where SL.AutoID != 0 && SL.GCompID == FGL.GCompID && SL.GCompID == GCompp && FGL.FAGLCode == "GL0000002"
                                orderby SL.SLName
                                select new MTDDLMaster() { DDLID = SL.AutoID.ToString(), DDLName = SL.SLName }).ToList();
                    }

                    break;

                case "FeeBankID":
                    ViewData["ddlName"] = "Bank";
                    lobj = db.FEEBankMasters.Where(model => model.AutoID != 0 && model.SchoolID == SID).OrderBy(model => model.FBName).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.FBName }).ToList();
                    break;
                case "StrmID":
                    ViewData["ddlName"] = "Stream";
                    lobj = db.FeeStreamMasters.Where(model => model.AutoID != 0 && model.SchoolID == SID).OrderBy(model => model.FeeStreamName).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.FeeStreamName }).ToList();
                    break;
                case "FIID":
                    ViewData["ddlName"] = "Fee Installment";
                    if (db.MTAcaYearStyleMasters.Count() == 1)
                        lobj = db.FEEInstallmentMasters.Where(model => model.AutoID != 0 && model.SchoolID == SID && model.AcaStart == SAcaStart).OrderBy(model => model.AutoID).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.FIName }).ToList();
                    else
                        lobj = db.FEEInstallmentMasters.Where(model => model.AutoID != 0 && model.SchoolID == SID && model.AcaStart == SAcaStart).OrderBy(model => model.AutoID).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.FIName + " # " + model.StyleID }).ToList();
                    break;
                case "FGID":
                    ViewData["ddlName"] = "Fee Group";
                    lobj = db.FEEGroupMasters.Where(model => model.AutoID != 0 && model.SchoolID == SID && model.AcaStart == SAcaStart).OrderBy(model => model.AutoID).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.FGName }).ToList();
                    break;
                case "ExamFHID":
                    ViewData["ddlName"] = "Exam Subject";
                    lobj = db.FEEHeadMasters.Where(model => model.AutoID != 0 && model.SchoolID == SID && model.Type == "E" && model.AcaStart == SAcaStart).OrderBy(model => model.PntOrder).Select(model => new MTDDLMaster() { DDLID = model.FHeadID.ToString(), DDLName = model.FHName }).ToList();
                    break;
                case "ActivityFHID":
                    ViewData["ddlName"] = "Activity";
                    lobj = db.FEEHeadMasters.Where(model => model.AutoID != 0 && model.SchoolID == SID && model.Type == "A" && model.AcaStart == SAcaStart).OrderBy(model => model.PntOrder).Select(model => new MTDDLMaster() { DDLID = model.FHeadID.ToString(), DDLName = model.FHName }).ToList();
                    break;
                case "SecurityFHID":
                    ViewData["ddlName"] = "Security";
                    lobj = db.FEEHeadMasters.Where(model => model.AutoID != 0 && model.SchoolID == SID && model.Type == "S" && model.FRefund == true && model.AcaStart == SAcaStart).OrderBy(model => model.PntOrder).Select(model => new MTDDLMaster() { DDLID = model.FHeadID.ToString(), DDLName = model.FHName }).ToList();
                    break;
                case "StrutureFHID":
                    ViewData["ddlName"] = "Fee Head";
                    lobj = db.FEEHeadMasters.Where(model => model.AutoID != 0 && model.SchoolID == SID && (model.Type == "S" || model.Type == "A") && model.AcaStart == SAcaStart).OrderBy(model => model.PntOrder).Select(model => new MTDDLMaster() { DDLID = model.FHeadID.ToString(), DDLName = model.FHName }).ToList();
                    break;
                case "FEGroupID":
                    ViewData["ddlName"] = "Exam Group";
                    lobj = db.FeeExamGroupMasters.Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.FEGroupName }).ToList();
                    break;

                case "CollectionID":
                    ViewData["ddlName"] = "Collection";
                    lobj = db.FEEDepositedBanks.Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.DepositBankName }).ToList();
                    break;

                case "FPTypeID":
                    ViewData["ddlName"] = "A/c Type";
                    lobj = db.FeePayTypeMasters.Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.PayTypeName }).ToList();
                    break;

                case "FRTypeID":
                    ViewData["ddlName"] = "Report Group";
                    bool Type = pid[1] == "0" ? false : true;
                    lobj = db.FEEReportTypeMasters.Where(model => model.AcaStart == SAcaStart && model.SchoolID == SID && model.Type == Type).Select(model => new MTDDLMaster { DDLID = model.AutoID.ToString(), DDLName = model.FRTypeName }).ToList();
                    break;

                case "FGFIID":
                    ViewData["ddlName"] = "Fee Installment";
                    int FGID = Convert.ToInt32(pid[1]);
                    var objFIID = (from Inst in
                                       (from FIM in db.FEEInstallmentMasters
                                        join FGM in db.FEEGroupMasters on new { FIM.AcaStart, FIM.SchoolID, FIM.StyleID } equals new { AcaStart = (int?)FGM.AcaStart, FGM.SchoolID, FGM.StyleID }
                                        where FGM.AutoID == FGID
                                        select new { AutoID = FIM.AutoID, FIName = FIM.FIName }).Distinct()
                                   orderby Inst.AutoID
                                   select new MTDDLMaster() { DDLID = Inst.AutoID.ToString(), DDLName = Inst.FIName });//.OrderBy(model => model.DDLID);
                    lobj = objFIID.ToList();
                    break;

                case "StdFGID":
                    ViewData["ddlName"] = "Fee Group";
                    int StudID = Convert.ToInt32(pid[1]);
                    lobj = (from FGM in db.FEEGroupMasters
                            join FGM1 in db.FEEGroupMasters on FGM.StyleID equals FGM1.StyleID
                            join FGD in db.FEEGroupDetails on FGM.AutoID equals FGD.FGID
                            join SYD in db.SIStudentYearWiseDetails on new { FGD.ClassID, FGD.SectionID, FGM.SchoolID, FGM.AcaStart } equals new { ClassID = (int)SYD.ClsID, SectionID = (int)SYD.SECID, SchoolID = SYD.SchID, AcaStart = (int)SYD.AcaStarting }
                            where FGM.AutoID != SYD.FeeGrpID && FGM.AcaStart == SAcaStart && FGM.SchoolID == SID && SYD.StudID == StudID && FGM1.AutoID == SYD.FeeGrpID 
                            select new MTDDLMaster() { DDLID = FGM.AutoID.ToString(), DDLName = FGM.FGName }).Distinct().ToList();
                    break;

                case "StdFIID":
                    ViewData["ddlName"] = "Fee Installment";
                    int stdID = Convert.ToInt32(pid[1]);
                    int fgID = Convert.ToInt32(pid[2]);
                    int FAM_FIID = (from FAM in db.FEEAccountMasters join FAD in db.FEEAccountDetails on FAM.AutoID equals FAD.BLNo where FAM.StdID == stdID && FAM.AcaStart == SAcaStart && FAM.Cancel == false && FAM.SchoolID == SID select FAD.FIID).Max() ?? 0;
                    int CON_FIID = (from FCM in db.FEEConcessionMasters join FCD in db.FEEConcessionDetails on FCM.AutoID equals FCD.ConID where FCM.StdID == stdID && FCM.AcaStart == SAcaStart select (int?)FCD.FIID).Max() ?? 0;
                    int FFA_FIID = db.FEEFixedAmounts.Where(model => model.AcaStart == SAcaStart && model.StdID == stdID).Max(model => (int?)model.FIID) ?? 0;
                    var obj = (from Inst in
                                   (from FIM in db.FEEInstallmentMasters
                                    join FGM in db.FEEGroupMasters on new { FIM.AcaStart, FIM.SchoolID, FIM.StyleID } equals new { AcaStart = (int?)FGM.AcaStart, FGM.SchoolID, FGM.StyleID }
                                    where FGM.AutoID == fgID && FIM.AutoID > FAM_FIID && FIM.AutoID > CON_FIID && FIM.AutoID > FFA_FIID
                                    select new { AutoID = FIM.AutoID, FIName = FIM.FIName }).Distinct()
                               orderby Inst.AutoID
                               select new MTDDLMaster() { DDLID = Inst.AutoID.ToString(), DDLName = Inst.FIName });//.OrderBy(model => model.DDLID);
                    lobj = obj.ToList();
                    break;
                case "StdID":
                    ViewData["ddlName"] = "Student";
                    int ClassID = Convert.ToInt32(pid[1]);
                    int SectionID = Convert.ToInt32(pid[2]);
                    lobj = (from StudM in db.SistudentMasterWithDetails_View
                            where StudM.YAcaStart == SAcaStart
                            && StudM.YSchoolID == SID && StudM.CLID == ClassID && StudM.SECID == SectionID
                            orderby StudM.FName, StudM.MName, StudM.LName
                            select new MTDDLMaster()
                            {
                                DDLID = StudM.StudID.ToString(),
                                DDLName = StudM.FName + " " + StudM.MName + " " + StudM.LName

                            }).ToList();
                    break;
                #endregion

                #region Library DDL

                case "LanguageID":
                    ViewData["ddlName"] = "Language";
                    lobj = db.LibLanguageMasters.Where(model => model.AutoID != 0 && model.LibraryID == CCSession.LibraryID).OrderBy(model => model.Name).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.Name }).ToList();
                    break;
                case "ShelfID":
                    ViewData["ddlName"] = "Shelf";
                    int RoomID = Convert.ToInt16(pid[1]);
                    lobj = db.LibshelfMasters.Where(model => model.AutoID != 0 && model.RoomID == RoomID).OrderBy(model => model.Name).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.Name }).ToList();
                    break;
                case "RackID":
                    ViewData["ddlName"] = "Rack";
                    int ShelfID = Convert.ToInt16(pid[1]);
                    lobj = db.LIBRackMasters.Where(model => model.AutoID != 0 && model.LIBShelfID == ShelfID).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.Name }).ToList();
                    break;
                case "RoomID":
                    ViewData["ddlName"] = "Room";
                    lobj = db.LibRoomMasters.Where(model => model.AutoID != 0 && model.LibraryID == CCSession.LibraryID).OrderBy(model => model.Name).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.Name }).ToList();
                    break;
                case "AccessID":
                    ViewData["ddlName"] = "AccessType";
                    lobj = db.LibAccessTypeMasters.Where(model => model.AutoID != 0 && model.LibraryID == CCSession.LibraryID).OrderBy(model => model.Name).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.Name }).ToList();
                    break;
                case "CollectionStatusID":
                    ViewData["ddlName"] = "StatusType";
                    lobj = db.LibCollectionStatusMasters.Where(model => model.AutoID != 0 && model.LibraryID == CCSession.LibraryID).OrderBy(model => model.Name).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.Name }).ToList();
                    break;
                case "CategoryID":
                    ViewData["ddlName"] = "CategoryType";
                    lobj = db.LibCategoryMasters.Where(model => model.AutoID != 0 && model.LibraryID == CCSession.LibraryID).OrderBy(model => model.Name).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.Name }).ToList();
                    break;
                case "BindingID":
                    ViewData["ddlName"] = "BindingType";
                    lobj = db.LIBBindingMasters.Where(model => model.AutoID != 0 && model.LibraryID == CCSession.LibraryID).OrderBy(model => model.Name).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.Name }).ToList();
                    break;
                case "CurrencyID":
                    ViewData["ddlName"] = "CurrencyType";
                    lobj = db.LibCurrencyMasters.Where(model => model.AutoID != 0 && model.LibraryID == CCSession.LibraryID).OrderBy(model => model.Name).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.Name }).ToList();
                    break;
                case "CollectionCategory":
                    ViewData["ddlName"] = "Collection";
                    lobj = db.LIBCollectionCategoryMasters.Where(model => model.AutoID != 0 && model.LibraryID == CCSession.LibraryID).OrderBy(model => model.Name).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.Name }).ToList();
                    break;

                case "CollectionCategoryID":
                    ViewData["ddlName"] = "Collection";
                    int colletionid = Convert.ToInt16(pid[1]);
                    lobj = db.LIBCollectionCategoryMasters.Where(model => model.AutoID != 0 && model.LibraryID == CCSession.LibraryID && model.CollectionID == colletionid).OrderBy(model => model.Name).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString() + "^" + model.Prefix + "^" + model.Name, DDLName = model.Prefix + "# " + model.Name }).ToList();
                    break;
                case "SourceID":
                    ViewData["ddlName"] = "Source Type";
                    lobj = db.LibSourceMasters.Where(model => model.AutoID != 0 && model.LIBLibraryID == CCSession.LibraryID).OrderBy(model => model.Name).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.Name }).ToList();
                    break;
                case "PublisherID":
                    ViewData["ddlName"] = "Publisher Type";
                    lobj = db.LIBPublisherMasters.Where(model => model.AutoID != 0 && model.LIBLibraryID == CCSession.LibraryID).OrderBy(model => model.Name).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.Name }).ToList();
                    break;
                case "AuthorityID":
                    ViewData["ddlName"] = "Authority Type";
                    lobj = db.LIBAuthorityMasters.Where(model => model.AutoID != 0 && model.LibraryID == CCSession.LibraryID).OrderBy(model => model.Name).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.Name }).ToList();
                    break;
                case "ClassesID":
                    ViewData["ddlName"] = "Main Classes";
                    lobj = db.LIBDDCMainClassess.Select(model => new MTDDLMaster() { DDLID = model.MainClassCode.ToString(), DDLName = model.MainClassCode + " #" + model.MainClass }).OrderBy(model => model.DDLID).ToList();
                    break;
                case "DivisionID":
                    ViewData["ddlName"] = "Division";
                    string div = pid[1];

                    lobj = db.LIBDDCDivisionss.Where(model => model.MainClassCode == div).Select(model => new MTDDLMaster() { DDLID = model.DivisionCode.ToString(), DDLName = model.DivisionCode + " #" + model.Division }).OrderBy(model => model.DDLID).ToList();
                    break;
                case "SectionID":
                    ViewData["ddlName"] = "Section";
                    string sec = pid[1];
                    lobj = db.LIBDDCSectionss.Where(model => model.DivisionCode == sec).Select(model => new MTDDLMaster() { DDLID = model.SectionCode.ToString(), DDLName = model.SectionCode + " #" + model.SectionName }).OrderBy(model => model.DDLID).ToList();
                    break;

                case "PhotoAlbumID":
                    ViewData["ddlName"] = "Photo Album";
                    lobj = db.LIBPhotoAlbumMasters.OrderBy(m => m.Name).Where(model => model.AutoID != 0 && model.LibraryID == CCSession.LibraryID).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.Name }).ToList();
                    break;
                case "MediaTypeID":
                    ViewData["ddlName"] = "Media Type";
                    int collectionid = Convert.ToInt16(pid[1]);
                    lobj = db.LIBAVSMediaTypeMasters.OrderBy(m => m.Name).Where(model => model.AutoID != 0 && model.CollectionID == collectionid && model.LIBLibraryID == CCSession.LibraryID).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.Name }).ToList();
                    break;
                case "AVSContentMasterID":
                    ViewData["ddlName"] = "Content Category";
                    lobj = db.LIBAVSContentMasters.OrderBy(m => m.Name).Where(model => model.AutoID != 0 && model.LIBLibraryID == CCSession.LibraryID).OrderBy(model => model.Name).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.Name }).ToList();
                    break;
                case "SoftwareReleaseID":
                    ViewData["ddlName"] = "Software ";
                    lobj = db.LIBSoftwareReleaseMasters.OrderBy(m => m.Name).Where(model => model.AutoID != 0 && model.LibraryID == CCSession.LibraryID).OrderBy(model => model.Name).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.Name }).ToList();
                    break;
                case "PeriodicalTypeID":
                    ViewData["ddlName"] = "Periodical Type";
                    lobj = db.LIBPeriodicalTypeMasters.OrderBy(m => m.Name).Where(model => model.AutoID != 0).OrderBy(model => model.Name).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.Name }).ToList();
                    break;
                case "JMNPeriodicalID":
                    ViewData["ddlName"] = "Periodical";
                    int Collid = Convert.ToInt16(pid[1]);
                    lobj = db.LIBJMNPeriodicalMasters.OrderBy(m => m.Name).Where(model => model.AutoID != 0 && model.LibraryID == CCSession.LibraryID && model.CollectionID == Collid).OrderBy(model => model.Name).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.Name }).ToList();
                    break;
                case "MapID":
                    ViewData["ddlName"] = "Map";
                    lobj = db.LIBMapTypeMasters.OrderBy(m => m.Name).Where(model => model.AutoID != 0 && model.LibraryID == CCSession.LibraryID).OrderBy(model => model.Name).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.Name }).ToList();
                    break;
                case "JMNPeriodicalReceiptID":
                    ViewData["ddlName"] = "Periodical Type";
                    int colID = Convert.ToInt16(pid[1]);
                    lobj = (from LPM in db.LIBJMNPeriodicalMasters
                            join SD in db.LIBSubscriptionDetailss on LPM.AutoID equals SD.JMNPeriodicalID
                            join LPTM in db.LIBPeriodicalTypeMasters on SD.PeriodicalTypeID equals LPTM.AutoID
                            where LPM.AutoID != 0 && LPM.CollectionID == colID && LPM.LibraryID == CCSession.LibraryID && SD.StartDate <= DateTime.Now && SD.EndDate >= DateTime.Now
                            orderby LPM.Name
                            select new MTDDLMaster { DDLID = LPM.AutoID.ToString() + "^" + LPTM.Name + "^" + SD.CostPerCopy + "^" + SD.NoofCopy + "^" + SD.AutoID, DDLName = LPM.Name }).ToList();
                    break;

                case "SMClassID":
                    ViewData["ddlName"] = "Class";
                    var SchoolID = (db.SIStudentYearWiseDetails.Where(m => m.SchID == SID && m.AcaStarting == SAcaStart && m.StudStatus == "S").Select(m => m.ClsID)).ToList();
                    lobj = (from CM in db.MTClassMasters orderby CM.PriorityNo where SchoolID.Contains(CM.AutoID) select new MTDDLMaster { DDLID = CM.AutoID.ToString(), DDLName = CM.ClassName }).ToList();
                    break;
                case "SMSectionID":
                    ViewData["ddlName"] = "Section";
                    int ClsID = Convert.ToInt16(pid[1]);
                    lobj = (from SQ in
                                (from MSM in db.MTSectionMasters
                                 join SYD in db.SIStudentYearWiseDetails on MSM.AutoID equals SYD.SECID
                                 where SYD.ClsID == ClsID && SYD.SchID == SID && SYD.AcaStarting == SAcaStart && SYD.StudStatus == "S"
                                 select new { DDLID = MSM.AutoID.ToString(), DDLName = MSM.SectionName }).Distinct()
                            orderby SQ.DDLName
                            select new MTDDLMaster() { DDLID = SQ.DDLID, DDLName = SQ.DDLName }).ToList();
                    break;
                case "MemberGroupID":
                    string MemType = pid[1];
                    ViewData["ddlName"] = "Member Group";
                    lobj = (db.LibMemberGroupMasters.OrderBy(m => m.MemberType).Where(m => m.MemberType == MemType && m.LibraryID == CCSession.LibraryID).Select(m => new MTDDLMaster { DDLID = m.AutoID.ToString(), DDLName = m.Name })).ToList();
                    break;

                case "EmployeeMembershipID":
                    ViewData["ddlName"] = "Membership";
                    lobj = (from PDM in db.PRLDesignationMasters
                            join EM in db.PRLEmployeeMasters on PDM.AutoID equals EM.DesignID
                            where EM.SLID == SID && EM.EmployeeStatus == "N"
                            select new MTDDLMaster { DDLID = PDM.AutoID.ToString(), DDLName = PDM.DName }).Distinct().ToList();
                    break;

                case "ScheduleID":
                    string sch = pid[1];
                    ViewData["ddlName"] = "Schedule";
                    lobj = db.LIBDDCScheduless.Where(model => model.SectionCode == sch).OrderBy(model => model.ScheduleCode).Select(model => new MTDDLMaster() { DDLID = model.ScheduleCode.ToString(), DDLName = model.ScheduleCode + " #" + model.Schedule }).ToList();
                    break;

                #endregion






                #region SMS DDL
                case "SMSGroupID":
                    ViewData["ddlName"] = "SMSGroup";
                    lobj = (from GM in db.MTGroupMasters.Where(model => model.GroupID != 0 && model.SchoolID == CCSession.SchoolID && model.EntryUserID == CCSession.UID)
                            orderby GM.GroupName
                            select new MTDDLMaster { DDLID = GM.GroupID.ToString(), DDLName = GM.GroupName }).ToList();
                    break;
                case "TemplateID":
                    ViewData["ddlName"] = "Template";
                    int TempID = Convert.ToInt16(pid[1]);
                    lobj = db.EMSMSTemplateMasters.Where(model => model.SMSTemplateID != 0 && model.SMSTemplateCatID == TempID).OrderBy(model => model.SMSTemplateID).Select(model => new MTDDLMaster { DDLID = model.SMSTemplateID.ToString(), DDLName = model.SMSTemplateName }).ToList();
                    break;
                case "FeeID":
                    ViewData["ddlName"] = "Fee";
                    lobj = db.FEEInstallmentMasters.Where(model => model.AutoID != 0 && model.SchoolID == SID && model.AcaStart == CCSession.AcaStart).OrderBy(model => model.AutoID).Select(model => new MTDDLMaster { DDLID = model.AutoID.ToString(), DDLName = model.FIName }).ToList();
                    break;
                case "RouteID":
                    ViewData["ddlName"] = "Route";
                    lobj = db.TRBusRouteMasters.Where(model => model.AutoID != 0 && model.SchoolID == SID && model.AcaStart == SAcaStart).OrderBy(model => model.AutoID).Select(model => new MTDDLMaster { DDLID = model.AutoID.ToString(), DDLName = model.BusRouteName }).ToList();
                    break;
                case "StopID":
                    int RID = Convert.ToInt16(pid[1]);
                    ViewData["ddlName"] = "Stop";
                    lobj = (from TRD in db.TRBusRouteDetailss
                            join TRM in db.TRBusRouteMasters on TRD.BusRouteID equals TRM.AutoID
                            join BSM in db.TRBusStopMasters on TRD.TRBusStopID equals BSM.AutoID
                            where TRM.AcaStart == SAcaStart && TRD.BusRouteID == RID
                            orderby BSM.AutoID
                            select new MTDDLMaster { DDLID = TRD.TRBusStopID.ToString(), DDLName = BSM.BusStopName }).ToList();
                    break;
                #endregion

                #region Staff DDL

                case "DesignID":
                    ViewData["ddlName"] = "Designation";
                    lobj = db.PRLDesignationMasters.Where(model => model.AutoID != 0).OrderBy(model => model.DName).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.DName }).ToList();
                    break;
                case "DepartID":
                    ViewData["ddlName"] = "Department";
                    lobj = db.PRLDepartmentMasters.Where(model => model.AutoID != 0).OrderBy(model => model.DName).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.DName }).ToList();
                    break;
                case "AccTypeID":
                    ViewData["ddlName"] = "Account Type";
                    lobj = db.PRLAccountTypeMasters.Where(model => model.AutoID != 0).OrderBy(model => model.ACTPriority).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.ACTName }).ToList();
                    break;
                case "NOAID":
                    ViewData["ddlName"] = "Nature of Appointment";
                    lobj = db.PRLNatureOfAppointmentMasters.Where(model => model.AutoID != 0).OrderBy(model => model.NOA).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.NOA }).ToList();
                    break;
                case "StaffCatID":
                    ViewData["ddlName"] = "Staff Category";
                    lobj = db.PRLStaffCategoryMasters.Where(model => model.AutoID != 0).OrderBy(model => model.SCPriority).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.SCategory }).ToList();
                    break;
                case "OrgID":
                    ViewData["ddlName"] = "Organstion";
                    lobj = db.PRLTaxForm16OrgDetails.Where(model => model.AutoID != 0).OrderBy(model => model.OrgName).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.OrgName }).ToList();
                    break;
                case "PFID":
                    ViewData["ddlName"] = "PF";
                    lobj = db.PRLPFMasters.Where(model => model.PID != 0).OrderBy(model => model.PName).Select(model => new MTDDLMaster() { DDLID = model.PID.ToString(), DDLName = model.PName }).ToList();
                    break;
                case "BankID":
                    ViewData["ddlName"] = "Bank";
                    lobj = db.PRLBankMasters.Where(model => model.BankID != 0).OrderBy(model => model.BName).Select(model => new MTDDLMaster() { DDLID = model.BankID.ToString(), DDLName = model.BName }).ToList();
                    break;
                case "LeaveCategoryID":
                    ViewData["ddlName"] = "Leave Category";
                    lobj = db.PRLLeaveCategoryMasters.Where(model => model.AutoID != 0).OrderBy(model => model.LeaveCategoryName).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.LeaveCategoryName }).ToList();
                    break;
                case "SID":
                    ViewData["ddlName"] = "School";
                    lobj = db.MTInstitutionMasters.Where(model => model.AutoID != 0).OrderBy(model => model.Name).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.Name }).ToList();
                    break;
                case "ReasonID":
                    ViewData["ddlName"] = "Reason of Leaving";
                    lobj = db.PRLEmployeeReasonOfLeavings.Where(model => model.ReasonID != 0).OrderBy(model => model.Description).Select(model => new MTDDLMaster() { DDLID = model.ReasonID.ToString(), DDLName = model.Description }).ToList();
                    break;
                case "PGBID":
                    ViewData["ddlName"] = "Pay Scale";
                    string IncrMode = pid[1];
                    if (IncrMode == "N")
                    {
                        lobj = db.PRLPayBandMasters.Where(model => model.PBID != 0 && model.PayCommissionType == "N").OrderBy(model => model.PBName).Select(model => new MTDDLMaster() { DDLID = model.PBID.ToString(), DDLName = model.PBName }).ToList();

                    }
                    else if (IncrMode == "S")
                    {
                        lobj = db.PRLPayBandMasters.Where(model => model.PBID != 0 && model.PayCommissionType == "S").OrderBy(model => model.PBName).Select(model => new MTDDLMaster() { DDLID = model.PBID.ToString(), DDLName = model.PBName }).ToList();

                    }
                    else if (IncrMode == "A" || IncrMode == "M")
                    {
                        lobj = db.PRLPayGroupMasters.Where(model => model.PGID != 0).OrderBy(model => model.PGName).Select(model => new MTDDLMaster() { DDLID = model.PGID.ToString(), DDLName = model.PGName }).ToList();
                    }
                    else
                    {
                        lobj = ((from fm in db.PRLPayGroupMasters
                                 select new MTDDLMaster() { DDLID = fm.PGID.ToString(), DDLName = fm.PGName }).ToList()
                              .Union
                               (from fm in db.PRLPayBandMasters
                                select new MTDDLMaster() { DDLID = fm.PBID.ToString(), DDLName = fm.PBName }).ToList());
                    }
                    break;

                case "EmpID":
                    ViewData["ddlName"] = "Employee";
                    lobj = db.PRLEmployeeMasters.Where(model => model.EmpID != 0).OrderBy(model => model.FName + " " + model.MName + " " + model.LName).Select(model => new MTDDLMaster() { DDLID = model.EmpID.ToString(), DDLName = model.FName + " " + model.MName + " " + model.LName }).ToList();
                    break;

                case "PayTypeID":
                    ViewData["ddlName"] = "Pay Scale";
                    string strpayType = pid[1];
                    if (strpayType == "B")
                    {
                        lobj = db.PRLPayBandMasters.Where(model => model.PBID != 0).OrderBy(model => model.PBName).Select(model => new MTDDLMaster() { DDLID = model.PBID.ToString(), DDLName = model.PBName }).ToList();

                    }
                    else if (strpayType == "G")
                    {
                        lobj = db.PRLPayGroupMasters.Where(model => model.PGID != 0).OrderBy(model => model.PGName).Select(model => new MTDDLMaster() { DDLID = model.PGID.ToString(), DDLName = model.PGName }).ToList();
                    }
                    else
                    {
                        lobj = ((from fm in db.PRLPayGroupMasters
                                 select new MTDDLMaster() { DDLID = fm.PGID.ToString(), DDLName = fm.PGName }).ToList()
                              .Union
                               (from fm in db.PRLPayBandMasters
                                select new MTDDLMaster() { DDLID = fm.PBID.ToString(), DDLName = fm.PBName }).ToList());
                    }
                    break;


                #endregion

                #region FA DDL

                case "GCompID":
                    ViewData["ddlName"] = "Group Company";
                    lobj = db.FAGroupCompanyMasters.Where(model => model.AutoID != 0).OrderBy(model => model.GCName).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.GCName }).ToList();
                    break;
                case "NatureofGroupID":
                    ViewData["ddlName"] = "Nature of Group";
                    lobj = db.FANatureofGroupMasters.Where(model => model.AutoID != 0).OrderBy(model => model.NatureOfGrp).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.NatureOfGrp }).ToList();
                    break;
                case "GroupLedgerID":
                    lobj.Clear();
                    int NatureofGroup = Convert.ToInt32(pid[1]);
                    int GComp = Convert.ToInt32(Session["GroupCompanyID"]);
                    ViewData["ddlName"] = "Group Ledger";
                    lobj = db.FAGroupLedgerMasters.Where(model => model.AutoID != 0 && model.FANatureOfGroupID == NatureofGroup && model.GCompID == GComp).OrderBy(model => model.GLName).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.GLName }).ToList();
                    break;
                case "FAGroupCompanyID":
                    lobj.Clear();
                    ViewData["ddlName"] = "Group Company Name";
                    //lobj = db.FAGroupLedgerMasters.Where(model => model.AutoID != 0 && model.FANatureOfGroupID == NatureofGroup).OrderBy(model => model.GLName).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.GLName }).ToList();                        

                    lobj = (from UD in db.MTUserFAINVDetailss
                            join FCM in db.FACompanyMasters on UD.FACompID equals FCM.AutoID
                            join GCM in db.FAGroupCompanyMasters on FCM.GCompID equals GCM.AutoID
                            join UCM in db.MTUserCompanyMasters on UD.FACompID equals UCM.FACompID
                            orderby GCM.GCName
                            where UD.UID == intUID && GCM.AutoID != 0
                            select new MTDDLMaster() { DDLID = GCM.AutoID.ToString(), DDLName = GCM.GCName }).Distinct().ToList();
                    break;

                case "FACompanyID":
                    lobj.Clear();
                    int strvalue = Convert.ToInt32(pid[1]);
                    ViewData["ddlName"] = "Company Name";
                    //lobj = (from UD in db.MTUserFAINVDetailss
                    //        join FCM in db.FACompanyMasters on UD.FACompID equals FCM.AutoID
                    //        join GCM in db.FAGroupCompanyMasters on FCM.GCompID equals GCM.AutoID
                    //        join UCM in db.MTUserCompanyMasters on UD.FACompID equals UCM.FACompID
                    //        orderby GCM.GCName
                    //        where UD.UID == intUID && GCM.AutoID != 0 && FCM.GCompID == strvalue
                    //        select new MTDDLMaster() { DDLID = FCM.AutoID.ToString(), DDLName = FCM.CompName }).Distinct().ToList();

                    lobj = (from FCM in db.FACompanyMasters
                            join GCM in db.FAGroupCompanyMasters on FCM.GCompID equals GCM.AutoID
                            orderby GCM.GCName
                            where GCM.AutoID != 0 && FCM.GCompID == strvalue
                            select new MTDDLMaster() { DDLID = FCM.AutoID.ToString(), DDLName = FCM.CompName }).Distinct().ToList();

                    break;

                case "BLedgerID":
                    ViewData["ddlName"] = "Ledger Name";
                    lobj = db.FASubLedgerMasters.Where(model => model.AutoID != 0 && model.FAGLID == 2).OrderBy(model => model.SLName).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.SLName }).ToList();
                    break;

                case "TransactionTypeID":
                    ViewData["ddlName"] = "Transaction Type";
                    MTDDLMaster ddlMaster = new MTDDLMaster();
                    ddlMaster = new MTDDLMaster();
                    ddlMaster.DDLID = "Y";
                    ddlMaster.DDLName = "Cleared";
                    lobj.Add(ddlMaster);
                    ddlMaster = new MTDDLMaster();
                    ddlMaster.DDLID = "N";
                    ddlMaster.DDLName = "Not Cleared";
                    lobj.Add(ddlMaster);
                    ddlMaster = new MTDDLMaster();
                    ddlMaster.DDLID = "B";
                    ddlMaster.DDLName = "Both";
                    lobj.Add(ddlMaster);
                    break;

                #endregion

                #region Transport DDL

                case "FeeInstallmentID":
                    int YearStyleID = Convert.ToInt32(pid[1]);
                    ViewData["ddlName"] = "Fee Applicable From";
                    lobj = db.FEEInstallmentMasters.Where(model => model.AutoID != 0 && model.SchoolID == SID && model.AcaStart == SAcaStart && model.StyleID == YearStyleID).OrderBy(model => model.AutoID).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.FIName }).ToList();
                    break;

                case "TSectionID":
                    ViewData["ddlName"] = "Section";
                    int intClass = Convert.ToInt32(pid[1]);
                    lobj = (from SYD in db.SIStudentYearWiseDetails
                            join SM in db.MTSectionMasters on SYD.SECID equals SM.AutoID
                            orderby SM.SectionName
                            where SYD.ClsID == intClass && SYD.SchID == SID && SYD.AcaStarting == SAcaStart
                            select new MTDDLMaster() { DDLID = SM.AutoID.ToString(), DDLName = SM.SectionName }).Distinct().ToList();
                    break;
                case "BusRouteID":
                    ViewData["ddlName"] = "Bus Route";
                    lobj = db.TRBusRouteMasters.Where(model => model.AutoID != 0 && model.SchoolID == SID && model.AcaStart == SAcaStart).OrderBy(model => model.PriorityNo).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.BusRouteName }).ToList();
                    break;

                #endregion

                #region INV DDL

                case "InvGroupCompanyID":
                    lobj.Clear();
                    ViewData["ddlName"] = "Group Company Name";
                    //lobj = db.FAGroupLedgerMasters.Where(model => model.AutoID != 0 && model.FANatureOfGroupID == NatureofGroup).OrderBy(model => model.GLName).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.GLName }).ToList();                        

                    lobj = (from UD in db.MTUserInvLocationDetails
                            join LM in db.INVLocationMasters on UD.LocID equals LM.AutoID
                            join FCM in db.InvCompanyMasters on LM.CompID equals FCM.AutoID
                            join GCM in db.InvGroupCompanyMasters on FCM.GCompID equals GCM.AutoID
                            orderby GCM.GCName
                            where UD.UID == intUID && GCM.AutoID != 0
                            select new MTDDLMaster() { DDLID = GCM.AutoID.ToString(), DDLName = GCM.GCName }).Distinct().ToList();

                    break;

                case "InvCompanyID":
                    lobj.Clear();
                    strvalue = Convert.ToInt32(pid[1]);
                    ViewData["ddlName"] = "Company Name";
                    lobj = (from UD in db.MTUserInvLocationDetails
                            join LM in db.INVLocationMasters on UD.LocID equals LM.AutoID
                            join FCM in db.InvCompanyMasters on LM.CompID equals FCM.AutoID
                            orderby FCM.CompName
                            where UD.UID == intUID && FCM.AutoID != 0 && FCM.GCompID == strvalue
                            select new MTDDLMaster() { DDLID = FCM.AutoID.ToString(), DDLName = FCM.CompName }).Distinct().ToList();

                    break;
                case "INVLocationID":
                    lobj.Clear();
                    ViewData["ddlName"] = "Location";
                    int compID = Convert.ToInt32(pid[1]);
                    //lobj = db.INVLocationMasters.Where(model => model.AutoID != 0 && model.LocType == "G").OrderBy(model => model.LocName).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.LocName }).ToList();
                    lobj = (from UD in db.MTUserInvLocationDetails
                            join LM in db.INVLocationMasters on UD.LocID equals LM.AutoID
                            orderby LM.LocName
                            where UD.UID == intUID && LM.AutoID != 0 && LM.CompID == compID
                            select new MTDDLMaster()
                            {
                                DDLID = LM.AutoID.ToString(),
                                DDLName = LM.LocName
                            }).Distinct().ToList();

                    break;

                case "INVStockGroupID":
                    lobj.Clear();
                    ViewData["ddlName"] = "Stock Group";
                    strvalue = Convert.ToInt32(Session["InvGroupCompanyID"]);
                    lobj = db.INVStockGroupMasters.Where(model => model.AutoID != 0 && model.GCompID == strvalue).OrderBy(model => model.Priority).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.GName }).ToList();
                    break;
                case "INVStockLedgerID":
                    lobj.Clear();
                    ViewData["ddlName"] = "Stock Ledger";
                    strvalue = Convert.ToInt32(pid[1]);
                    lobj = db.INVStockLedgerMasters.Where(model => model.AutoID != 0 && model.InvSGID == strvalue).OrderBy(model => model.Priority).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.SLName }).ToList();
                    break;

                case "ReqDetailID":
                    lobj.Clear();
                    ViewData["ddlName"] = "Requisition No";
                    strvalue = Convert.ToInt32(Session["InvCompanyID"]);
                    int intLocID = Convert.ToInt32(pid[1]);
                    lobj = (from RD in db.INVRequisitionDetailss
                            join RM in db.INVRequisitionMasters on RD.INVReqID equals RM.AutoID
                            where RM.CompID == strvalue && RM.LocID == intLocID && RD.ApprovedQuantity == null
                            orderby RM.ReqNo
                            select new MTDDLMaster()
                            {
                                DDLID = RM.ReqNo.ToString(),
                                DDLName = RM.ReqNo.ToString() + "(" + ((RM.ReqDate.Value.Day.ToString().Length < 2) ? "0" : "") + RM.ReqDate.Value.Day.ToString() + "/" + ((RM.ReqDate.Value.Month.ToString().Length < 2) ? "0" : "") + RM.ReqDate.Value.Month.ToString() + "/" + RM.ReqDate.Value.Year.ToString() + ")"
                            }).Distinct().ToList();
                    break;

                case "POReqDetailID":
                    lobj.Clear();
                    ViewData["ddlName"] = "Requisition No";
                    strvalue = Convert.ToInt32(Session["InvCompanyID"]);
                    intLocID = Convert.ToInt32(pid[1]);
                    string strAppType = pid[2].ToString();


                    lobj = (from ss in
                                (from RD in db.INVRequisitionDetailss
                                 join RM in db.INVRequisitionMasters on RD.INVReqID equals RM.AutoID
                                 join LM in db.INVLocationMasters on RM.LocID equals LM.AutoID
                                 join CM in db.InvCompanyMasters on LM.CompID equals CM.AutoID
                                 join B in
                                     (from POD in db.INVPurchaseOrderDetailss
                                      group POD by new { POD.INVSTID, POD.InvReqID } into g
                                      select new
                                      {
                                          INVSTID = g.Key.INVSTID,
                                          INVRequisitionID = g.Key.InvReqID,
                                          Quantity = g.Sum(x => x.Quantity)
                                      }) on new { INVRequisitionID = RM.AutoID, ID2 = RD.INVSTID } equals new { INVRequisitionID = (int)B.INVRequisitionID, ID2 = B.INVSTID }
                              into B_join
                                 from B in B_join.DefaultIfEmpty()
                                 where CM.GCompID == strvalue && ((strAppType == "A") ? RD.ApprovedQuantity != null : RD.ApprovedQuantity == null)
                                 orderby RM.ReqNo
                                 select new { RM.ReqDate, RM.ReqNo, RD.ApprovedQuantity, B.Quantity, CM.CompName, LM.LocName })
                            group ss by new
                            {
                                ss.ReqNo,
                                ss.ReqDate,
                                ss.CompName,
                                ss.LocName
                            } into g
                            where g.Sum(s => s.ApprovedQuantity ?? 0) - g.Sum(s => s.Quantity ?? 0) > 0
                            select new MTDDLMaster()
                            {
                                DDLID = g.Key.ReqNo.ToString(),
                                DDLName = g.Key.CompName.ToString() + " # " + g.Key.LocName.ToString() + " # " + g.Key.ReqNo.ToString() + "(" + ((g.Key.ReqDate.Value.Day.ToString().Length < 2) ? "0" : "") + g.Key.ReqDate.Value.Day.ToString() + "/" + ((g.Key.ReqDate.Value.Month.ToString().Length < 2) ? "0" : "") + g.Key.ReqDate.Value.Month.ToString() + "/" + g.Key.ReqDate.Value.Year.ToString() + ")"
                            }).Distinct().ToList();


                    break;

                case "POGroupLedgerID":
                    lobj.Clear();
                    GComp = Convert.ToInt32(Session["InvGroupCompanyID"]);
                    compID = Convert.ToInt32(Session["InvCompanyID"]);
                    //strvalue = Convert.ToInt32(db.INVFALedgerSettings.Where(model => model.INVGroupCompanyID == GComp && model.INVCompanyID == compID && model.TType == "PE").ToList()[0].FAGroupCompanyID);
                    ViewData["ddlName"] = "Supplier";
                    lobj = (from SLM in db.FASubLedgerMasters
                            join IFS in db.INVFASettings on SLM.FAGLID equals IFS.FAGLID
                            where IFS.INVFormName == "Purchase Order" && SLM.GCompID == IFS.FAGroupCompanyID && SLM.GCompID == GComp
                            orderby SLM.SLName
                            select new MTDDLMaster()
                            {
                                DDLID = SLM.AutoID.ToString(),
                                DDLName = SLM.SLName
                            }).Distinct().ToList();

                    break;


                case "POGRNDetailID":
                    lobj.Clear();
                    ViewData["ddlName"] = "Purchase Order No";
                    strvalue = Convert.ToInt32(Session["INVCompanyID"]);
                    intLocID = Convert.ToInt32(pid[1]);
                    int SupplierID = Convert.ToInt32(pid[3]);
                    DateTime currSessDate = Convert.ToDateTime("31-03-" + SAcaStart, cinfo);

                    lobj = (from ss in
                                (from IPD in db.INVPurchaseOrderDetailss
                                 join IPM in db.INVPurchaseOrderMasters on IPD.POID equals IPM.AutoID
                                 join B in
                                     (from POD in db.INVGRNTransactionDetailss
                                      group POD by new { POD.INVSTID, POD.INVPOID, POD.INVCompanyID, POD.INVLocationID } into g
                                      select new
                                      {
                                          INVSTID = g.Key.INVSTID,
                                          INVPOID = g.Key.INVPOID,
                                          INVCompanyID = g.Key.INVCompanyID,
                                          INVLocationID = g.Key.INVLocationID,
                                          SQuantity = g.Sum(x => x.StockQuantity)
                                      }) on new { INVPOID = IPM.AutoID, ID2 = IPD.INVSTID, ID3 = IPD.InvCompanyID, ID4 = IPD.INVLocationID } equals new { INVPOID = (int)B.INVPOID, ID2 = B.INVSTID, ID3 = (int)B.INVCompanyID, ID4 = B.INVLocationID }
                              into B_join
                                 from B in B_join.DefaultIfEmpty()
                                 where IPM.Approved == "Y" && (SupplierID != 0 ? IPM.FASLID == SupplierID : IPM.FASLID != SupplierID) && IPM.PODate > currSessDate
                                 orderby IPM.PONo
                                 select new { IPM.PODate, IPM.PONo, IPD.Quantity, B.SQuantity, IPM.AutoID })
                            group ss by new
                            {
                                ss.PONo,
                                ss.PODate,
                                ss.AutoID
                            } into g
                            where g.Sum(s => s.Quantity ?? 0) - g.Sum(s => s.SQuantity ?? 0) > 0
                            select new MTDDLMaster()
                            {
                                DDLID = g.Key.AutoID.ToString(),
                                DDLName = g.Key.PONo.ToString() + "(" + ((g.Key.PODate.Value.Day.ToString().Length < 2) ? "0" : "") + g.Key.PODate.Value.Day.ToString() + "/" + ((g.Key.PODate.Value.Month.ToString().Length < 2) ? "0" : "") + g.Key.PODate.Value.Month.ToString() + "/" + g.Key.PODate.Value.Year.ToString() + ")"
                            }).Distinct().ToList();
                    break;

                case "GLID":
                    ViewData["ddlName"] = "General Ledger";
                    GComp = Convert.ToInt32(pid[1]);
                    string strForm = "";
                    if (pid[2] == "PE")
                    {
                        strForm = "PE Purchase";
                    }
                    else if (pid[2] == "PR")
                    {
                        strForm = "PR Return";
                    }
                    else if (pid[2] == "SE")
                    {
                        strForm = "SE Sales";
                    }
                    else if (pid[2] == "SR")
                    {
                        strForm = "SR Return";
                    }
                    else
                    {
                        strForm = "PE Purchase";
                    }
                    lobj = (from GL in db.FAGeneralLedgerMasters
                            join IFS in db.INVFASettings on GL.AutoID equals IFS.FAGLID
                            where IFS.INVFormName == strForm && GL.GCompID == IFS.FAGroupCompanyID && GL.GCompID == GComp
                            orderby GL.GeneralName
                            select new MTDDLMaster()
                            {
                                DDLID = GL.AutoID.ToString(),
                                DDLName = GL.GeneralName
                            }).Distinct().ToList();

                    // lobj = db.FAGeneralLedgerMasters.Where(model => model.AutoID != 0 && model.GCompID == GComp).OrderBy(model => model.GeneralName).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.GeneralName }).ToList();
                    break;
                case "VSLID":
                    lobj.Clear();
                    strvalue = Convert.ToInt32(pid[1]);
                    ViewData["ddlName"] = "GST A/c";
                    lobj = (from SLM in db.FASubLedgerMasters
                            join IFS in db.INVFASettings on SLM.FAGLID equals IFS.FAGLID
                            where IFS.INVFormName == "PE VAT" && SLM.GCompID == IFS.FAGroupCompanyID && SLM.GCompID == strvalue
                            orderby SLM.SLName
                            select new MTDDLMaster()
                            {
                                DDLID = SLM.AutoID.ToString(),
                                DDLName = SLM.SLName
                            }).Distinct().ToList();

                    break;


                case "DSLID":
                    lobj.Clear();
                    strvalue = Convert.ToInt32(pid[1]);
                    ViewData["ddlName"] = "Discount A/c";
                    lobj = (from SLM in db.FASubLedgerMasters
                            join IFS in db.INVFASettings on SLM.FAGLID equals IFS.FAGLID
                            where IFS.INVFormName == "PE Discount" && SLM.GCompID == IFS.FAGroupCompanyID && SLM.GCompID == strvalue
                            orderby SLM.SLName
                            select new MTDDLMaster()
                            {
                                DDLID = SLM.AutoID.ToString(),
                                DDLName = SLM.SLName
                            }).Distinct().ToList();

                    break;


                case "PSLID":
                    lobj.Clear();
                    strvalue = Convert.ToInt32(pid[1]);
                    int intGLID = Convert.ToInt32(pid[3]);
                    if (pid[2] == "PE")
                    {
                        strForm = "PE Purchase";
                        ViewData["ddlName"] = "Purchase A/c";
                    }
                    else if (pid[2] == "PR")
                    {
                        strForm = "PR Return";
                        ViewData["ddlName"] = "Return A/c";
                    }
                    else if (pid[2] == "SE")
                    {
                        strForm = "SE Sales";
                        ViewData["ddlName"] = "Sale A/c";
                    }
                    else if (pid[2] == "SR")
                    {
                        strForm = "SR Return";
                        ViewData["ddlName"] = "Sale Return A/c";
                    }
                    else
                    {
                        strForm = "PE Purchase";
                        ViewData["ddlName"] = "Purchase A/c";
                    }

                    lobj = (from SLM in db.FASubLedgerMasters
                            join IFS in db.INVFASettings on SLM.FAGLID equals IFS.FAGLID
                            where IFS.INVFormName == strForm && SLM.GCompID == IFS.FAGroupCompanyID && SLM.GCompID == strvalue && SLM.FAGLID == intGLID
                            orderby SLM.SLName
                            select new MTDDLMaster()
                            {
                                DDLID = SLM.AutoID.ToString(),
                                DDLName = SLM.SLName
                            }).Distinct().ToList();

                    break;

                case "CostCentreID":
                    lobj.Clear();
                    strvalue = Convert.ToInt32(pid[2]);
                    ViewData["ddlName"] = "Cost Center";
                    lobj = db.FACostCenterMasters.Where(model => model.AutoID != 0 && model.CompID == strvalue).OrderBy(model => model.CCName).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.CCName }).ToList();
                    break;

                case "GRNDetailID":
                    lobj.Clear();
                    ViewData["ddlName"] = "GRN No";
                    strvalue = Convert.ToInt32(Session["InvCompanyID"]);
                    intLocID = Convert.ToInt32(pid[1]);
                    //var llobj = db.INVGRNTransactionMasters.Where(model => model.AutoID != 0 && model.CompID == strvalue && model.INVLocationID == intLocID && model.Approved =="Y"  ).OrderBy(model => model.GRNNo).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.GRNNo.ToString() }).ToList();

                    //var yy = (from GR in db.INVTransactionDetailss select new { GR.IGRID }).ToArray();

                    //lobj = (from g in llobj
                    //        where !(g.DDLID.Contains("1"))
                    //        select new MTDDLMaster { DDLID = g.DDLID, DDLName = g.DDLName }).ToList();

                    lobj = (from GTM in db.INVGRNTransactionMasters
                            join B in
                                (from ID in db.INVTransactionDetailss join IM in db.INVTransactionMasters on ID.ITID equals IM.AutoID where IM.TType == "PE" select new { GRID = ID.IGRID }) on GTM.AutoID equals B.GRID
                             into B_join
                            from B in B_join.DefaultIfEmpty()
                            where GTM.Approved == "Y" && B.GRID == null
                            orderby GTM.GRNNo
                            select new MTDDLMaster { DDLID = GTM.AutoID.ToString(), DDLName = GTM.GRNNo.ToString() + " (" + ((GTM.GRNDate.Value.Day.ToString().Length < 2) ? "0" : "") + GTM.GRNDate.Value.Day.ToString() + "/" + ((GTM.GRNDate.Value.Month.ToString().Length < 2) ? "0" : "") + GTM.GRNDate.Value.Month.ToString() + "/" + GTM.GRNDate.Value.Year.ToString() + ")" }).ToList();
                    break;


                case "PODetailID":
                    lobj.Clear();
                    ViewData["ddlName"] = "Purchase No";
                    intLocID = Convert.ToInt32(pid[1]);

                    lobj = (from ITM in db.INVTransactionMasters
                            join ID in db.INVTransactionDetailss on ITM.AutoID equals ID.ITID
                            join B in
                                (from IM in db.INVTransactionMasters where IM.TType == "PR" select new { invTrans = IM.RTransactionID }) on ITM.AutoID equals B.invTrans
                             into B_join
                            from B in B_join.DefaultIfEmpty()
                            where B.invTrans == null && ID.LocID == intLocID && (ITM.TType == "PE" || ITM.TType == "D")
                            orderby ITM.InvNo
                            select new MTDDLMaster { DDLID = ITM.AutoID.ToString(), DDLName = ITM.InvNo.ToString() + " (" + ((ITM.InvDate.Value.Day.ToString().Length < 2) ? "0" : "") + ITM.InvDate.Value.Day.ToString() + "/" + ((ITM.InvDate.Value.Month.ToString().Length < 2) ? "0" : "") + ITM.InvDate.Value.Month.ToString() + "/" + ITM.InvDate.Value.Year.ToString() + ")" }).Distinct().ToList();

                    //lobj = (from ob in db.INVTransactionMasters.Where(model => model.TType == "P" || model.TType == "D").OrderBy(model => model.InvNo).ToList()
                    //        select new MTDDLMaster()
                    //        {
                    //            DDLID = ob.AutoID.ToString(),
                    //            DDLName = ob.InvNo.ToString() + " # " + ob.InvDate.Value.ToString("dd/MM/yyyy")
                    //        }).ToList();
                    //lobj = (from ss in podid.ToList() select new MTDDLMaster() { DDLID = ss.DDLID, DDLName = ss.DDLName + " # " + ss.InvoiceDate.Value.ToString("dd/MM/yyyy") }).ToList();
                    //lobj = db.INVTransactionMasters.Where(model => model.TType == "P" || model.TType == "D").OrderBy(model => model.InvNo).Select(model => new MTDDLMaster()
                    //{
                    //    DDLID = model.AutoID.ToString(),
                    //    DDLName = model.InvNo.ToString() + " # " + ((model.InvDate.Value.Day.ToString().Length < 2) ? "0" : "" + model.InvDate.Value.Day.ToString() + "/" + ((model.InvDate.Value.Month.ToString().Length < 2) ? "0" : "") + model.InvDate.Value.Month.ToString() + "/" + model.InvDate.Value.Year.ToString())
                    //}).ToList();
                    break;

                case "RSLID":
                    lobj.Clear();
                    strvalue = Convert.ToInt32(Session["INVGroupCompanyID"]);
                    ViewData["ddlName"] = "Return A/c";
                    lobj = (from SLM in db.FASubLedgerMasters
                            join IFS in db.INVFASettings on SLM.FAGLID equals IFS.FAGLID
                            where IFS.INVFormName == "PR Return" && SLM.GCompID == IFS.FAGroupCompanyID && SLM.GCompID == strvalue
                            orderby SLM.SLName
                            select new MTDDLMaster()
                            {
                                DDLID = SLM.AutoID.ToString(),
                                DDLName = SLM.SLName
                            }).Distinct().ToList();

                    break;

                case "SSLID":
                    lobj.Clear();
                    strvalue = Convert.ToInt32(Session["INVGroupCompanyID"]);
                    ViewData["ddlName"] = "Sale A/c";
                    lobj = (from SLM in db.FASubLedgerMasters
                            join IFS in db.INVFASettings on SLM.FAGLID equals IFS.FAGLID
                            where IFS.INVFormName == "SE Sales" && SLM.GCompID == IFS.FAGroupCompanyID && SLM.GCompID == strvalue
                            orderby SLM.SLName
                            select new MTDDLMaster()
                            {
                                DDLID = SLM.AutoID.ToString(),
                                DDLName = SLM.SLName
                            }).Distinct().ToList();

                    break;

                case "SSID":
                    lobj.Clear();
                    strvalue = Convert.ToInt32(pid[1]);
                    ViewData["ddlName"] = "Student Sale A/c";
                    lobj = (from SLM in db.FASubLedgerMasters
                            join IFS in db.INVFASettings on SLM.FAGLID equals IFS.FAGLID
                            where IFS.INVFormName == "SE Customer" && SLM.GCompID == IFS.FAGroupCompanyID && SLM.GCompID == strvalue
                            orderby SLM.SLName
                            select new MTDDLMaster()
                            {
                                DDLID = SLM.AutoID.ToString(),
                                DDLName = SLM.SLName
                            }).Distinct().ToList();

                    break;

                case "ESID":
                    lobj.Clear();
                    strvalue = Convert.ToInt32(pid[1]);
                    ViewData["ddlName"] = "Employee Sale A/c";
                    lobj = (from SLM in db.FASubLedgerMasters
                            join IFS in db.INVFASettings on SLM.FAGLID equals IFS.FAGLID
                            where IFS.INVFormName == "SE Customer" && SLM.GCompID == IFS.FAGroupCompanyID && SLM.GCompID == strvalue
                            orderby SLM.SLName
                            select new MTDDLMaster()
                            {
                                DDLID = SLM.AutoID.ToString(),
                                DDLName = SLM.SLName
                            }).Distinct().ToList();

                    break;

                case "RSSLID":
                    lobj.Clear();
                    strvalue = Convert.ToInt32(Session["GroupCompanyID"]);
                    ViewData["ddlName"] = "Return A/c";
                    lobj = (from SLM in db.FASubLedgerMasters
                            join IFS in db.INVFASettings on SLM.FAGLID equals IFS.FAGLID
                            where IFS.INVFormName == "SR Return" && SLM.GCompID == IFS.FAGroupCompanyID && SLM.GCompID == strvalue
                            orderby SLM.SLName
                            select new MTDDLMaster()
                            {
                                DDLID = SLM.AutoID.ToString(),
                                DDLName = SLM.SLName
                            }).Distinct().ToList();

                    break;

                case "SODetailID":
                    lobj.Clear();
                    ViewData["ddlName"] = "Sale No";
                    intLocID = Convert.ToInt32(pid[1]);

                    lobj = (from ITM in db.INVTransactionMasters
                            join ID in db.INVTransactionDetailss on ITM.AutoID equals ID.ITID
                            join B in
                                (from IM in db.INVTransactionMasters where IM.TType == "SR" select new { invTrans = IM.RTransactionID }) on ITM.AutoID equals B.invTrans
                             into B_join
                            from B in B_join.DefaultIfEmpty()
                            where B.invTrans == null && ID.LocID == intLocID && (ITM.TType == "SE")
                            orderby ITM.InvNo
                            select new MTDDLMaster { DDLID = ITM.AutoID.ToString(), DDLName = ITM.InvNo.ToString() + " (" + ((ITM.InvDate.Value.Day.ToString().Length < 2) ? "0" : "") + ITM.InvDate.Value.Day.ToString() + "/" + ((ITM.InvDate.Value.Month.ToString().Length < 2) ? "0" : "") + ITM.InvDate.Value.Month.ToString() + "/" + ITM.InvDate.Value.Year.ToString() + ")" }).Distinct().ToList();


                    break;

                case "INVGroupCompanyID":
                    lobj.Clear();
                    ViewData["ddlName"] = "Group Company";
                    lobj = db.InvGroupCompanyMasters.Where(model => model.AutoID != 0).OrderBy(model => model.GCName).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.GCName.ToString() }).ToList();

                    break;

                case "INVCompanyID":
                    lobj.Clear();
                    ViewData["ddlName"] = "Company";
                    strvalue = Convert.ToInt32(pid[1]);
                    lobj = db.InvCompanyMasters.Where(model => model.AutoID != 0 && model.GCompID == strvalue).OrderBy(model => model.CompName).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.CompName.ToString() }).ToList();

                    break;


                case "IRDetailID":
                    lobj.Clear();
                    ViewData["ddlName"] = "Issue No";
                    intLocID = Convert.ToInt32(pid[1]);

                    lobj = (from ITM in db.INVTransactionMasters
                            join ID in db.INVTransactionDetailss on ITM.AutoID equals ID.ITID
                            join B in
                                (from IM in db.INVTransactionMasters where IM.TType == "IR" select new { invTrans = IM.RTransactionID }) on ITM.AutoID equals B.invTrans
                             into B_join
                            from B in B_join.DefaultIfEmpty()
                            where B.invTrans == null && ID.LocID == intLocID && (ITM.TType == "IE")
                            orderby ITM.InvNo
                            select new MTDDLMaster { DDLID = ITM.AutoID.ToString(), DDLName = ITM.InvNo.ToString() + " (" + ((ITM.InvDate.Value.Day.ToString().Length < 2) ? "0" : "") + ITM.InvDate.Value.Day.ToString() + "/" + ((ITM.InvDate.Value.Month.ToString().Length < 2) ? "0" : "") + ITM.InvDate.Value.Month.ToString() + "/" + ITM.InvDate.Value.Year.ToString() + ")" }).Distinct().ToList();


                    break;


                #endregion

                #region Question Bank
                case "ClassID":
                    ViewData["ddlName"] = "Class";
                    lobj = db.MTClassMasters.Where(model => model.AutoID != 0).OrderBy(model => model.PriorityNo).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.ClassName }).ToList();
                    break;

                case "QBSubjectID":
                    ViewData["ddlName"] = "Subject";
                    lobj = db.QuestionBankSubjectMasters.Where(model => model.AutoID != 0).OrderBy(model => model.SubName).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.SubName }).ToList();
                    break;

                case "QSID":
                    ViewData["ddlName"] = "Set";
                    ClassID = Convert.ToInt32(pid[1]);
                    int QBSubjectID = Convert.ToInt32(pid[2]);
                    //lobj = db.QuestionBankSetMasters.Where(model => model.AutoID != 0 && model.ClassID == ClassID && model.QBSubjectID == QBSubjectID && model.TypeID == "Q").OrderBy(model => model.SetName).Select(model => new MTDDLMaster() { DDLID = model.AutoID.ToString(), DDLName = model.SetName }).ToList();
                    var varQSet = (from M in db.QuestionBankSetMasters.Where(a => a.QBSubjectID == QBSubjectID)
                                     join D in db.QuestionBankSetGenerationDetails on M.AutoID equals D.QSID
                                     where M.AcaStart == CCSession.AcaStart && M.SchoolID == CCSession.SchoolID && D.ClassId == ClassID
                                     orderby M.SetName
                                     select new { M.AutoID, M.SetName });
                    lobj = (from lo in varQSet.Distinct()
                            orderby lo.SetName
                            select new MTDDLMaster() { DDLID = lo.AutoID.ToString(), DDLName = lo.SetName }).ToList();

                    break;
                #endregion

                #region Book Store

                case "BSPurchaseVendorID":
                    lobj.Clear();
                    ViewData["ddlName"] = "Vendor A/c";
                    lobj = (from BSVM in db.BSVendorMasters
                            select new MTDDLMaster()
                            {
                                DDLID = BSVM.AutoID.ToString(),
                                DDLName = BSVM.VendorName
                            }).Distinct().ToList();
                    break;

                case "PDetailID":
                    lobj.Clear();
                    ViewData["ddlName"] = "Purchase No";
                    var PrchNos = (from BPM in db.BSPurchaseMasters
                                   join BPD in db.BSPurchaseDetailss on BPM.AutoID equals BPD.BSPurchaseID
                                   where !(db.BSPurchaseReturnMasters.Any(model => model.BSPurchaseID == BPM.AutoID))
                                   select new { BPM.AutoID, BPM.PurchaseNo, BPM.PurchaseDate }
                                        ).OrderByDescending(m => m.PurchaseNo).Distinct().ToList();

                    foreach (var item in PrchNos)
                    {
                        lobj.Add(new MTDDLMaster { DDLID = item.AutoID.ToString(), DDLName = item.PurchaseNo.ToString() + " (" + ((item.PurchaseDate.Value.Day.ToString().Length < 2) ? "0" : "") + item.PurchaseDate.Value.Day.ToString() + "/" + ((item.PurchaseDate.Value.Month.ToString().Length < 2) ? "0" : "") + item.PurchaseDate.Value.Month.ToString() + "/" + item.PurchaseDate.Value.Year.ToString() + ")" });
                    }

                    break;

                case "SDetailID":
                    lobj.Clear();
                    ViewData["ddlName"] = "Sale No";

                    if (pid[1] == "S")
                    {
                        lobj = (from BPM in db.BSTransactionMaster
                                join BPD in db.BSTransactionDetails on BPM.AutoID equals BPD.BSTransactionID
                                where BPM.TransactionType == "S" && BPM.SEFlag == "S" && !db.BSTransactionDetails.Any(x => x.BSTransactionID == BPM.RTransactionID)
                                orderby BPM.SaleNo
                                select new MTDDLMaster { DDLID = BPM.AutoID.ToString(), DDLName = BPM.SaleNo.ToString() + " (" + ((BPM.SaleDate.Value.Day.ToString().Length < 2) ? "0" : "") + BPM.SaleDate.Value.Day.ToString() + "/" + ((BPM.SaleDate.Value.Month.ToString().Length < 2) ? "0" : "") + BPM.SaleDate.Value.Month.ToString() + "/" + BPM.SaleDate.Value.Year.ToString() + ")" }).Distinct().ToList();
                    }
                    else if (pid[1] == "E")
                    {
                        lobj = (from BPM in db.BSTransactionMaster
                                join BPD in db.BSTransactionDetails on BPM.AutoID equals BPD.BSTransactionID
                                where BPM.TransactionType == "S" && BPM.SEFlag == "E" && !db.BSTransactionDetails.Any(x => x.BSTransactionID == BPM.RTransactionID)
                                orderby BPM.SaleNo
                                select new MTDDLMaster { DDLID = BPM.AutoID.ToString(), DDLName = BPM.SaleNo.ToString() + " (" + ((BPM.SaleDate.Value.Day.ToString().Length < 2) ? "0" : "") + BPM.SaleDate.Value.Day.ToString() + "/" + ((BPM.SaleDate.Value.Month.ToString().Length < 2) ? "0" : "") + BPM.SaleDate.Value.Month.ToString() + "/" + BPM.SaleDate.Value.Year.ToString() + ")" }).Distinct().ToList();

                    }

                    break;

                #endregion

                default:
                    break;
            }
            if (pid[0] != "CollectionID")
            {
                MTDDLMaster objMTDDLMaster = new MTDDLMaster();
                objMTDDLMaster.DDLID = "0";
                objMTDDLMaster.DDLName = "-- Select --";
                lobj.Insert(0, objMTDDLMaster);
            }
            ViewData["ddlData"] = lobj;
        }
        public ActionResult DDLPopUp(string strid, string ctrlid = "")
        {
            fillDDLData(strid, ctrlid);
            return PartialView("_DDLPopup");
        }
        #endregion

        #region Upload File
        public string UploadImageFileWithoutRestriction(HttpPostedFileBase fileData, string folder)
        {
            if (CheckSession())
            {
                return "Login Again";
            }

            if (folder == "")
            {
                byte[] ImageByte = null;
                BinaryReader reader = new BinaryReader(fileData.InputStream);
                ImageByte = reader.ReadBytes(fileData.ContentLength);
                TempData["LogoData"] = ImageByte;
            }
            else
            {
                string fileName = Server.MapPath("~/" + folder + "") + "/" + Session.SessionID + Path.GetFileName(fileData.FileName);
                if (System.IO.File.Exists(fileName) == true)
                {
                    System.IO.File.Delete(fileName);
                }
                fileData.SaveAs(fileName);
            }
            TempData["StringPath"] = Session.SessionID + Path.GetFileName(fileData.FileName);
            return "OK";


        }
        public string UploadImageFile(HttpPostedFileBase fileData, string folder)
        {
            if (CheckSession())
            {
                return "Login Again";
            }
            if (fileData.ContentType == "image/jpg" || fileData.ContentType == "image/jpeg")
            {
                if (fileData.ContentLength <= (1024 * 20))
                {
                    if (folder == "")
                    {
                        byte[] ImageByte = null;
                        BinaryReader reader = new BinaryReader(fileData.InputStream);
                        ImageByte = reader.ReadBytes(fileData.ContentLength);
                        TempData["LogoData"] = ImageByte;
                    }
                    else
                    {
                        string fileName = Server.MapPath("~/" + folder + "") + "/" + Session.SessionID + Path.GetFileName(fileData.FileName);
                        if (System.IO.File.Exists(fileName) == true)
                        {
                            System.IO.File.Delete(fileName);
                        }
                        fileData.SaveAs(fileName);
                    }
                    TempData["StringPath"] = Session.SessionID + Path.GetFileName(fileData.FileName);
                    return "OK";
                }
                else
                {
                    return "Image size should not be greater than 20kb";
                }
            }
            else
            {
                return "Image Type Should be JPG";
            }
        }


        public JsonResult GetImageBinarydata(int val)
        {
            CommonResponse Em = new CommonResponse();
            string filepath;
            int filetype = 1;
            if (val == 0 && TempData["StringPath"] != null && TempData["StringPath"].ToString() != "")
            {
                filepath = "/Temp/" + TempData["StringPath"].ToString();
                filetype = 2;
                TempData.Keep("StringPath");
            }
            else if (val == 0 && TempData["ImgPath"] != null && TempData["ImgPath"].ToString() != "")
            {
                filepath = TempData["ImgPath"].ToString();
                filetype = 2;
            }
            else
            {
                filepath = "/Images/NoImage.jpg";
            }
            Em.Message = "";
            object[] obj = new object[1];
            ViewData["ImagePath"] = filepath;
            ViewData["ImageType"] = filetype;

            obj[0] = DbCampusContext.RenderPertialViewtoString(this, "_ImageContent");
            Em.Data = obj;
            return Json(Em);
        }

        public ActionResult GetImageSrc(int id, string strValue, string strForm)
        {
            string[] LogoInfo = Convert.ToString(TempData["LogoInfo"]).Split('^');
            if (strValue == null && LogoInfo.Length > 0)
            {
                strValue = LogoInfo[1];
            }
            if (strForm == null && LogoInfo.Length > 1)
            {
                strForm = LogoInfo[2];
            }
            var q = from temp in db.FAGroupCompanyMasters.Where(model => model.AutoID == id) select temp.Picture; ;
            if (strForm == "FAGroupCompany")
            {
                q = from temp in db.FAGroupCompanyMasters.Where(model => model.AutoID == id) select temp.Picture;
            }
            else if (strForm == "FACompany")
            {
                q = from temp in db.FACompanyMasters.Where(model => model.AutoID == id) select temp.Picture;
            }
            else if (strForm == "InvGroupCompany")
            {
                q = from temp in db.InvGroupCompanyMasters.Where(model => model.AutoID == id) select temp.Picture;
            }
            else if (strForm == "InvCompany")
            {
                q = from temp in db.InvCompanyMasters.Where(model => model.AutoID == id) select temp.Picture;
            }
            else if (strForm == "Instinform")
            {
                q = from temp in db.MTInstitutionMasters.Where(model => model.AutoID == id) select temp.Image;
            }

            byte[] Image = q.First();
            object[] obj = new object[1];
            if (Image != null)
            {
                return File(Image, "Image/jpg");
            }
            else
            {
                return null;
            }

        }
        #endregion

        #region CheckBox Master

        private void fillCheckboxData(string id, string ddl, string chkValue)
        {
            string[] pid = id.Split('^');
            if (ddl == "")
            {
                ViewData["CBID"] = pid[0];
            }
            else
            {
                ViewData["CBID"] = ddl;
            }

            int SID = (int)Session["SchoolID"];
            int SAcaStart = (int)Session["AcaStart"];
            List<int> chkID = new List<int>();
            if (pid[0] != "ClasSec" && pid[0] != "AttClassSec")
            {
                if (chkValue != "")
                {
                    foreach (string i in chkValue.Split(','))
                    {
                        chkID.Add(Convert.ToInt32(i));
                    }
                }
            }

            List<MTCheckMaster> lobj = new List<MTCheckMaster>();

            switch (pid[0])
            {
                #region FEE Checkbox

                case "FIID":
                    ViewData["CBName"] = "Fee Installment";
                    int FGID = Convert.ToInt32(pid[1]);
                    lobj = (from FIM in db.FEEInstallmentMasters
                            join FGM in db.FEEGroupMasters on new { FIM.AcaStart, FIM.SchoolID, FIM.StyleID } equals new { AcaStart = (int?)FGM.AcaStart, FGM.SchoolID, FGM.StyleID }
                            where FGM.AutoID == FGID
                            orderby FIM.AutoID
                            select new MTCheckMaster() { CheckID = FIM.AutoID.ToString(), CheckName = FIM.FIName + " ", Check = chkID.Contains(FIM.AutoID) }).Distinct().ToList();

                    break;
                case "EmptyFeeGroup":
                    ViewData["CBName"] = "Fee Group";
                    lobj = (from FGM in db.FEEGroupMasters
                            join FSM in db.FEEStructureUserMasters on FGM.AutoID equals FSM.FGID into qs
                            from FSM in qs.DefaultIfEmpty()
                            where FGM.AcaStart == SAcaStart && FGM.SchoolID == SID && FSM.AutoID == null
                            orderby FGM.FGName
                            select new MTCheckMaster() { CheckID = FGM.AutoID.ToString(), CheckName = FGM.FGName, Check = false }).Distinct().ToList();
                    break;
                case "FeeFineGroup":
                    ViewData["CBName"] = "Fee Group";
                    FGID = Convert.ToInt32(pid[1]);
                    int FIID = Convert.ToInt32(pid[2]);
                    string FTID = pid[3].ToString();
                    DateTime Date = Convert.ToDateTime(pid[4], cinfo);
                    ViewData["CBID"] += "^" + pid[1] + "^" + pid[2] + "^" + pid[3] + "^" + pid[4];
                    lobj = (from FGM in db.FEEGroupMasters
                            join B in
                                (
                                    (from FS in db.FEEStructureSystems
                                     where FS.FIID == FIID && FS.Type == FTID && FS.DDate == Date
                                     group FS by new
                                     {
                                         FS.FGID
                                     } into g
                                     select new
                                     {
                                         FGID = (System.Int32?)g.Key.FGID
                                     })) on new { FGID = FGM.AutoID } equals new { FGID = (int)B.FGID } into B_join
                            from B in B_join.DefaultIfEmpty()
                            where FGM.AcaStart == SAcaStart && FGM.SchoolID == SID && B.FGID == null
                            //where FGM.AcaStart == SAcaStart && FGM.SchoolID == SID && FGM.AutoID != FGID 
                            orderby FGM.FGName
                            select new MTCheckMaster() { CheckID = FGM.AutoID.ToString(), CheckName = FGM.FGName, Check = false }).Distinct().ToList();
                    break;
                #endregion

                #region Student Checkbox

                case "ClasSec":
                    ViewData["CBName"] = "Class - Section";
                    DateTime CalDate = Convert.ToDateTime(pid[1]);
                    lobj = (from main in
                                (from CS in
                                     (from SYD in db.SIStudentYearWiseDetails
                                      join CM in db.MTClassMasters on SYD.ClsID equals CM.AutoID
                                      join SM in db.MTSectionMasters on SYD.SECID equals SM.AutoID
                                      select new { CM.AutoID, SectionID = SM.AutoID, CM.ClassName, SM.SectionName, CM.PriorityNo, SYD.SchID, SYD.AcaStarting })
                                 join CAL in db.SIStudentAttCalendars on new { ID1 = CS.AutoID, ID2 = CS.SectionID } equals new { ID1 = CAL.ClassIDs, ID2 = CAL.SectionIDs } into ps
                                 from CAL in (ps.Where(model => model.CalendarDates == CalDate)).DefaultIfEmpty()
                                 where CS.AcaStarting == SAcaStart && CS.SchID == SID
                                 select new
                                 {
                                     CS.AutoID,
                                     CS.SectionID,
                                     CS.ClassName,
                                     CS.SectionName,
                                     Check = (CAL.ClassIDs == null ? false : true),
                                     CS.PriorityNo
                                 }).Distinct()
                            orderby main.Check ? 0 : 1, main.PriorityNo, main.SectionName
                            select new MTCheckMaster()
                            {
                                CheckID = main.AutoID.ToString() + "~" + main.SectionID.ToString(),
                                CheckName = main.ClassName + " - " + main.SectionName,
                                Check = main.Check
                            }).ToList();
                    break;
                case "AttClassSec":
                    ViewData["CBName"] = "Class - Section";
                    int uid = Convert.ToInt32(pid[1]);

                    lobj = (from main in
                                (from CS in
                                     (from SYD in db.SIStudentYearWiseDetails
                                      join CM in db.MTClassMasters on SYD.ClsID equals CM.AutoID
                                      join SM in db.MTSectionMasters on SYD.SECID equals SM.AutoID
                                      select new { CM.AutoID, SectionID = SM.AutoID, CM.ClassName, SM.SectionName, CM.PriorityNo, SYD.SchID, SYD.AcaStarting })
                                 join CAL in db.MTUserAttendanceMasters.Where(model => model.AcaStat == SAcaStart && model.SchoolIDs == SID) on new { ID1 = CS.AutoID, ID2 = CS.SectionID }
                                     // ,ID3=CS.AcaStarting ,ID4=CS.SchID
                                 equals new { ID1 = CAL.ClassIDs, ID2 = CAL.SectionIDs } into ps
                                 //, ID3 = CAL.AcaStat, ID4 = CAL.SchoolIDs
                                 from CAL in (ps.Where(model => model.UIDs == uid)).DefaultIfEmpty()
                                 where CS.AcaStarting == SAcaStart && CS.SchID == SID
                                 select new { CS.AutoID, CS.SectionID, CS.ClassName, CS.SectionName, Check = (CAL.ATTUserIDs == null ? false : true), CS.PriorityNo, CS.SchID, CS.AcaStarting }).Distinct()
                            orderby main.Check ? 0 : 1, main.PriorityNo, main.SectionName
                            select new MTCheckMaster()
                            {
                                CheckID = main.AutoID.ToString() + "~" + main.SectionID.ToString(),
                                CheckName = main.ClassName + " - " + main.SectionName,
                                Check = main.Check
                            }).ToList();
                    break;
                #endregion

                #region Staff Checkbox

                case "CatID":
                    ViewData["CBName"] = "Leave Category";
                    //int FGID = Convert.ToInt32(pid[1]);
                    DateTime HDate = Convert.ToDateTime(pid[1]);
                    lobj = (from LM in db.PRLLeaveCategoryMasters
                            join LD in db.PRLLeaveCalendarMasters on LM.AutoID equals LD.StaffcategoryID into ps
                            from LD in (ps.Where(model => model.CalDate == HDate)).DefaultIfEmpty()
                            where LM.AutoID > 0

                            orderby LM.LeaveCategoryName
                            select new MTCheckMaster()
                            {
                                CheckID = LM.AutoID.ToString(),
                                CheckName = LM.LeaveCategoryName,
                                Check = LD.StaffcategoryID == null ? false : true
                            }).Distinct().ToList();

                    break;

                #endregion

                default:
                    break;
            }
            ViewData["CBData"] = lobj;
        }
        public ActionResult CBPopUp(string strid, string ctrlid = "", string chkValue = "")
        {
            fillCheckboxData(strid, ctrlid, chkValue);
            return PartialView("_CBPopup");
        }
        #endregion

        #region Fill Report CheckBox
        private List<MTCheckMaster> fillCheckboxListData(string id, int[] ColID)
        {
            string[] pid = id.Split('^');

            int schoolid = (int)Session["SchoolID"];
            int acastart = (int)Session["AcaStart"];

            List<MTCheckMaster> lobj = new List<MTCheckMaster>();

            switch (pid[0])
            {
                //******Fee Module*******/
                case "Class_Section":
                    lobj = (from Main in
                                (from FGM in db.FEEGroupMasters
                                 join FGD in db.FEEGroupDetails on FGM.AutoID equals FGD.FGID
                                 join CM in db.MTClassMasters on FGD.ClassID equals CM.AutoID
                                 join SM in db.MTSectionMasters on FGD.SectionID equals SM.AutoID
                                 join SYD in db.SIStudentYearWiseDetails on new { ClassID = CM.AutoID, SectionID = SM.AutoID } equals new { ClassID = (int)SYD.ClsID, SectionID = (int)SYD.SECID }
                                 where FGM.AcaStart == acastart && FGM.SchoolID == schoolid && ColID.Contains(FGM.AutoID)
                                 orderby CM.PriorityNo, SM.SectionName
                                 select new { ClassID = CM.AutoID, ClassName = CM.ClassName, PriorityNo = CM.PriorityNo, SectionID = SM.AutoID, SectionName = SM.SectionName }).Distinct()
                            orderby Main.PriorityNo, Main.SectionName
                            select new MTCheckMaster() { CheckID = Main.ClassID.ToString() + "#" + Main.SectionID.ToString(), CheckName = Main.ClassName + " " + Main.SectionName, Check = false }).ToList();
                    break;
                //****** End Fee Modeule*******//

                //******Transport Module*******/
                case "Stop":
                    lobj = (from TRD in db.TRBusRouteDetailss
                            join SM in db.TRBusStopMasters on TRD.TRBusStopID equals SM.AutoID
                            where ColID.Contains((int)TRD.BusRouteID) && SM.SchoolID == schoolid && SM.AcaStart == acastart
                            select new MTCheckMaster() { CheckID = SM.AutoID.ToString(), CheckName = SM.BusStopName, Check = false }).Distinct().ToList();
                    break;
                case "Section":
                    lobj = (from SYD in db.SIStudentYearWiseDetails
                            join SM in db.MTSectionMasters on SYD.SECID equals SM.AutoID
                            where ColID.Contains((int)SYD.ClsID) && SYD.SchID == schoolid && SYD.AcaStarting == acastart
                            select new MTCheckMaster() { CheckID = SM.AutoID.ToString(), CheckName = SM.SectionName, Check = false }).Distinct().ToList();
                    break;
                //****** End Transport Modeule*******//
                //*********INV Module************//

                case "Stock_Group":
                    string FGroupID = Session["InvGroupCompanyID"].ToString();
                    lobj = (from SGM in db.INVStockGroupMasters
                            where ColID.Contains((int)SGM.INVNOG) && SGM.GCompID.ToString().Contains(FGroupID)
                            select new MTCheckMaster() { CheckID = SGM.AutoID.ToString(), CheckName = SGM.GName, Check = false }).Distinct().ToList();
                    break;
                case "Stock_Ledger":
                    lobj = (from SLM in db.INVStockLedgerMasters
                            where ColID.Contains((int)SLM.InvSGID)
                            select new MTCheckMaster() { CheckID = SLM.AutoID.ToString(), CheckName = SLM.SLName, Check = false }).Distinct().ToList();
                    break;
                case "Item":
                    lobj = (from SIM in db.INVStockItemMasters
                            where ColID.Contains((int)SIM.InvSLID)
                            select new MTCheckMaster() { CheckID = SIM.AutoID.ToString(), CheckName = SIM.IName, Check = false }).Distinct().ToList();
                    break;

                //*********END INV Module***********//
                default:
                    break;
            }
            return lobj;
        }
        public JsonResult GetCheckBoxList(string strid, int[] ColID = null)
        {
            CommonResponse CR = new CommonResponse();
            try
            {
                if (CheckSession())
                {
                    CR.Message = "Login Again";
                    return Json(CR);
                }
                CR.Message = "";
                object[] obj = new object[1];
                obj[0] = fillCheckboxListData(strid, ColID);
                CR.Data = obj;
                return Json(CR);
            }
            catch (Exception ex)
            {
                CR.Message = ex.Message;
                return Json(CR);
            }
        }
        #endregion



        #region Default

        [HttpGet]
        [Authorize]
        public ActionResult Default()
        {

            if (CheckSession()) { return RedirectToAction("Logon", "Logon"); }
            ViewBag.CompanyName = CompanyName();
            TempData.Remove("ids");
            int uid = (int)Session["UID"];

            TempData["ModuleMaster"] = (from tt in
                                            (from mtm in db.MTMenuMasters
                                             join mtd in db.MTUserModuleMasters on mtm.ModuleID equals mtd.ModuleID
                                             join mtl in db.MTMenulimitmasters on mtm.MenuID equals mtl.MenuID
                                             orderby mtd.Priority, mtm.PriorityNo
                                             where mtl.UID == uid && mtm.ParentID == (int?)0 //&& mtl.VisibleOption == "Y"
                                             select new { mtd.ModuleID, mtd.ModuleName, mtl.VisibleOption }).ToList()
                                        select new MTUserModuleMaster() { ModuleID = tt.ModuleID, ModuleName = tt.ModuleName, SerialNoRange = tt.VisibleOption }).ToList();

            ViewData["ChartPermission"] = (from tt in
                                               (from mtc in db.MTUserChartMasters
                                                join mtm in db.MTChartMasters on mtc.ChartIDs equals mtm.ChartIDs
                                                where mtc.UIDs == uid
                                                select new
                                                {
                                                    ChartIDs = mtm.ChartIDs,
                                                    ChartName = mtm.ChartName
                                                }).ToList()
                                           select new MTChartMaster() { ChartIDs = tt.ChartIDs, ChartName = tt.ChartName }).ToList();
            Session["MessageCnt"] = db.MsgForApplicationLogin(uid, (int)Session["AcaStart"], (int)Session["SchoolID"], "EMPLOYEECOUNT").ToList()[0].Col1;
            return View();
        }

        public JsonResult Chart(string Flag, int id)
        {
            List<Chart> lstFeeChart = new List<Chart>();
            if (db.MTUserChartMasters.Where(m => m.ChartIDs == id).Count() > 0 && Session["SchoolID"] != null)
            {
                lstFeeChart = db.DashBoardChart((int)Session["SchoolID"], (int)Session["AcaStart"], Flag);
            }
            return Json(lstFeeChart);
        }    
       

        #endregion

        #region SubMenu list

        public ActionResult SubMenu(int moduleid)
        {
            if (CheckSession()) { return RedirectToAction("Logon", "Logon"); }
            CommonResponse CR = new CommonResponse();
            if (CheckSession())
            {
                CR.Message = "Login Again";
                return Json(CR);
            }
            List<MTMenuMaster> all = new List<MTMenuMaster>();
            int UID = (int)Session["UID"];

            all = (from tt in
                       (from mtm in db.MTMenuMasters
                        join mtd in db.MTUserModuleMasters on mtm.ModuleID equals mtd.ModuleID
                        join mtl in db.MTMenulimitmasters on mtm.MenuID equals mtl.MenuID
                        orderby mtd.Priority, mtm.PriorityNo, mtm.MenuID
                        where mtl.UID == UID && mtl.VisibleOption == "Y" && mtm.ModuleID == (int?)moduleid && mtm.ParentID != 0 && mtm.MenuName != "mnuStaffPayInfo" && mtm.EnableMenu == true
                        select new { mtm.MenuID, mtm.ParentID, mtm.ModuleID, mtm.MenuCaption, mtm.NavigationUrl, mtm.PriorityNo }).ToList()
                   select new MTMenuMaster()
                   {
                       MenuID = tt.MenuID,
                       ParentID = tt.ParentID,
                       ModuleID = tt.ModuleID,
                       MenuCaption = tt.MenuCaption,
                       NavigationUrl = (tt.NavigationUrl == "#" ? "#" : tt.NavigationUrl + "?menuid=" + tt.MenuID.ToString()),
                       PriorityNo = tt.PriorityNo
                   }).ToList();

            //all = (from tt in ss.ToList() select new MTMenuMaster() { MenuID = tt.MenuID, ParentID = tt.ParentID, ModuleID = tt.ModuleID, MenuCaption = tt.MenuCaption, NavigationUrl = (tt.NavigationUrl == "#" ? "#" : tt.NavigationUrl + "?parentid=" + tt.ParentID.ToString() + "&menuid=" + tt.MenuID.ToString()), PriorityNo = tt.PriorityNo }).ToList();

            TempData["Submenu"] = all;
            CR.Message = DbCampusContext.RenderPertialViewtoString(this, "_Submenu");
            return Json(CR);
        }

        #endregion

        #region Select School

        [HttpGet]
        public ActionResult selectschool()
        {
            if (CheckSession()) { return RedirectToAction("Logon", "Logon"); }
            int UID = (int)Session["UID"];
            List<MTInstitutionMaster> lst = new List<MTInstitutionMaster>();
            var obj = (from mt in db.MTInstitutionMasters
                       join mtp in db.MTUserInstitutionMasters on mt.AutoID equals mtp.SchoolID
                       where mtp.UID == UID
                       orderby mt.AutoID
                       select new { AutoID = mt.AutoID, Name = mt.Name });
            lst = (from ob in obj.ToList() select new MTInstitutionMaster() { AutoID = ob.AutoID, Name = ob.Name }).ToList();
            ViewBag.School = (from ob in obj.ToList() select new MTInstitutionMaster() { AutoID = ob.AutoID, Name = ob.Name }).ToList();
            return View();
        }

        [HttpGet]
        public ActionResult selectedschool(int id)
        {
            Session["SchoolID"] = id;
            Session["SchoolName"] = db.MTInstitutionMasters.Where(s => s.AutoID == id).Select(s => s.Name).ToList();
            return RedirectToAction("Default", "Campus");
        }

        #endregion

        #region   ChangePassword

        [HttpGet]
        public ActionResult ChangePassword()
        {
            if (CheckSession()) { return RedirectToAction("Logon", "Logon"); }
            //fillPermission();            
            return PartialView("ChangePassword");
        }

        [HttpPost]
        public JsonResult ChangePasswordSAVE(string OldPassword, string NewPassword)
        {
            CommonResponse CR = new CommonResponse();
            string[] str = { "", "" };
            int UID = (int)Session["UID"];
            try
            {
                if (CheckSession())
                {
                    CR.Message = "Login Again";
                    return Json(CR);
                }
                if (ModelState.IsValid)
                {

                    //RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();
                    //byte[] buff = new byte[6];
                    //rng.GetBytes(buff);
                    //string salt = Convert.ToBase64String(buff);
                    //string password = db.CreatePasswordHash(OldPassword, salt);

                    string password = FormsAuthentication.HashPasswordForStoringInConfigFile(OldPassword, "SHA1");

                    if (db.MTUserMasters.Where(model => (model.UID == UID && model.UserPassword == password)).Count() == 0)
                    {
                        CR.Message = "Incorrect Old Password";
                        return Json(CR);
                    }
                    else
                    {
                        string passNewword = FormsAuthentication.HashPasswordForStoringInConfigFile(NewPassword, "SHA1");
                        // string passNewword = db.CreatePasswordHash(NewPassword, salt);

                        MTUserMaster obj = db.MTUserMasters.Find(UID);
                        obj.UserPassword = passNewword;
                        db.SaveChanges();
                    }
                    CR.Message = "Saved Successfully";
                    object[] objects = new object[1];
                    CR.Data = objects;
                    return Json(CR);
                }
                else
                {
                    CR.Message = "Data not valid";
                    return Json(CR);
                }
            }
            catch (Exception ex)
            {
                CR.Message = ex.Message;
                return Json(CR);
            }
        }


        #endregion

        #region Fill Report DropDownList
        private List<MTDDLMaster> fillDropDownListData(string id, string ColID)
        {
            string[] pid = id.Split('^');

            int ID;

            List<MTDDLMaster> lobj = new List<MTDDLMaster>();

            switch (pid[0])
            {
                //******Library Module*******/
                case "Collection_Category":
                    ID = Convert.ToInt32(ColID);
                    lobj = (from LCM in db.LibCategoryMasters
                            join LCCM in db.LIBCollectionCategoryMasters on new { CollectionID = LCM.AutoID, LCM.LibraryID } equals new { LCCM.CollectionID, LibraryID = (int)LCCM.LibraryID }
                            where LCM.AutoID == ID && LCM.LibraryID == CCSession.LibraryID
                            orderby LCCM.Name
                            select new MTDDLMaster { DDLID = LCCM.AutoID.ToString(), DDLName = LCCM.Name }).ToList();
                    break;
                case "Prefix":
                    //SELECT CAST(MIN(AM.AccNo) AS VARCHAR)+'^'+CAST(Max(AM.AccNo) AS VARCHAR) FROM LIBAccessionMaster AM INNER JOIN LIBCollectionDetails CD" +
                    //       " ON CD.LIBCollectionDetailID=AM.LIBCollectionDetailID  INNER JOIN LIBCollectionMaster LCM ON LCM.LIBCollectionID=CD.LIBCollectionID " +
                    //       " INNER JOIN LIBCollectionCategoryMaster CCM ON CD.LIBCollectionCategoryID=CCM.LIBCollectionCategoryID WHERE  CD.LIBLibraryID=" + Session["LibraryID"] + "
                    ID = Convert.ToInt32(ColID);
                    var DATA = from LAM in db.LIBAccessionMasters
                               join LCD in db.LIBCollectionDetailss on LAM.CollectionDetailID equals LCD.AutoID
                               join LCCM in db.LIBCollectionCategoryMasters on new { LCD.CollectionCategoryID, LCD.LibraryID } equals new { CollectionCategoryID = LCCM.AutoID, LCCM.LibraryID }
                               where LCCM.CollectionID == ID && LCD.LibraryID == CCSession.LibraryID
                               group new { LAM, LCCM } by new { LCCM.AutoID, LCCM.Prefix } into qs
                               orderby qs.Key.Prefix
                               select new MTDDLMaster { DDLID = qs.Key.Prefix + "^" + qs.Min(model => model.LAM.AccNo) + "^" + qs.Max(model => model.LAM.AccNo), DDLName = qs.Key.Prefix };
                    lobj = (DATA).ToList();
                    break;
                case "Shelf":
                    ID = Convert.ToInt32(ColID);
                    lobj = (from LRM in db.LibRoomMasters
                            join LSM in db.LibshelfMasters on LRM.AutoID equals LSM.RoomID
                            where LRM.AutoID == ID && LRM.LibraryID == CCSession.LibraryID
                            orderby LSM.Name
                            select new MTDDLMaster { DDLID = LSM.AutoID.ToString(), DDLName = LSM.Name }).ToList();
                    break;
                case "Rack":
                    ID = Convert.ToInt32(ColID);
                    lobj = (from LSM in db.LibshelfMasters
                            join LRM in db.LIBRackMasters on LSM.AutoID equals LRM.LIBShelfID
                            where LSM.AutoID == ID
                            orderby LRM.Name
                            select new MTDDLMaster { DDLID = LRM.AutoID.ToString(), DDLName = LRM.Name }).ToList();
                    break;
                case "Section":
                    ID = Convert.ToInt32(ColID);
                    lobj = (from SYD in db.SIStudentYearWiseDetails
                            join SM in db.MTSectionMasters on SYD.SECID equals SM.AutoID
                            where SYD.ClsID == ID && SYD.SchID == CCSession.SchoolID && SYD.AcaStarting == CCSession.AcaStart
                            select new MTDDLMaster() { DDLID = SM.AutoID.ToString(), DDLName = SM.SectionName }).Distinct().ToList();
                    break;
                case "Member":
                    if (ColID.Split('^')[0] == "S")
                    {
                        int ClassID = Convert.ToInt32(ColID.Split('^')[1]);
                        int SectionID = Convert.ToInt32(ColID.Split('^')[2]);
                        lobj = (from LMD in db.LIBMembershipDetailss
                                join SM in db.SIStudentMasters on LMD.StudentEmpID equals SM.StudID
                                join SYD in db.SIStudentYearWiseDetails on SM.StudID equals SYD.StudID
                                where LMD.LibraryID == CCSession.LibraryID && SYD.SchID == CCSession.SchoolID && SYD.AcaStarting == CCSession.AcaStart && SYD.ClsID == ClassID && SYD.SECID == SectionID
                                select new MTDDLMaster() { DDLID = LMD.StudentEmpID.ToString(), DDLName = SM.FName + " " + SM.MName + " " + SM.LName }).Distinct().ToList();
                    }
                    else if (ColID.Split('^')[0] == "E")
                    {
                        lobj = (from LMD in db.LIBMembershipDetailss
                                join EM in db.PRLEmployeeMasters on LMD.StudentEmpID equals EM.EmpID
                                where LMD.LibraryID == CCSession.LibraryID && EM.SCID == CCSession.SchoolID
                                select new MTDDLMaster() { DDLID = LMD.StudentEmpID.ToString(), DDLName = EM.FName + " " + EM.MName + " " + EM.LName }).Distinct().ToList();
                    }
                    else if (ColID.Split('^')[0] == "O")
                    {
                        lobj = (from LMD in db.LIBMembershipDetailss
                                join OM in db.LIBOtherMemberMasters on LMD.StudentEmpID equals OM.OtherMemberID
                                where LMD.LibraryID == CCSession.LibraryID && OM.SchoolID == CCSession.SchoolID
                                select new MTDDLMaster() { DDLID = LMD.StudentEmpID.ToString(), DDLName = OM.MemberName }).Distinct().ToList();
                    }
                    break;
                case "Member_Group":
                    lobj = (from LMG in db.LibMemberGroupMasters
                            where LMG.LibraryID == CCSession.LibraryID && LMG.MemberType == ColID
                            orderby LMG.Name
                            select new MTDDLMaster { DDLID = LMG.AutoID.ToString(), DDLName = LMG.Name }).ToList();
                    break;
                //****** End Library Modeule*******//

                //***************Start School Online****************//
                case "Head_Assigner":
                    ID = Convert.ToInt32(ColID);
                    lobj = db.PDHeadMasters.Where(model => model.GroupID == ID).OrderBy(model => model.Priority).Select(model => new MTDDLMaster { DDLID = model.HeadID.ToString(), DDLName = model.PDHeadName }).ToList();
                    break;

                //***************End School Online*****************//
                default:
                    break;
            }
            return lobj;
        }
        public JsonResult GetDropDownList(string strid, string ColID = null)
        {
            CommonResponse CR = new CommonResponse();
            try
            {
                if (CheckSession())
                {
                    CR.Message = "Login Again";
                    return Json(CR);
                }
                CR.Message = "";
                object[] obj = new object[1];
                obj[0] = fillDropDownListData(strid, ColID);
                CR.Data = obj;
                return Json(CR);
            }
            catch (Exception ex)
            {
                CR.Message = ex.Message;
                return Json(CR);
            }
        }
        #endregion

        #region UserProfile
        [HttpGet]
        public ActionResult UserProfile()
        {

            if (CheckSession()) { return RedirectToAction("Logon", "Logon"); }
            int UID = (int)Session["UID"];
            UserProfileDetails UPD = db.UserProfileDetail.Where(model => model.UIDs == UID).ToList()[0];
            return PartialView("UserProfile", UPD);

        }

        #endregion

        #region About Us & privacy

        [HttpGet]
        [Authorize]
        public ActionResult Aboutus()
        {
            if (CheckSession()) { return RedirectToAction("Logon", "Logon"); }
            return PartialView("Aboutus");
        }

        [HttpGet]
        [Authorize]
        public ActionResult Privacy()
        {
            if (CheckSession()) { return RedirectToAction("Logon", "Logon"); }
            return PartialView("Privacy");
        }
        #endregion

        #region Camera Capturing

        public ActionResult Area()
        {
            if (CheckSession()) { return RedirectToAction("Logon", "Logon"); }
            fillPermission();
            return View();
        }


        [OutputCache(NoStore = true, Duration = 0, VaryByParam = "*")]
        public ActionResult ViewImage()
        {
            MTMainMaster imageModel = new MTMainMaster();
            imageModel.MainName2 = "ST.jpg";
            return PartialView("_AreaCreate", imageModel);
        }

        #endregion

        #region Webportal
        [HttpGet]
        public ActionResult Webportal()
        {
            if (CheckSession()) { return RedirectToAction("Logon", "Logon"); }
            int UID = (int)Session["UID"];
            int intEmpID = Convert.ToInt32(db.MTUserMasters.Where(model => model.UID == UID).Select(model => model.EmployeeIDStudentID).ToList()[0]);
            Session["EmployeeID"] = intEmpID;
            return RedirectToAction("Index", "Employees");
            
        }
        #endregion

        #region Messages

        [HttpGet]
        public ActionResult Messages()
        {
            if (CheckSession()) { return RedirectToAction("Logon", "Logon"); }
            int SchoolID = (int)Session["SchoolID"];
            int SAcaStart = (int)Session["AcaStart"];
            int UID = (int)Session["UID"];
            ViewData["FromEmail"] = db.MTUserMasters.Where(model => model.UID == UID).Select(model => model.UserName).FirstOrDefault();

            if (Convert.ToInt32(Session["UserTypeID"]) == 0)
            {
                ViewBag.Class = (from ST in
                                     (from sm in db.SIStudentYearWiseDetails
                                      join STM in db.SIStudentMasters on sm.StudID equals STM.StudID
                                      join cm in db.MTClassMasters on sm.ClsID equals cm.AutoID
                                      join UM in db.MTUserMasters on STM.PareD equals UM.EmployeeIDStudentID
                                      where UM.UserTypeID == 3
                                      && cm.AutoID != 0 && sm.AcaStarting == SAcaStart && sm.SchID == SchoolID && sm.StudStatus == "S"
                                      orderby cm.PriorityNo
                                      select new { ClsID = cm.AutoID.ToString(), ClsName = cm.ClassName, PriorityNo = cm.PriorityNo }).Distinct()
                                 orderby ST.PriorityNo
                                 select new { ClsID = ST.ClsID, ClsName = ST.ClsName }).ToList();

                ViewBag.Section = (from cm in db.MTSectionMasters
                                   where cm.AutoID == 0
                                   orderby cm.SectionName
                                   select new { SECID = cm.AutoID.ToString(), SECName = cm.SectionName }).Distinct().ToList();
            }
            else if (Convert.ToInt32(Session["UserTypeID"]) == 1)
            {
                int EmployeeID = (int)Session["EmployeeID"];

                var classdata = ((from fm in db.MTClassTeacherAssigners.Where(x => x.AcaStart == SAcaStart && x.SchoolID == SchoolID)
                                  join CM in db.MTClassMasters on fm.ClassID equals CM.AutoID
                                  where fm.EmployeeID == EmployeeID
                                  orderby CM.PriorityNo
                                  select new { ClsID = CM.AutoID.ToString(), ClsName = CM.ClassName, PriorityNo = CM.PriorityNo }).Distinct()
                     .Union
                     (from fm in db.SubjectTeacherAssignments.Where(x => x.AcaStart == SAcaStart && x.SchoolID == SchoolID)
                      join CM in db.MTClassMasters on fm.ClassID equals CM.AutoID
                      where fm.EmpID == EmployeeID
                      orderby CM.PriorityNo
                      select new { ClsID = CM.AutoID.ToString(), ClsName = CM.ClassName, PriorityNo = CM.PriorityNo }).Distinct()
                     .Union
                      (from fm in db.MTTeacherClassSecAssigners.Where(x => x.AcaStart == SAcaStart && x.SchoolID == SchoolID)
                       join CM in db.MTClassMasters on fm.ClassID equals CM.AutoID
                       where fm.EmployeeID == EmployeeID
                       orderby CM.PriorityNo
                       select new { ClsID = CM.AutoID.ToString(), ClsName = CM.ClassName, PriorityNo = CM.PriorityNo }).Distinct());

                ViewBag.Class = classdata.Distinct().OrderBy(a => a.PriorityNo).ToList();

                var Sectiondata = ((from fm in db.MTClassTeacherAssigners.Where(x => x.AcaStart == SAcaStart && x.SchoolID == SchoolID && x.ClassID == 0)
                                    join CM in db.MTSectionMasters on fm.SectionID equals CM.AutoID
                                    where fm.EmployeeID == EmployeeID
                                    orderby CM.SectionName
                                    select new { SECID = fm.SectionID.ToString(), SECName = CM.SectionName }).Distinct()
                                 .Union
                                 (from fm in db.SubjectTeacherAssignments.Where(x => x.AcaStart == SAcaStart && x.SchoolID == SchoolID && x.ClassID == 0)
                                  join CM in db.MTSectionMasters on fm.SectionID equals CM.AutoID
                                  where fm.EmpID == EmployeeID
                                  orderby CM.SectionName
                                  select new { SECID = fm.SectionID.ToString(), SECName = CM.SectionName }).Distinct()
                                 .Union
                                  (from fm in db.MTTeacherClassSecAssigners.Where(x => x.AcaStart == SAcaStart && x.SchoolID == SchoolID && x.ClassID == 0)
                                   join CM in db.MTSectionMasters on fm.SectionID equals CM.AutoID
                                   where fm.EmployeeID == EmployeeID
                                   orderby CM.SectionName
                                   select new { SECID = fm.SectionID.ToString(), SECName = CM.SectionName }).Distinct());

                ViewBag.Section = Sectiondata.Distinct().OrderBy(b => b.SECName).ToList();
            }
            List<GetGridData> ls = new List<GetGridData>();
            ls = db.MsgForApplicationLogin(UID, SAcaStart, SchoolID, "EMPLOYEE").ToList();
            ViewData["MessageGrid"] = ls;

            ViewData["ParentID"] = (from CM in db.MTClassMasters
                                    where CM.AutoID == 100000
                                    select new GetGridData() { ColID = 0, Col1 = "", Col2 = "" }).Distinct().ToList();

            ViewData["EmployeeUID"] = (from EM in db.PRLEmployeeMasters
                                       join UM in db.MTUserMasters on EM.EmpID equals UM.EmployeeIDStudentID
                                       where UM.UserTypeID == 1 && UM.UserStatus == "Y"
                                       orderby EM.FName
                                       select new GetGridData() { ColID = UM.UID, Col1 = UM.UserID, Col2 = EM.FName + " " + EM.MName + " " + EM.LName + " (" + EM.EmpCode + ")", Col3 = EM.EmpID.ToString() }).Distinct().OrderBy(model => model.Col2).ToList();
            ViewData["Student"] = (from CM in db.MTClassMasters
                                   where CM.AutoID == 0
                                   select new GetGridData() { ColID = 0, Col1 = "", Col2 = "" }).Distinct().ToList();

            ViewBag.Group = (from GM in db.MTGroupMasters
                             join GD in db.MTGroupDetailss on GM.GroupID equals GD.GroupID
                             where GM.EntryUserID == CCSession.UID && GM.SchoolID == CCSession.SchoolID && GM.AcaStart == CCSession.AcaStart
                             orderby GM.GroupName
                             select new { GID = GM.GroupID.ToString(), GName = GM.GroupName }).Distinct().ToList();
            return View();

        }
        [HttpPost]
        public JsonResult GetClassSec(int CLID, int SECID)
        {
            CommonResponse CR = new CommonResponse();
            object[] objects = new object[2];
            int UID = (int)Session["UID"];
            try
            {
                if (CheckSession())
                {
                    CR.Message = "Login Again";
                    return Json(CR);
                }

                int SchoolID = (int)Session["SchoolID"];
                int SAcaStart = (int)Session["AcaStart"];

                List<MTCheckMaster> ls = new List<MTCheckMaster>();
                if (SECID == 0)
                {

                    ViewData["ParentID"] = (from SYD in db.SIStudentYearWiseDetails.Where(y => y.AcaStarting == SAcaStart)
                                            join SM in db.SIStudentMasters on SYD.StudID equals SM.StudID
                                            join UM in db.MTUserMasters on SM.PareD equals UM.EmployeeIDStudentID
                                            where UM.UserTypeID == 3 && SYD.ClsID == CLID && SYD.AcaStarting == SAcaStart && SYD.SchID == SchoolID
                                            && SYD.StudStatus == "S" && UM.UserStatus == "Y"
                                            select new GetGridData() { ColID = UM.UID, Col1 = UM.UserID, Col2 = (SM.FName + " " + SM.MName + " " + SM.LName).Replace("  ", " ").Trim(), Col3 = SYD.StudID.ToString() }).Distinct().ToList();

                    if (Convert.ToInt32(Session["UserTypeID"]) == 0)
                    {
                        ViewBag.Section = (from SYD in db.SIStudentYearWiseDetails
                                           join STM in db.SIStudentMasters on SYD.StudID equals STM.StudID
                                           join SM in db.MTSectionMasters on SYD.SECID equals SM.AutoID
                                           join UM in db.MTUserMasters on STM.PareD equals UM.EmployeeIDStudentID
                                           where UM.UserTypeID == 3 && SYD.AcaStarting == SAcaStart && SYD.SchID == SchoolID
                                           && SYD.ClsID == CLID && SYD.StudStatus == "S"
                                           orderby SM.SectionName
                                           select new { SECID = SM.AutoID.ToString(), SECName = SM.SectionName }).Distinct().ToList();
                    }
                    else if (Convert.ToInt32(Session["UserTypeID"]) == 1)
                    {
                        int EmployeeID = (int)Session["EmployeeID"];
                        var Sectiondata = ((from fm in db.MTClassTeacherAssigners.Where(x => x.AcaStart == SAcaStart && x.SchoolID == SchoolID && x.ClassID == CLID)
                                            join CM in db.MTSectionMasters on fm.SectionID equals CM.AutoID
                                            where fm.EmployeeID == EmployeeID
                                            orderby CM.SectionName
                                            select new { SECID = fm.SectionID.ToString(), SECName = CM.SectionName }).Distinct()
                                                 .Union
                                                 (from fm in db.SubjectTeacherAssignments.Where(x => x.AcaStart == SAcaStart && x.SchoolID == SchoolID && x.ClassID == CLID)
                                                  join CM in db.MTSectionMasters on fm.SectionID equals CM.AutoID
                                                  where fm.EmpID == EmployeeID
                                                  orderby CM.SectionName
                                                  select new { SECID = fm.SectionID.ToString(), SECName = CM.SectionName }).Distinct()
                                                        .Union
                                                        (from fm in db.MTTeacherClassSecAssigners.Where(x => x.AcaStart == SAcaStart && x.SchoolID == SchoolID && x.ClassID == CLID)
                                                         join CM in db.MTSectionMasters on fm.SectionID equals CM.AutoID
                                                         where fm.EmployeeID == EmployeeID
                                                         orderby CM.SectionName
                                                         select new { SECID = fm.SectionID.ToString(), SECName = CM.SectionName }).Distinct());

                        ViewBag.Section = Sectiondata.Distinct().OrderBy(b => b.SECName).ToList();
                    }

                    objects[1] = ViewBag.Section;

                }
                else
                {

                    ViewData["ParentID"] = (from SYD in db.SIStudentYearWiseDetails.Where(y => y.AcaStarting == SAcaStart)
                                            join SM in db.SIStudentMasters on SYD.StudID equals SM.StudID
                                            join UM in db.MTUserMasters on SM.PareD equals UM.EmployeeIDStudentID
                                            where UM.UserTypeID == 3 && SYD.ClsID == CLID && SYD.AcaStarting == SAcaStart && SYD.SchID == SchoolID
                                            && SYD.StudStatus == "S" && SYD.SECID == SECID && UM.UserStatus == "Y"
                                            select new GetGridData() { ColID = UM.UID, Col1 = UM.UserID, Col2 = (SM.FName + " " + SM.MName + " " + SM.LName).Replace("  ", " ").Trim(), Col3 = SYD.StudID.ToString() }).Distinct().ToList();

                }

                objects[0] = DbCampusContext.RenderPertialViewtoString(this, "_MessageClassSection");

                CR.Data = objects;
                CR.Message = "";
                return Json(CR);
            }
            catch (Exception ex)
            {
                CR.Message = ex.Message;
                return Json(CR);
            }
        }

        [HttpPost]

        public JsonResult PostMessage(string sToID, string MessageDtl, HttpPostedFileBase UploadFile, int? GroupID)
        {
            // CommonResponse cr = new CommonResponse();
            string msg = "";
            MessageSenddetails objMsd = new MessageSenddetails();
            MessageFileUpload objFU = new MessageFileUpload();
            MessageSenddetails paraMsd = new MessageSenddetails();
            JavaScriptSerializer json = new JavaScriptSerializer();
            List<int> studlst = new List<int>();
            List<int> Emplst = new List<int>();
            object[] obj = new object[1];
            try
            {
                paraMsd = (MessageSenddetails)json.ConvertToType<MessageSenddetails>(json.DeserializeObject(MessageDtl));
                int iAttachID = 0;
                if (CheckSession())
                {
                    //cr.Message = "Login Again";
                    //return Json(cr);
                    return Json("Login Again");
                }
                int SchoolID = (int)Session["SchoolID"];
                int UID = (int)Session["UID"];
                int SAcaStart = (int)Session["AcaStart"];
                int MessageId = (db.MessageSenddetails.Max(model => (int?)model.MessageID) ?? 0) + 1;

                if (UploadFile != null)
                {
                    if (UploadFile.FileName != "")
                    {
                        iAttachID = (db.MessageFileUploads.Max(model => (int?)model.AttachID) ?? 0) + 1;
                        string fileName = UploadFile.FileName.Replace(" ", "").Replace("&", "").ToString();
                        string UExtn = Path.GetExtension(UploadFile.FileName);
                        UploadFile.SaveAs(Server.MapPath("~") + "\\Messages\\" + fileName);

                        objFU.AttachID = iAttachID;
                        objFU.Attach = UploadFile.FileName.Replace(" ", "").Replace("&", "").ToString(); ;
                        objFU.EntryDate = DateTime.Now;
                        objFU.EntryUserID = (int)Session["UID"];
                        db.MessageFileUploads.Add(objFU);
                    }
                }

                string[] ToUID = new string[] { };
                if (sToID != "")
                {
                    ToUID = sToID.ToString().Split(',');
                }



                for (int i = 0; i < ToUID.Length; i++)
                {
                    if (ToUID[i] != "")
                    {
                        var AA = ToUID[i].Split('#');
                        objMsd = new MessageSenddetails();
                        objMsd.MessageID = MessageId + i;
                        objMsd.FromUID = CCSession.UID;
                        objMsd.AcaStart = CCSession.AcaStart;
                        objMsd.Contents = paraMsd.Contents;
                        objMsd.Date = DateTime.Now;
                        objMsd.ReadUnread = "UR";
                        objMsd.Status = "";
                        objMsd.StudentID = AA.Length > 1 ? Convert.ToInt32(AA[1]) : 0;
                        objMsd.Subject = paraMsd.Subject;
                        objMsd.ToUID = Convert.ToInt32(AA[0]);
                        objMsd.AttachmentID = iAttachID;
                        db.MessageSenddetails.Add(objMsd);

                        if (db.MTUserMasters.Where(m => m.UID == objMsd.ToUID).Select(m => m.UserTypeID).FirstOrDefault() == 3)
                        {
                            studlst.Add(objMsd.StudentID);
                        }
                        else if (db.MTUserMasters.Where(m => m.UID == objMsd.ToUID).Select(m => m.UserTypeID).FirstOrDefault() == 1)
                        {
                            Emplst.Add(db.MTUserMasters.Where(m => m.UID == objMsd.ToUID).Select(m => m.EmployeeIDStudentID).FirstOrDefault().Value);
                        }
                    }
                }

                db.SaveChanges();

                if (GroupID != null)
                {
                    int StudentID = 0;
                    int uid = 0;
                    MessageId = (db.MessageSenddetails.Max(model => (int?)model.MessageID) ?? 0) + 1;

                    foreach (var a in (from SYD in db.SIStudentYearWiseDetails.Where(model => model.AcaStarting == CCSession.AcaStart)
                                       join GD in db.MTGroupDetailss.Where(a => a.GroupID == GroupID) on new { Cls = (int)SYD.ClsID, Sec = (int)SYD.SECID }
                                       equals new { Cls = GD.ClassID, Sec = GD.SectionID }
                                       join SM in db.SIStudentMasters on SYD.StudID equals SM.StudID
                                       join UM in db.MTUserMasters on SM.PareD equals UM.EmployeeIDStudentID
                                       where UM.UserTypeID == 3 && GD.StudIDEmployeeID == 0 && UM.UserStatus == "Y"
                                       select (UM.UID + "#" + SM.StudID)).Union(from SYD in db.SIStudentYearWiseDetails.Where(model => model.AcaStarting == CCSession.AcaStart)
                                                                                join GD in db.MTGroupDetailss.Where(a => a.GroupID == GroupID) on new { Cls = (int)SYD.ClsID, Sec = (int)SYD.SECID, StudID = SYD.StudID }
                                                                                equals new { Cls = GD.ClassID, Sec = GD.SectionID, StudID = GD.StudIDEmployeeID }
                                                                                join SM in db.SIStudentMasters on SYD.StudID equals SM.StudID
                                                                                join UM in db.MTUserMasters on SM.PareD equals UM.EmployeeIDStudentID
                                                                                where UM.UserTypeID == 3 && UM.UserStatus == "Y" && GD.StudIDEmployeeID != 0
                                                                                select (UM.UID + "#" + SM.StudID)).Distinct().Union(from GD in db.MTGroupDetailss
                                                                                                                                    join PRL in db.PRLEmployeeMasters on GD.StudIDEmployeeID equals PRL.EmpID
                                                                                                                                    join UM in db.MTUserMasters on PRL.EmpID equals UM.EmployeeIDStudentID
                                                                                                                                    where GD.GroupID == GroupID && UM.UserTypeID == 1 && UM.UserStatus == "Y"
                                                                                                                                       && GD.ClassID == 0 && GD.SectionID == 0
                                                                                                                                    select (UM.UID + "#" + 0)).ToList())
                    {
                        if (!ToUID.Contains(a.ToString()))
                        {

                            //if (db.MTUserMasters.Where(model => model.UID == a && model.UserTypeID == 3).Count() > 0)
                            //{
                            //    var Stud = (from UM in db.MTUserMasters
                            //                join SMM in db.SIStudentMasters on UM.EmployeeIDStudentID equals SMM.PareD
                            //                where UM.UID == a
                            //                select new { SMM.StudID }).FirstOrDefault();

                            //    if (Stud != null)
                            //    {
                            //        StudentID = Stud.StudID;
                            //    }
                            //}
                            //else
                            //{
                            //    StudentID = 0;
                            //}

                            StudentID = Convert.ToInt32(a.ToString().Split('#')[1]);
                            uid = Convert.ToInt32(a.ToString().Split('#')[0]);

                            objMsd = new MessageSenddetails();
                            objMsd.MessageID = MessageId++;
                            objMsd.FromUID = CCSession.UID;
                            objMsd.AcaStart = CCSession.AcaStart;
                            objMsd.Contents = paraMsd.Contents;
                            objMsd.Date = DateTime.Now;
                            objMsd.ReadUnread = "UR";
                            objMsd.Status = "";
                            objMsd.StudentID = StudentID;
                            objMsd.Subject = paraMsd.Subject;
                            objMsd.ToUID = uid;
                            objMsd.AttachmentID = iAttachID;
                            db.MessageSenddetails.Add(objMsd);

                        }
                    }

                }

                db.SaveChanges();
                msg = "Send Successfully";

                //Notification
                if (studlst.Count > 0)
                {
                    for (int i = 0; i < studlst.Count(); i++)
                    {
                        MobileNotification("New Message", paraMsd.Subject, GetNotificationUserName(studlst[i], paraMsd.Contents), studlst[i], "S", "Message");
                    }
                }
                if (Emplst.Count > 0)
                {
                    for (int i = 0; i < Emplst.Count(); i++)
                    {
                        MobileNotification("New Message", paraMsd.Subject, paraMsd.Contents, Emplst[i], "E", "Message");
                    }
                }
                return Json(msg);
            }
            catch (Exception ex)
            {
                msg = ex.Message;
                return Json(msg);
            }
        }

        [HttpGet]
        public ActionResult EmployeeMessage()
        {
            int SchoolID = (int)Session["SchoolID"];
            List<MTCheckMaster> ls = new List<MTCheckMaster>();

            ls = (from EM in db.PRLEmployeeMasters
                  join UM in db.MTUserMasters on EM.EmpID equals UM.EmployeeIDStudentID
                  where EM.SLID == SchoolID && EM.EmployeeStatus == "N" && UM.UserTypeID == 1 && UM.UserStatus == "Y"
                  orderby EM.FName, EM.MName, EM.LName
                  select new MTCheckMaster() { CheckID = UM.UID.ToString() + "#" + EM.EmpID.ToString(), CheckName = EM.FName + " " + EM.MName + " " + EM.LName + "-" + EM.EmpCode }).Distinct().ToList();

            ViewData["Employee"] = ls;
            return PartialView("_MessageEmployee");

        }

        [HttpPost]
        public JsonResult GetMessagesDetailsView(int MessageID)
        {
            CommonResponse cr = new CommonResponse();
            object[] obj = new object[4];
            int SchoolID = (int)Session["SchoolID"];
            int SAcaStart = (int)Session["AcaStart"];
            if (CheckSession())
            {
                cr.Message = "Login Again";
                return Json(cr);
            }
            var Message = (from MSD in db.MessageSenddetails.Where(m => m.MessageID == MessageID)
                           join UM in db.MTUserMasters on MSD.FromUID equals UM.UID
                           join FUD in db.MessageFileUploads on MSD.AttachmentID equals FUD.AttachID into lq
                           from FUD in lq.DefaultIfEmpty()
                           where MSD.MessageID == MessageID
                           select new { MSD.MessageID, MSD.Subject, MSD.Contents, MSD.ToUID, FUD.Attach, MSD.FromUID, UM.UserID, MSD.StudentID }).FirstOrDefault();
            obj[0] = Message;

            if (Message.ToUID == CCSession.UID)
            {
                MessageSenddetails SDS = db.MessageSenddetails.Find(MessageID);
                SDS.ReadUnread = "R";
                db.SaveChanges();
            }
            int UID = (int)Session["UID"];
            List<GetGridData> ls = new List<GetGridData>();
            ls = db.MsgForApplicationLogin(UID, SAcaStart, SchoolID, "EMPLOYEE").ToList();
            ViewData["MessageGrid"] = ls;
            obj[1] = DbCampusContext.RenderPertialViewtoString(this, "_MessageReceived");
            obj[2] = db.MsgForApplicationLogin(UID, SAcaStart, SchoolID, "EMPLOYEECOUNT").ToList()[0].Col1;
            Session["MessageCnt"] = obj[2];
            obj[3] = 0;
            if (db.MessageSenddetails.Where(model => (model.MessageID == MessageID && model.ToUID == UID)).Count() > 0)
            {
                obj[3] = 1;
            }
            cr.Data = obj;
            return Json(cr);
        }



        public JsonResult MessagesDetails(string Type)
        {
            CommonResponse cr = new CommonResponse();
            object[] obj = new object[3];
            int SchoolID = (int)Session["SchoolID"];
            int SAcaStart = (int)Session["AcaStart"];
            if (CheckSession())
            {
                cr.Message = "Login Again";
                return Json(cr);
            }

            int UID = (int)Session["UID"];

            if (Type == "I")
            {

                List<GetGridData> ls = new List<GetGridData>();
                ls = db.MsgForApplicationLogin(UID, SAcaStart, SchoolID, "EMPLOYEE").ToList();
                ViewData["MessageGrid"] = ls;
                obj[1] = DbCampusContext.RenderPertialViewtoString(this, "_MessageReceived");
                cr.Data = obj;
            }
            else
            {
                List<GetGridData> ls = new List<GetGridData>();
                ls = db.MsgForApplicationLogin(UID, SAcaStart, SchoolID, "SEND").ToList();
                ViewData["MessageGrid"] = ls;
                obj[1] = DbCampusContext.RenderPertialViewtoString(this, "_MessageReceived");
                //  obj[2] = db.MsgForApplicationLogin(UID, SAcaStart, SchoolID, "EMPLOYEECOUNT").ToList()[0].Col1;
                //  Session["MessageCnt"] = obj[2];
                cr.Data = obj;
            }


            cr.Data = obj;
            return Json(cr);
        }

        #endregion

        #region ExcelUpdation
        public ActionResult ExcelUpdation()
        {
            if (CheckSession()) { return RedirectToAction("Logon", "Logon"); }
            fillPermission();
            int SchoolID = (int)Session["SchoolID"];
            int SAcaStart = (int)Session["AcaStart"];

            ViewData["Student"] = (from MM in db.SIStudentMasters
                                   where MM.StudID == 0
                                   select new MTCheckMaster() { CheckID = MM.StudID.ToString(), CheckName = MM.FName }).Distinct().ToList();





            ViewBag.Class = (from ST in
                                 (from sm in db.SIStudentYearWiseDetails
                                  join cm in db.MTClassMasters on sm.ClsID equals cm.AutoID
                                  where cm.AutoID != 0 && sm.AcaStarting == SAcaStart && sm.SchID == SchoolID
                                  orderby cm.PriorityNo
                                  select new { ClsID = cm.AutoID.ToString(), ClsName = cm.ClassName, PriorityNo = cm.PriorityNo }).Distinct()
                             orderby ST.PriorityNo
                             select new { ClsID = ST.ClsID, ClsName = ST.ClsName }).ToList();


            ViewBag.Section = (from sm in db.MTSectionMasters
                               where sm.AutoID == 1000
                               select new { SECID = sm.AutoID.ToString(), SECName = sm.SectionName }).ToList();


            List<MTCheckMaster> SIList = new List<MTCheckMaster>();
            MTCheckMaster obj = new MTCheckMaster();

            obj.CheckID = "StudentFirstName";
            obj.CheckName = "Student First Name";
            SIList.Add(obj);

            obj = new MTCheckMaster();
            obj.CheckID = "StudentMiddleName";
            obj.CheckName = "Student Middle Name";
            SIList.Add(obj);

            obj = new MTCheckMaster();
            obj.CheckID = "StudentLastName";
            obj.CheckName = "Student Last Name";
            SIList.Add(obj);

            obj = new MTCheckMaster();
            obj.CheckID = "DateOfBirth";
            obj.CheckName = "Date Of Birth";
            SIList.Add(obj);

            obj = new MTCheckMaster();
            obj.CheckID = "DateOfAdmission";
            obj.CheckName = "Date Of Admission";
            SIList.Add(obj);

            obj = new MTCheckMaster();
            obj.CheckID = "DateOfJoin";
            obj.CheckName = "Date Of Join";
            SIList.Add(obj);



            obj = new MTCheckMaster();
            obj.CheckID = "Category";
            obj.CheckName = "Category";
            SIList.Add(obj);

            obj = new MTCheckMaster();
            obj.CheckID = "Religion";
            obj.CheckName = "Religion";
            SIList.Add(obj);

            obj = new MTCheckMaster();
            obj.CheckID = "House";
            obj.CheckName = "House";
            SIList.Add(obj);

            obj = new MTCheckMaster();
            obj.CheckID = "BoardingCategory";
            obj.CheckName = "Boarding Category";
            SIList.Add(obj);

            obj = new MTCheckMaster();
            obj.CheckID = "EmergencyPhoneNo";
            obj.CheckName = "Emergency PhoneNo";
            SIList.Add(obj);

            obj = new MTCheckMaster();
            obj.CheckID = "EmailID";
            obj.CheckName = "EmailID";
            SIList.Add(obj);

            obj = new MTCheckMaster();
            obj.CheckID = "BloodGroup";
            obj.CheckName = "Blood Group";
            SIList.Add(obj);

            obj = new MTCheckMaster();
            obj.CheckID = "Nationality";
            obj.CheckName = "Nationality";
            SIList.Add(obj);


            obj = new MTCheckMaster();
            obj.CheckID = "MotherTongue";
            obj.CheckName = "MotherTongue";
            SIList.Add(obj);

            obj = new MTCheckMaster();
            obj.CheckID = "RollNo";
            obj.CheckName = "RollNo";
            SIList.Add(obj);

            obj = new MTCheckMaster();
            obj.CheckID = "BoardRollNo";
            obj.CheckName = "Board RollNo";
            SIList.Add(obj);

            obj = new MTCheckMaster();
            obj.CheckID = "Caste";
            obj.CheckName = "Caste";
            SIList.Add(obj);

            obj = new MTCheckMaster();
            obj.CheckID = "Gender";
            obj.CheckName = "Gender";
            SIList.Add(obj);

            obj = new MTCheckMaster();
            obj.CheckID = "AadhaarCard";
            obj.CheckName = "Aadhaar Card";
            SIList.Add(obj);

            obj = new MTCheckMaster();
            obj.CheckID = "SchoolBus";
            obj.CheckName = "School Bus";
            SIList.Add(obj);

            obj = new MTCheckMaster();
            obj.CheckID = "PresentAddress";
            obj.CheckName = "Present Address";
            SIList.Add(obj);

            obj = new MTCheckMaster();
            obj.CheckID = "SRNo";
            obj.CheckName = "SR No";
            SIList.Add(obj);

            obj = new MTCheckMaster();
            obj.CheckID = "PENNo";
            obj.CheckName = "PEN No";
            SIList.Add(obj);


            //obj = new MTCheckMaster();
            //obj.CheckID = "PinCode";
            //obj.CheckName = "PinCode";
            //SIList.Add(obj);

            //obj = new MTCheckMaster();
            //obj.CheckID = "TelePhone";
            //obj.CheckName = "TelePhone";
            //SIList.Add(obj);

            ViewData["StudentFields"] = SIList;


            List<MTCheckMaster> SIParentList = new List<MTCheckMaster>();
            MTCheckMaster obj1 = new MTCheckMaster();
            obj1.CheckID = "FatherName";
            obj1.CheckName = "Father Name";
            SIParentList.Add(obj1);

            obj1 = new MTCheckMaster();
            obj1.CheckID = "FatherQualification";
            obj1.CheckName = "Father Qualification";
            SIParentList.Add(obj1);

            obj1 = new MTCheckMaster();
            obj1.CheckID = "FatherOccupation";
            obj1.CheckName = "Father Occupation";
            SIParentList.Add(obj1);

            obj1 = new MTCheckMaster();
            obj1.CheckID = "FatherDesignation";
            obj1.CheckName = "Father Designation";
            SIParentList.Add(obj1);

            obj1 = new MTCheckMaster();
            obj1.CheckID = "FatherAnnualIncome";
            obj1.CheckName = "Father Annual Income";
            SIParentList.Add(obj1);

            obj1 = new MTCheckMaster();
            obj1.CheckID = "FatherOrganizationName";
            obj1.CheckName = "Father Organization Name";
            SIParentList.Add(obj1);

            obj1 = new MTCheckMaster();
            obj1.CheckID = "FatherOrganizationAddress";
            obj1.CheckName = "Father Organization Address";
            SIParentList.Add(obj1);

            obj1 = new MTCheckMaster();
            obj1.CheckID = "FatherEmailID";
            obj1.CheckName = "Father EmailID";
            SIParentList.Add(obj1);

            //obj1 = new MTCheckMaster();
            //obj1.CheckID = "FatherNationlity";
            //obj1.CheckName = "Father Nationlity";
            //SIParentList.Add(obj1);

            obj1 = new MTCheckMaster();
            obj1.CheckID = "FatherMobileNo";
            obj1.CheckName = "Father Mobile No";
            SIParentList.Add(obj1);

            //obj1 = new MTCheckMaster();
            //obj1.CheckID = "FatherTelephone";
            //obj1.CheckName = "Father Telephone";
            //SIParentList.Add(obj1);

            obj1 = new MTCheckMaster();
            obj1.CheckID = "MotherName";
            obj1.CheckName = "Mother Name";
            SIParentList.Add(obj1);

            obj1 = new MTCheckMaster();
            obj1.CheckID = "MotherQualification";
            obj1.CheckName = "Mother Qualification";
            SIParentList.Add(obj1);

            obj1 = new MTCheckMaster();
            obj1.CheckID = "MotherOccupation";
            obj1.CheckName = "Mother Occupation";
            SIParentList.Add(obj1);

            obj1 = new MTCheckMaster();
            obj1.CheckID = "MotherDesignation";
            obj1.CheckName = "Mother Designation";
            SIParentList.Add(obj1);

            obj1 = new MTCheckMaster();
            obj1.CheckID = "MotherAnnualIncome";
            obj1.CheckName = "Mother Annual Income";
            SIParentList.Add(obj1);

            obj1 = new MTCheckMaster();
            obj1.CheckID = "MotherOrganizationName";
            obj1.CheckName = "Mother Organization Name";
            SIParentList.Add(obj1);

            obj1 = new MTCheckMaster();
            obj1.CheckID = "MotherOrganizationAddress";
            obj1.CheckName = "Mother Organization Address";
            SIParentList.Add(obj1);

            obj1 = new MTCheckMaster();
            obj1.CheckID = "MotherEmailID";
            obj1.CheckName = "Mother EmailID";
            SIParentList.Add(obj1);

            //obj1 = new MTCheckMaster();
            //obj1.CheckID = "MotherNationlity";
            //obj1.CheckName = "Mother Nationlity";
            //SIParentList.Add(obj1);

            obj1 = new MTCheckMaster();
            obj1.CheckID = "MotherMobileNo";
            obj1.CheckName = "Mother Mobile No";
            SIParentList.Add(obj1);

            //obj1 = new MTCheckMaster();
            //obj1.CheckID = "MotherTelephone";
            //obj1.CheckName = "Mother Telephone";
            //SIParentList.Add(obj1);

            obj1 = new MTCheckMaster();
            obj1.CheckID = "GuardianName";
            obj1.CheckName = "Guardian Name";
            SIParentList.Add(obj1);

            obj1 = new MTCheckMaster();
            obj1.CheckID = "GuardianRelation";
            obj1.CheckName = "Guardian Relation";
            SIParentList.Add(obj1);

            obj1 = new MTCheckMaster();
            obj1.CheckID = "GuardianMobile";
            obj1.CheckName = "Guardian Mobile";
            SIParentList.Add(obj1);

            obj1 = new MTCheckMaster();
            obj1.CheckID = "GuardianEmailID";
            obj1.CheckName = "Guardian mailID";
            SIParentList.Add(obj1);


            obj1 = new MTCheckMaster();
            obj1.CheckID = "GuardianAddress";
            obj1.CheckName = "Guardian Address";
            SIParentList.Add(obj1);

            ViewData["ParentFields"] = SIParentList;


            List<MTCheckMaster> SIAdditionalList = new List<MTCheckMaster>();
            MTCheckMaster obj2 = new MTCheckMaster();
            obj2.CheckID = "SecondLanguage";
            obj2.CheckName = "Second Language";
            SIAdditionalList.Add(obj2);

            obj2 = new MTCheckMaster();
            obj2.CheckID = "ThridLanguage";
            obj2.CheckName = "Thrid Language";
            SIAdditionalList.Add(obj2);

            //obj2 = new MTCheckMaster();
            //obj2.CheckID = "LivingWith";
            //obj2.CheckName = "Living With";
            //SIAdditionalList.Add(obj2);

            //obj2 = new MTCheckMaster();
            //obj2.CheckID = "Meals";
            //obj2.CheckName = "Meals";
            //SIAdditionalList.Add(obj2);

            obj2 = new MTCheckMaster();
            obj2.CheckID = "PlaceofBirth";
            obj2.CheckName = "PlaceofBirth";
            SIAdditionalList.Add(obj2);


            //obj2 = new MTCheckMaster();
            //obj2.CheckID = "Country";
            //obj2.CheckName = "Country";
            //SIAdditionalList.Add(obj2);


            obj2 = new MTCheckMaster();
            obj2.CheckID = "CertificateNo";
            obj2.CheckName = "Certificate No";
            SIAdditionalList.Add(obj2);

            obj2 = new MTCheckMaster();
            obj2.CheckID = "CertificateDate";
            obj2.CheckName = "Certificate Date";
            SIAdditionalList.Add(obj2);


            obj2 = new MTCheckMaster();
            obj2.CheckID = "CertificateCropNo";
            obj2.CheckName = "Certificate Crop No";
            SIAdditionalList.Add(obj2);


            obj2 = new MTCheckMaster();
            obj2.CheckID = "SchoolName";
            obj2.CheckName = "School Name";
            SIAdditionalList.Add(obj2);

            obj2 = new MTCheckMaster();
            obj2.CheckID = "TCNo";
            obj2.CheckName = "TC No";
            SIAdditionalList.Add(obj2);

            obj2 = new MTCheckMaster();
            obj2.CheckID = "LeavingReason";
            obj2.CheckName = "Leaving Reason";
            SIAdditionalList.Add(obj2);

            obj2 = new MTCheckMaster();
            obj2.CheckID = "Syllabus";
            obj2.CheckName = "Syllabus";
            SIAdditionalList.Add(obj2);

            obj2 = new MTCheckMaster();
            obj2.CheckID = "PreviousClass";
            obj2.CheckName = "Previous Class";
            SIAdditionalList.Add(obj2);

            obj2 = new MTCheckMaster();
            obj2.CheckID = "TCDate";
            obj2.CheckName = "TC Date";
            SIAdditionalList.Add(obj2);

            obj2 = new MTCheckMaster();
            obj2.CheckID = "PreviousSchoolAddress";
            obj2.CheckName = "Previous School Address";
            SIAdditionalList.Add(obj2);


            obj2 = new MTCheckMaster();
            obj2.CheckID = "CareerGoals";
            obj2.CheckName = "Career Goals";
            SIAdditionalList.Add(obj2);


            obj2 = new MTCheckMaster();
            obj2.CheckID = "Hobbies";
            obj2.CheckName = "Hobbies";
            SIAdditionalList.Add(obj2);

            obj2 = new MTCheckMaster();
            obj2.CheckID = "Achievements";
            obj2.CheckName = "Achievements";
            SIAdditionalList.Add(obj2);

            obj2 = new MTCheckMaster();
            obj2.CheckID = "PersonalIdentificationMark";
            obj2.CheckName = "Personal Identification Mark";
            SIAdditionalList.Add(obj2);

            ViewData["AdditionalFields"] = SIAdditionalList;

            return PartialView("ExcelUpdation");
        }

        [HttpPost]
        public JsonResult ExcelDisplay(string Fields, string type)
        {
            CommonResponse CR = new CommonResponse();
            object[] objects = new object[2];
            try
            {
                int SchoolID = (int)Session["SchoolID"];
                int SAcaStart = (int)Session["AcaStart"];

                if (CheckSession())
                {
                    CR.Message = "Login Again";
                    return Json(objects);
                }

                Fields = Fields.Substring(1, Fields.Length - 1);

                if (ModelState.IsValid)
                {
                    if (type == "1")//--For Student
                    {
                        ViewBag.GetData = db.SPGetExcelData(Fields).Tables[0];
                        TempData["DummyData"] = db.SPGetExcelData(Fields).Tables[0];
                    }
                    else //for Staff
                    {

                    }

                    objects[0] = DbCampusContext.RenderPertialViewtoString(this, "_ExcelUpGrid").Replace("ExcelDisplay", "ExcelUpdation");

                    CR.Data = objects;
                    CR.Message = "";
                    return Json(CR);
                }
                else
                {
                    objects[0] = "Data not valid";
                    return Json(objects);
                }
            }
            catch (Exception ex)
            {
                objects[0] = ex.Message;
                return Json(objects);
            }
        }

        [HttpPost]
        [Authorize]
        public JsonResult DataImport(HttpPostedFileBase FileData)
        {
            Session["ExcelFileName"] = "";
            CommonResponse CR = new CommonResponse();
            object[] objects = new object[3];
            Int32 intAcaStart = Convert.ToInt32(Session["AcaStart"]);
            Int32 intSchoolId = Convert.ToInt32(Session["SchoolID"]);

            string strMsg = "";
            try
            {
                if (CheckSession())
                {
                    strMsg = "Login Again";
                    return Json(strMsg);
                }

                if (FileData != null && FileData.ContentLength > 0)
                {
                    Random rm = new Random();
                    string NUM = rm.Next(1, 5000).ToString();

                    string strtempFile = "File" + NUM;
                    string filename = Path.GetFileName(FileData.FileName);
                    Session["ExcelFileName"] = strtempFile;

                    string filepath = Path.Combine(Server.MapPath("~/StudentExcelLog/"), string.Format("{0}", "" + strtempFile + ".xls"));
                    if (System.IO.File.Exists(filepath))
                        System.IO.File.Delete(filepath);
                    FileData.SaveAs(Server.MapPath("~/StudentExcelLog/" + strtempFile + ".xls"));

                    if (System.IO.File.Exists(filepath) == true)
                    {
                        OleDbConnection objOleDb = new OleDbConnection();
                        try
                        {
                            //*********** OLEDB Connection String 64 Bit data Provider. 
                            string sExcelConn = @"Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + filepath + ";Extended Properties=Excel 12.0";
                            //string sExcelConn = @"Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + filepath + ";Extended Properties=Excel 8.0";

                            objOleDb.ConnectionString = sExcelConn;
                            objOleDb.Open();
                            DataTable dtSheetName = objOleDb.GetOleDbSchemaTable(OleDbSchemaGuid.Tables, null);
                            string ExcelQuery = "";
                            ExcelQuery = "Select *from [" + dtSheetName.Rows[0]["TABLE_NAME"].ToString() + "]";


                            //************** Create OleDbCommand to fetch data from Excel. 
                            DataSet ds = new DataSet();
                            OleDbCommand ObjDBConn = new OleDbCommand(ExcelQuery, objOleDb);
                            OleDbDataAdapter adp = new OleDbDataAdapter(ObjDBConn);
                            adp.Fill(ds);

                            TempData["Msg"] = "";
                            if (ds.Tables[0].Rows.Count == 0)
                            {
                                strMsg = "There is no record in excel file";
                                TempData["Msg"] = strMsg;
                                TempData.Keep();
                                return Json(strMsg);
                            }

                            //var chkduplicateRecord = ds.Tables[0].AsEnumerable().GroupBy(r => r, DataRowComparer.Default).Any(g => g.Count() > 1);

                            //if (chkduplicateRecord == true)
                            //{
                            //    strMsg = "Duplicate";
                            //    TempData["Msg"] = strMsg;
                            //    TempData.Keep();
                            //    return Json(strMsg);
                            //}


                            foreach (var column in ds.Tables[0].Columns.Cast<DataColumn>().ToArray())
                            {
                                if (ds.Tables[0].AsEnumerable().All(dr => dr.IsNull(column)))
                                    ds.Tables[0].Columns.Remove(column);

                            }

                            TempData["ExcelData"] = ds.Tables[0];
                            Session["Exdata"] = ds.Tables[0];

                            //if (ds.Tables[0] == null)
                            //{
                            //    strMsg = "Please Try Again !";
                            //    TempData["Msg"] = strMsg;
                            //    TempData.Keep();
                            //    return Json(strMsg);

                            //}


                            ObjDBConn.Dispose();
                            dtSheetName.Dispose();
                            objOleDb.Close();
                            objOleDb.Dispose();

                        }
                        catch (Exception ex)
                        {
                            objOleDb.Close();
                            objOleDb.Dispose();
                            strMsg = "Selected Excel Format is Invalid";
                        }
                        finally
                        {
                            objOleDb.Close();
                            objOleDb.Dispose();
                            //string strNewFile = (Server.MapPath("~") + "StudentExcel/File_.xls");
                            //FileInfo excelFiles = new FileInfo(strNewFile);
                            //if (excelFiles.Exists)
                            //{
                            //    excelFiles.Delete();
                            //}
                        }
                    }
                    else
                    {
                        strMsg = "File Not Found";
                    }
                    return Json(strMsg);
                }
                else
                {
                    return Json("Error In File");
                }
            }
            catch (Exception ex)
            {
                strMsg = ex.Message;
                return Json(strMsg);
            }
        }

        [HttpPost]
        [Authorize]
        public JsonResult DataImportDispaly()
        {
            CommonResponse CR = new CommonResponse();
            object[] objects = new object[3];
            Int32 intAcaStart = Convert.ToInt32(Session["AcaStart"]);
            Int32 intSchoolId = Convert.ToInt32(Session["SchoolID"]);

            string strMsg = "";
            try
            {
                if (CheckSession())
                {
                    strMsg = "Login Again";
                    return Json(strMsg);
                }


                if (TempData["Msg"].ToString() != "")
                {
                    List<SIDirectEntry> ls = new List<SIDirectEntry>();
                    ls = (from CM in db.MTClassMasters
                          where CM.AutoID == 0
                          select new SIDirectEntry()
                          {
                              AdmissionNo = "0"

                          }).ToList();
                    ViewBag.GetData = ls;
                    CR.Message = TempData["Msg"].ToString();
                    TempData["Msg"] = "";
                    TempData.Keep();

                }
                else
                {
                    ViewBag.GetData = TempData["ExcelData"];
                    TempData.Keep();
                    objects[0] = ViewBag.GetData;

                }
                objects[0] = DbCampusContext.RenderPertialViewtoString(this, "_ExcelUpGrid").Replace("DataImportDispaly", "ExcelUpdation");
                CR.Data = objects;
                return Json(CR);

            }
            catch (Exception ex)
            {
                strMsg = ex.Message;
                return Json(CR);
            }
        }


        public static bool Isdatetimevalidate(string txtdate)
        {
            DateTime tempdate;
            return DateTime.TryParse(txtdate, out tempdate);
        }
        public static bool IsValidEmail(string email)
        {
            try
            {
                var addr = new System.Net.Mail.MailAddress(email);
                return addr.Address == email;
            }
            catch
            {
                return false;
            }
        }



        [HttpPost]
        public JsonResult ExcelUpdate(string[][] main, encodeshdata trdata)
        {
            try
            {
                string WritelogMsg = "Admission No.    Status    Logs\r\n...............................................................\r\n\r\n";
                int SchoolID = (int)Session["SchoolID"];
                int SAcaStart = (int)Session["AcaStart"];
                object[] objects = new object[3];

                if (CheckSession())
                {
                    return Json("Login Again");
                }
                if (ModelState.IsValid)
                {
                    //db.Log_ExcelEntry.RemoveRange(db.Log_ExcelEntry.Where(model => model.AdmissionNo != "" || model.AdmissionNo == ""));
                    //db.SaveChanges();

                    System.Data.DataTable dt = TempData["ExcelData"] as System.Data.DataTable;

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        string StudentFirstName = "";
                        string StudentMiddleName = "";
                        string StudentLastName = "";
                        DateTime DateOfBirth = Convert.ToDateTime("01-01-1999");
                        DateTime DateOfAdmission = Convert.ToDateTime("01-01-1999");
                        DateTime DateOfJoin = Convert.ToDateTime("01-01-1999");
                        int Category = 0;
                        int Religion = 0;
                        int House = 0;
                        int BoardingCategory = 0;
                        string EmergencyPhoneNo = "";
                        string EmailID = "";
                        int BloodGroup = 0;
                        int Nationality = 0;
                        int MotherTongue = 0;
                        int RollNo = 0;
                        string BoardRollNo = "";
                        string Caste = "";
                        int Gender = 0;
                        string AadhaarCard = "";
                        string SRNo = "";
                        string PENNo = "";
                        string SchoolBus = "";
                        string PresentAddress = "";
                        string PinCode = "";
                        string TelePhone = "";

                        string FatherName = "";
                        string FatherQualification = "";
                        int FatherOccupation = 0;
                        int FatherDesignation = 0;
                        double FatherAnnualIncome = 0;
                        string FatherOrganizationName = "";
                        string FatherOrganizationAddress = "";
                        string FatherEmailID = "";
                        int FatherNationlity = 0;
                        string FatherMobileNo = "";
                        string FatherTelephone = "";

                        string MotherName = "";
                        string MotherQualification = "";
                        int MotherOccupation = 0;
                        int MotherDesignation = 0;
                        double MotherAnnualIncome = 0;
                        string MotherOrganizationName = "";
                        string MotherOrganizationAddress = "";
                        string MotherEmailID = "";
                        int MotherNationlity = 0;
                        string MotherMobileNo = "";
                        string MotherTelephone = "";

                        string GuardianName = "";
                        string GuardianRelation = "";
                        string GuardianMobile = "";
                        string GuardianEmailID = "";
                        string GuardianAddress = "";

                        int SecondLanguage = 0;
                        int ThridLanguage = 0;
                        int LivingWith = 0;
                        string Meals = "";
                        string PlaceofBirth = "";
                        int Country = 0;
                        string CertificateNo = "";

                        DateTime CertificateDate = Convert.ToDateTime("01-01-1999");
                        string CertificateCropNo = "";
                        string SchoolName = "";
                        string TCNo = "";
                        string LeavingReason = "";
                        string Syllabus = "";
                        string PreviousClass = "";
                        DateTime TCDate = Convert.ToDateTime("01-01-1999");

                        string PreviousSchoolAddress = "";
                        string CareerGoals = "";
                        string Hobbies = "";
                        string Achievements = "";
                        string PersonalIdentificationMark = "";
                        string AdmissionNo = "";


                        string logMsg = "";

                        if (dt.Columns.Contains("AdmissionNo"))
                        {
                            string Adm = dt.Rows[i]["AdmissionNo"].ToString();
                            if (Adm != "")
                            {
                                if (Adm.Length > 50)
                                {
                                    logMsg += "AdmissionNo length is greater than 50." + ",";
                                }
                                Adm = db.RemoveSpecialChar(Adm);
                                if (db.SIStudentYearWiseDetails.Where(model => model.AdmNo == Adm && model.AcaStarting == SAcaStart && model.SchID == SchoolID).Count() == 0)
                                {
                                    logMsg += "AdmissionNo Does not exist." + ",";
                                }


                                AdmissionNo = Adm;
                            }
                            else
                            {
                                logMsg += "AdmissionNo Does not exist." + ",";
                            }
                        }




                        if (dt.Columns.Contains("StudentFirstName"))
                        {
                            string error = "";
                            string ColVal = dt.Rows[i]["StudentFirstName"].ToString();
                            if (ColVal != "")
                            {
                                if (ColVal.Length > 50)
                                {
                                    error += "Student First Name length is greater than 50." + ",";
                                }
                                if (error == "")
                                {
                                    StudentFirstName = db.RemoveSpecialChar(ColVal);
                                }
                                logMsg += error;
                            }
                        }
                        if (dt.Columns.Contains("StudentMiddleName"))
                        {
                            string error = "";
                            string SMName = dt.Rows[i]["StudentMiddleName"].ToString();
                            if (SMName != "")
                            {
                                if (SMName.Length > 50)
                                {
                                    error += "StudentMiddleName length is greater than 50." + ",";
                                }

                                if (error == "")
                                {
                                    StudentMiddleName = db.RemoveSpecialChar(SMName);
                                }
                                logMsg += error;
                            }
                        }
                        if (dt.Columns.Contains("StudentLastName"))
                        {
                            string error = "";
                            string SLName = dt.Rows[i]["StudentLastName"].ToString();
                            if (SLName != "")
                            {
                                if (SLName.Length > 50)
                                {
                                    error += "StudentLastName length is greater than 50." + ",";

                                }
                                if (error == "")
                                {
                                    StudentLastName = db.RemoveSpecialChar(SLName);
                                }
                                logMsg += error;
                            }
                        }
                        if (dt.Columns.Contains("DateOfBirth"))
                        {
                            string DOB = dt.Rows[i]["DateOfBirth"].ToString();
                            // DOB = Convert.ToDateTime(DOB,cinfo).ToString("dd/MM/yyyy").Replace("-","/");


                            if (DOB != "")
                            {
                                string error = "";
                                if (DOB.Length > 10)
                                {
                                    error += "DateOfBirth length is greater than 10.Format should (dd-mm-yyyy)." + ",";
                                }

                                string format = "dd/MM/yyyy";
                                DateTime dasts;
                                if (DateTime.TryParseExact(DOB, format, CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None, out dasts))
                                {

                                }
                                else
                                {
                                    error += "Invalid DateOfBirth Format(dd-mm-yyyy)" + ",";
                                }


                                if (error == "")
                                {
                                    DOB = Convert.ToDateTime(DOB, cinfo).ToString("dd/MM/yyyy").Replace("-", "/");
                                    DateOfBirth = Convert.ToDateTime(db.RemoveSpecialChar(Convert.ToDateTime(DOB, cinfo).ToString("dd/MM/yyyy")), cinfo);
                                }
                                logMsg += error;

                            }
                        }


                        if (dt.Columns.Contains("DateOfAdmission"))
                        {
                            string error = "";
                            string DOA = dt.Rows[i]["DateOfAdmission"].ToString();
                            // DOA = Convert.ToDateTime(DOA, cinfo).ToString("dd/MM/yyyy").Replace("-", "/");

                            if (DOA != "")
                            {
                                if (DOA.Length > 10)
                                {
                                    error += "DateOfAdmission length is greater than 10.Format should (dd-mm-yyyy)." + ",";

                                }
                                //DateTime dDOA;
                                //if (DateTime.TryParse(DOA, out dDOA))
                                //{
                                //    string.Format("{0:dd-MM-yyyy}", dDOA);
                                //}

                                string format2 = "dd/MM/yyyy";
                                DateTime dasts2;
                                if (DateTime.TryParseExact(DOA, format2, CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None, out dasts2))
                                {

                                }
                                else
                                {
                                    error += "Invalid DateOfAdmission Format(dd-mm-yyyy)" + ",";
                                }

                                if (error == "")
                                {
                                    DOA = Convert.ToDateTime(DOA, cinfo).ToString("dd/MM/yyyy").Replace("-", "/");
                                    DateOfAdmission = Convert.ToDateTime(db.RemoveSpecialChar(Convert.ToDateTime(DOA, cinfo).ToString("dd/MM/yyyy")), cinfo);
                                }
                                logMsg += error;

                            }
                        }


                        if (dt.Columns.Contains("DateOfJoin"))
                        {
                            string error = "";
                            string DOJ = dt.Rows[i]["DateOfJoin"].ToString();
                            //  DOJ = Convert.ToDateTime(DOJ, cinfo).ToString("dd/MM/yyyy").Replace("-", "/");

                            if (DOJ != "")
                            {
                                if (DOJ.Length > 10)
                                {
                                    error += "DateOfJoin length is greater than 10.Format should (dd-mm-yyyy)." + ",";
                                }
                                //DateTime dDOJ;
                                //if (DateTime.TryParse(DOJ, out dDOJ))
                                //{
                                //    string.Format("{0:d-MM-yyyy}", dDOJ);
                                //}
                                string format3 = "dd/MM/yyyy";
                                DateTime dasts3;
                                if (DateTime.TryParseExact(DOJ, format3, CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None, out dasts3))
                                {

                                }
                                else
                                {
                                    error += "Invalid DateOfJoin Format(dd-mm-yyyy)" + ",";
                                }
                                if (error == "")
                                {
                                    DOJ = Convert.ToDateTime(DOJ, cinfo).ToString("dd/MM/yyyy").Replace("-", "/");
                                    DateOfJoin = Convert.ToDateTime(db.RemoveSpecialChar(Convert.ToDateTime(DOJ, cinfo).ToString("dd/MM/yyyy")), cinfo);
                                }
                                logMsg += error;

                            }
                        }
                        if (dt.Columns.Contains("Category"))
                        {
                            string error = "";
                            string cat = dt.Rows[i]["Category"].ToString();
                            if (cat != "")
                            {
                                if (cat.Length > 50)
                                {
                                    error += "Category length is greater than 50." + ",";
                                }
                                if (error == "")
                                {
                                    cat = db.RemoveSpecialChar(cat);
                                    if (db.MTCategoryMasters.Where(model => model.CategoryName == cat).Count() == 0)
                                    {
                                        db.MasterCreation(cat, "Category");
                                    }
                                    Category = db.MTCategoryMasters.Where(model => model.CategoryName == cat).Max(m => m.AutoID);
                                }
                                logMsg += error;

                            }
                        }


                        if (dt.Columns.Contains("Religion"))
                        {
                            string error = "";
                            string Rel = dt.Rows[i]["Religion"].ToString();
                            if (Rel != "")
                            {
                                if (Rel.Length > 50)
                                {
                                    error += "Religion length is greater than 50." + ",";
                                }


                                if (error == "")
                                {
                                    Rel = db.RemoveSpecialChar(Rel);
                                    if (db.MTReligionMasters.Where(model => model.ReligionName == Rel).Count() == 0)
                                    {
                                        db.MasterCreation(Rel, "Religion");
                                    }
                                    Religion = db.MTReligionMasters.Where(model => model.ReligionName == Rel).Max(m => m.AutoID);
                                }
                                logMsg += error;
                            }
                        }

                        if (dt.Columns.Contains("House"))
                        {
                            string error = "";
                            string HO = dt.Rows[i]["House"].ToString();
                            if (HO != "")
                            {
                                if (HO.Length > 50)
                                {
                                    error += "House length is greater than 50." + ",";
                                }

                                if (error == "")
                                {
                                    HO = db.RemoveSpecialChar(HO);
                                    if (db.MThousemasters.Where(model => model.HouseName == HO).Count() == 0)
                                    {
                                        db.MasterCreation(HO, "House");
                                    }
                                    House = db.MThousemasters.Where(model => model.HouseName == HO).Max(m => m.AutoID);
                                }
                                logMsg += error;
                            }
                        }

                        if (dt.Columns.Contains("BoardingCategory"))
                        {
                            string error = "";
                            string BOC = dt.Rows[i]["BoardingCategory"].ToString();
                            if (BOC != "")
                            {
                                if (BOC.Length > 50)
                                {
                                    error += "BoardingCategory length is greater than 50." + ",";
                                }

                                if (error == "")
                                {
                                    BOC = db.RemoveSpecialChar(BOC);
                                    if (db.MTBoardingCategoryMasters.Where(model => model.BoardingCategoryName == BOC).Count() == 0)
                                    {
                                        db.MasterCreation(BOC, "BoardingCategory");
                                    }
                                    BoardingCategory = db.MTBoardingCategoryMasters.Where(model => model.BoardingCategoryName == BOC).Max(m => m.AutoID);
                                }
                                logMsg += error;
                            }
                        }


                        if (dt.Columns.Contains("EmergencyPhoneNo"))
                        {
                            string error = "";
                            string EPhone = dt.Rows[i]["EmergencyPhoneNo"].ToString();


                            if (EPhone != "")
                            {
                                if (EPhone.Length > 10)
                                {

                                    error += "EmergencyPhoneNo length is greater than 10." + ",";
                                }

                                bool chkvalue = true;
                                foreach (char c in EPhone)
                                {
                                    if (!char.IsNumber(c))
                                    {
                                        chkvalue = false;
                                        break;
                                    }
                                }

                                if (chkvalue == false)
                                {

                                    error += "EmergencyPhoneNo should be Number" + " ,";
                                }

                                if (error == "")
                                {
                                    EmergencyPhoneNo = db.RemoveSpecialChar(EPhone);
                                }
                                logMsg += error;

                            }
                        }

                        if (dt.Columns.Contains("EmailID"))
                        {
                            string error = "";
                            string SEmail = dt.Rows[i]["EmailID"].ToString();
                            if (SEmail != "")
                            {
                                if (SEmail.Length > 150)
                                {
                                    error += "Student EmailID length is greater than 50." + ",";
                                }

                                var Semailcheck = IsValidEmail(SEmail);
                                if (Semailcheck == false)
                                {
                                    error += "Student EmailID (" + SEmail + ") not in Correct Format" + ",";
                                }

                                if (error == "")
                                {
                                    EmailID = db.RemoveSpecialChar(SEmail);
                                }
                                logMsg += error;
                            }
                        }


                        if (dt.Columns.Contains("BloodGroup"))
                        {
                            string error = "";
                            string SBG = dt.Rows[i]["BloodGroup"].ToString();
                            if (SBG != "")
                            {
                                if (SBG.Length > 50)
                                {
                                    error += "BloodGroup length is greater than 50." + ",";
                                }

                                if (error == "")
                                {
                                    SBG = db.RemoveSpecialChar(SBG);
                                    if (db.MTBloodGroupMasters.Where(model => model.BloodGroupName == SBG).Count() == 0)
                                    {
                                        db.MasterCreation(SBG, "BloodGroup");
                                    }
                                    BloodGroup = db.MTBloodGroupMasters.Where(model => model.BloodGroupName == SBG).Max(m => m.AutoID);
                                }
                                logMsg += error;
                            }
                        }

                        if (dt.Columns.Contains("Nationality"))
                        {
                            string error = "";
                            string SNat = dt.Rows[i]["Nationality"].ToString();
                            if (SNat != "")
                            {
                                if (SNat.Length > 50)
                                {
                                    error += "Nationality length is greater than 50." + ",";
                                }


                                if (error == "")
                                {
                                    SNat = db.RemoveSpecialChar(SNat);
                                    if (db.MTNationalityMasters.Where(model => model.NationalityName == SNat).Count() == 0)
                                    {
                                        db.MasterCreation(SNat, "Nationality");
                                    }
                                    Nationality = db.MTNationalityMasters.Where(model => model.NationalityName == SNat).Max(m => m.AutoID);
                                }
                                logMsg += error;
                            }
                        }

                        if (dt.Columns.Contains("MotherTongue"))
                        {
                            string error = "";
                            string SmotherT = dt.Rows[i]["MotherTongue"].ToString();
                            if (SmotherT != "")
                            {
                                if (SmotherT.Length > 50)
                                {
                                    error += "MotherTongue length is greater than 50." + ",";
                                }
                                SmotherT = db.RemoveSpecialChar(SmotherT);
                                if (db.MTMotherTongueMasters.Where(model => model.MName == SmotherT).Count() == 0)
                                {
                                    db.MasterCreation(SmotherT, "MotherTongue");
                                }

                                if (error == "")
                                {
                                    MotherTongue = db.MTMotherTongueMasters.Where(model => model.MName == SmotherT).Max(m => m.AutoID);
                                }
                                logMsg += error;
                            }
                        }

                        if (dt.Columns.Contains("RollNo"))
                        {
                            string error = "";
                            string RNo = dt.Rows[i]["RollNo"].ToString();

                            if (RNo != "")
                            {
                                if (RNo.Length > 50)
                                {

                                    error += "RollNo length is greater than 50." + ",";
                                }

                                bool chkvalueRollNo = true;
                                foreach (char c in RNo)
                                {
                                    if (!char.IsNumber(c))
                                    {
                                        chkvalueRollNo = false;
                                        break;
                                    }
                                }
                                if (chkvalueRollNo == false)
                                {
                                    error += "RollNo should be Number" + " ,";
                                }

                                if (error == "")
                                {
                                    RollNo = Convert.ToInt32(db.RemoveSpecialChar(RNo));
                                }
                                logMsg += error;
                            }
                        }
                        if (dt.Columns.Contains("BoardRollNo"))
                        {
                            string error = "";
                            string BNo = dt.Rows[i]["BoardRollNo"].ToString();
                            if (BNo != "")
                            {
                                if (BNo.Length > 50)
                                {

                                    error += "BoardRollNo length is greater than 50." + ",";
                                }


                                if (error == "")
                                {
                                    BoardRollNo = db.RemoveSpecialChar(BNo);
                                }
                                logMsg += error;
                            }
                        }
                        if (dt.Columns.Contains("Caste"))
                        {
                            string error = "";
                            string cst = dt.Rows[i]["Caste"].ToString();
                            if (cst != "")
                            {
                                if (cst.Length > 50)
                                {

                                    error += "Caste length is greater than 50." + ",";
                                }

                                if (error == "")
                                {
                                    Caste = db.RemoveSpecialChar(cst);
                                }
                                logMsg += error;
                            }
                        }

                        if (dt.Columns.Contains("Gender"))
                        {
                            string error = "";
                            string gen = dt.Rows[i]["Gender"].ToString();
                            if (gen != "")
                            {
                                if (gen.Length > 50)
                                {
                                    error += "Gender length is greater than 50." + ",";
                                }
                                gen = db.RemoveSpecialChar(gen);

                                if (gen == "M")
                                {
                                    gen = "MALE";
                                }
                                if (gen == "F")
                                {
                                    gen = "FEMALE";
                                }
                                if (gen == "T")
                                {
                                    gen = "TRANSGENDER";
                                }
                                if (gen == "B")
                                {
                                    gen = "MALE";
                                }
                                if (gen == "G")
                                {
                                    gen = "FEMALE";
                                }
                                if (gen != "M" && gen != "F" && gen != "T" && gen != "B" && gen != "G" && gen != "MALE" && gen != "FEMALE")
                                {
                                    error += "Gender Should be like M,F,T,B,G,MALE OR FEMALE." + ",";
                                }

                                if (error == "")
                                {
                                    if (db.MTGenderMasters.Where(model => model.GenderNames == gen).Count() == 0)
                                    {
                                        db.MasterCreation(gen, "Gender");
                                    }
                                    Gender = db.MTGenderMasters.Where(model => model.GenderNames == gen).Max(m => m.AutoID);
                                }
                                logMsg += error;
                            }
                        }

                        if (dt.Columns.Contains("AadhaarCard"))
                        {
                            string error = "";
                            string acrd = dt.Rows[i]["AadhaarCard"].ToString();
                            if (acrd != "")
                            {
                                if (acrd.Length > 12)
                                {
                                    error += "AadhaarCard length is greater than 12." + ",";
                                }
                                if (acrd.Length < 12)
                                {
                                    error += "AadhaarCard length is less than 12." + ",";
                                }

                                bool chkAadhar = true;
                                foreach (char c in acrd)
                                {
                                    if (!char.IsNumber(c))
                                    {
                                        chkAadhar = false;
                                        break;
                                    }
                                }
                                if (chkAadhar == false)
                                {
                                    error += "AadhaarCard should be Number" + " ,";
                                }
                                if (error == "")
                                {
                                    AadhaarCard = db.RemoveSpecialChar(acrd);
                                }
                                logMsg += error;
                            }
                        }

                        if (dt.Columns.Contains("SRNo"))
                        {
                            string error = "";
                            string SRN = dt.Rows[i]["SRNo"].ToString();
                            if (SRN != "")
                            {
                                if (SRN.Length > 50)
                                {
                                    error += "SRN No length is greater than 50." + ",";
                                }

                                if (error == "")
                                {
                                    SRNo = db.RemoveSpecialChar(SRN);
                                }
                                logMsg += error;
                            }
                        }
                        if (dt.Columns.Contains("PENNo"))
                        {
                            string error = "";
                            string PEN = dt.Rows[i]["PENNo"].ToString();
                            if (PEN != "")
                            {
                                if (PEN.Length > 50)
                                {
                                    error += "PEN length is greater than 50." + ",";
                                }

                                if (error == "")
                                {
                                    PENNo = db.RemoveSpecialChar(PEN);
                                }
                                logMsg += error;
                            }
                        }


                        if (dt.Columns.Contains("SchoolBus"))
                        {
                            string error = "";
                            string SBS = dt.Rows[i]["SchoolBus"].ToString();
                            if (SBS != "")
                            {
                                if (SBS.Length > 3)
                                {
                                    error += "SchoolBus length is greater than 3." + ",";
                                }
                                if (SBS.Contains("YES"))
                                {
                                    SchoolBus = "Y";
                                }
                                else if (SBS.Contains("NO"))
                                {
                                    SchoolBus = "N";
                                }
                                else
                                {
                                    error += "School Bus field Should be YES/NO" + ",";
                                }
                            }
                            logMsg += error;
                        }
                        if (dt.Columns.Contains("PresentAddress"))
                        {
                            string error = "";
                            string PAd = dt.Rows[i]["PresentAddress"].ToString();
                            if (PAd != "")
                            {
                                if (PAd.Length > 300)
                                {
                                    error += "Present Address length is greater than 300." + ",";
                                }

                                if (error == "")
                                {
                                    PresentAddress = db.RemoveSpecialChar(PAd);
                                }
                                logMsg += error;
                            }
                        }
                        //-----Father Deatils
                        if (dt.Columns.Contains("FatherName"))
                        {
                            string error = "";
                            if (dt.Rows[i]["FatherName"].ToString() != "")
                            {
                                if (dt.Rows[i]["FatherName"].ToString().Length > 100)
                                {
                                    error += "FatherName length is greater than 100." + ",";
                                }

                                if (error == "")
                                {
                                    FatherName = db.RemoveSpecialChar(dt.Rows[i]["FatherName"].ToString());
                                }
                                logMsg += error;
                            }
                        }
                        if (dt.Columns.Contains("FatherQualification"))
                        {
                            string error = "";
                            string Fqual = dt.Rows[i]["FatherQualification"].ToString();
                            var QlList = Fqual.Split(',');
                            for (int k = 0; k < QlList.Length; k++)
                            {
                                if (QlList[k] != "")
                                {
                                    if (QlList[k].Length > 50)
                                    {
                                        error += "Father Qualification length is greater than 50." + ",";
                                    }

                                    if (error == "")
                                    {
                                        Fqual = db.RemoveSpecialChar(QlList[k]);
                                        if (db.MTPQualificationMasters.Where(model => model.PQlifiName == Fqual).Count() == 0)
                                        {
                                            db.MasterCreation(Fqual, "Qualification");
                                        }
                                        FatherQualification += db.MTPQualificationMasters.Where(model => model.PQlifiName == Fqual).Max(m => m.AutoID).ToString() + ",";
                                    }
                                    logMsg += error;
                                }
                            }

                        }
                        if (dt.Columns.Contains("FatherOccupation"))
                        {
                            string error = "";
                            string FOC = dt.Rows[i]["FatherOccupation"].ToString();
                            if (FOC != "")
                            {
                                if (FOC.Length > 50)
                                {
                                    error += "FatherOccupation length is greater than 50." + ",";
                                }

                                if (error == "")
                                {
                                    FOC = db.RemoveSpecialChar(FOC);
                                    if (db.MTPOccupationMasters.Where(model => model.POccupName == FOC).Count() == 0)
                                    {
                                        db.MasterCreation(FOC, "Occupation");
                                    }
                                    FatherOccupation = db.MTPOccupationMasters.Where(model => model.POccupName == FOC).Max(m => m.AutoID);
                                }
                                logMsg += error;
                            }
                        }
                        if (dt.Columns.Contains("FatherDesignation"))
                        {
                            string error = "";
                            string FDes = dt.Rows[i]["FatherDesignation"].ToString();
                            if (FDes != "")
                            {
                                if (FDes.Length > 50)
                                {
                                    error += "FatherDesignation length is greater than 50." + ",";
                                }

                                if (error == "")
                                {
                                    FDes = db.RemoveSpecialChar(FDes);
                                    if (db.MTPDesignationMasters.Where(model => model.PDesgName == FDes).Count() == 0)
                                    {
                                        db.MasterCreation(FDes, "Designation");
                                    }
                                    FatherDesignation = db.MTPDesignationMasters.Where(model => model.PDesgName == FDes).Max(m => m.AutoID);
                                }
                                logMsg += error;
                            }
                        }

                        if (dt.Columns.Contains("FatherAnnualIncome"))
                        {
                            string error = "";
                            string Fincom = dt.Rows[i]["FatherAnnualIncome"].ToString();

                            float Fn;
                            var chkvaluesFincom = float.TryParse(Fincom, out Fn);
                            if (Fincom != "")
                            {
                                if (Fincom.Length > 8)
                                {
                                    error += "FatherAnnualIncome length is greater than 8." + ",";
                                }

                                if (chkvaluesFincom == false)
                                {

                                    error += "FatherAnnualIncome should be Number or Decimal value" + " ,";
                                }


                                if (error == "")
                                {
                                    FatherAnnualIncome = Convert.ToDouble(db.RemoveSpecialChar(Fincom));
                                }
                                logMsg += error;

                            }
                        }
                        if (dt.Columns.Contains("FatherOrganizationAddress"))
                        {
                            string error = "";
                            if (dt.Rows[i]["FatherOrganizationAddress"].ToString() != "")
                            {
                                if (dt.Rows[i]["FatherOrganizationAddress"].ToString().Length > 300)
                                {
                                    error += "FatherOrganizationAddress length is greater than 300." + ",";
                                }

                                if (error == "")
                                {
                                    FatherOrganizationAddress = db.RemoveSpecialChar(dt.Rows[i]["FatherOrganizationAddress"].ToString());
                                }
                                logMsg += error;
                            }
                        }
                        if (dt.Columns.Contains("FatherOrganizationName"))
                        {
                            string error = "";
                            if (dt.Rows[i]["FatherOrganizationName"].ToString() != "")
                            {
                                if (dt.Rows[i]["FatherOrganizationName"].ToString().Length > 120)
                                {
                                    error += "FatherOrganizationName length is greater than 120." + ",";
                                }

                                if (error == "")
                                {
                                    FatherOrganizationName = db.RemoveSpecialChar(dt.Rows[i]["FatherOrganizationName"].ToString());
                                }
                                logMsg += error;
                            }
                        }

                        if (dt.Columns.Contains("FatherEmailID"))
                        {
                            string error = "";
                            if (dt.Rows[i]["FatherEmailID"].ToString() != "")
                            {
                                if (dt.Rows[i]["FatherEmailID"].ToString().Length > 60)
                                {
                                    error += "FatherEmailID length is greater than 60." + ",";
                                }

                                var Femailcheck = IsValidEmail(dt.Rows[i]["FatherEmailID"].ToString());
                                if (Femailcheck == false)
                                {
                                    error += "Father EmailID (" + dt.Rows[i]["FatherEmailID"].ToString() + ") not in Correct Format" + ",";
                                }
                                if (error == "")
                                {
                                    FatherEmailID = db.RemoveSpecialChar(dt.Rows[i]["FatherEmailID"].ToString());

                                }
                                logMsg += error;
                            }
                        }
                        if (dt.Columns.Contains("FatherMobileNo"))
                        {
                            string error = "";

                            string Fmob = dt.Rows[i]["FatherMobileNo"].ToString();
                            if (Fmob != "")
                            {
                                if (Fmob.Length > 10)
                                {
                                    error += "FatherMobileNo length is greater than 10." + ",";
                                }
                                bool chkvaluesFnFmob = true;
                                foreach (char c in Fmob)
                                {
                                    if (!char.IsNumber(c))
                                    {
                                        chkvaluesFnFmob = false;
                                        break;
                                    }
                                }

                                if (chkvaluesFnFmob == false)
                                {
                                    error += "FatherMobileNo should be Number" + " ,";
                                }


                                if (error == "")
                                {
                                    FatherMobileNo = db.RemoveSpecialChar(Fmob);
                                }
                                logMsg += error;
                            }
                        }
                        //===Mother Details

                        if (dt.Columns.Contains("MotherName"))
                        {
                            string error = "";
                            if (dt.Rows[i]["MotherName"].ToString() != "")
                            {
                                if (dt.Rows[i]["MotherName"].ToString().Length > 100)
                                {
                                    error += "MotherName length is greater than 100." + ",";
                                }

                                if (error == "")
                                {
                                    MotherName = db.RemoveSpecialChar(dt.Rows[i]["MotherName"].ToString());
                                }
                                logMsg += error;
                            }
                        }
                        if (dt.Columns.Contains("MotherQualification"))
                        {
                            string error = "";
                            string Mqual = dt.Rows[i]["MotherQualification"].ToString();

                            var QMlList = Mqual.Split(',');
                            for (int k = 0; k < QMlList.Length; k++)
                            {
                                if (QMlList[k] != "")
                                {
                                    if (QMlList[k].Length > 50)
                                    {
                                        error += "Mother Qualification length is greater than 50." + ",";
                                    }

                                    if (error == "")
                                    {
                                        Mqual = db.RemoveSpecialChar(QMlList[k]);
                                        if (db.MTPQualificationMasters.Where(model => model.PQlifiName == Mqual).Count() == 0)
                                        {
                                            db.MasterCreation(Mqual, "Qualification");
                                        }
                                        MotherQualification += db.MTPQualificationMasters.Where(model => model.PQlifiName == Mqual).Max(m => m.AutoID).ToString() + ",";
                                    }
                                    logMsg += error;
                                }
                            }
                            //if (Mqual != "")
                            //{
                            //    if (Mqual.Length > 50)
                            //    {
                            //        error += "MotherQualification length is greater than 50." + ",";
                            //    }


                            //    if (error == "")
                            //    {
                            //        Mqual = db.RemoveSpecialChar(Mqual);
                            //        if (db.MTPQualificationMasters.Where(model => model.PQlifiName == Mqual).Count() == 0)
                            //        {
                            //            db.MasterCreation(Mqual, "Qualification");
                            //        }
                            //        MotherQualification = db.MTPQualificationMasters.Where(model => model.PQlifiName == Mqual).Max(m => m.AutoID).ToString();
                            //    }
                            //    logMsg += error;
                            //}
                        }
                        if (dt.Columns.Contains("MotherOccupation"))
                        {
                            string error = "";
                            string MOC = dt.Rows[i]["MotherOccupation"].ToString();
                            if (MOC != "")
                            {
                                if (MOC.Length > 50)
                                {
                                    error += "MotherOccupation length is greater than 50." + ",";
                                }


                                if (error == "")
                                {
                                    MOC = db.RemoveSpecialChar(MOC);
                                    if (db.MTPOccupationMasters.Where(model => model.POccupName == MOC).Count() == 0)
                                    {
                                        db.MasterCreation(MOC, "Occupation");
                                    }
                                    MotherOccupation = db.MTPOccupationMasters.Where(model => model.POccupName == MOC).Max(m => m.AutoID);
                                }
                                logMsg += error;
                            }
                        }
                        if (dt.Columns.Contains("MotherDesignation"))
                        {
                            string error = "";
                            string MDes = dt.Rows[i]["MotherDesignation"].ToString();
                            if (MDes != "")
                            {
                                if (MDes.Length > 50)
                                {
                                    error += "MotherDesignation length is greater than 50." + ",";
                                }


                                if (error == "")
                                {
                                    MDes = db.RemoveSpecialChar(MDes);
                                    if (db.MTPDesignationMasters.Where(model => model.PDesgName == MDes).Count() == 0)
                                    {
                                        db.MasterCreation(MDes, "Designation");
                                    }
                                    MotherDesignation = db.MTPDesignationMasters.Where(model => model.PDesgName == MDes).Max(m => m.AutoID);
                                }
                                logMsg += error;
                            }
                        }

                        if (dt.Columns.Contains("MotherAnnualIncome"))
                        {
                            string error = "";
                            string Mincom = dt.Rows[i]["MotherAnnualIncome"].ToString();

                            float Mn;
                            var chkvaluesMincom = float.TryParse(Mincom, out Mn);
                            if (Mincom != "")
                            {
                                if (Mincom.Length > 8)
                                {
                                    error += "MotherAnnualIncome length is greater than 8." + ",";
                                }

                                if (chkvaluesMincom == false)
                                {
                                    error += "MotherAnnualIncome should be Number or Decimal value" + " ,";
                                }

                                if (error == "")
                                {
                                    MotherAnnualIncome = Convert.ToDouble(db.RemoveSpecialChar(Mincom));
                                }
                                logMsg += error;

                            }
                        }
                        if (dt.Columns.Contains("MotherOrganizationAddress"))
                        {
                            string error = "";
                            if (dt.Rows[i]["MotherOrganizationAddress"].ToString() != "")
                            {
                                if (dt.Rows[i]["MotherOrganizationAddress"].ToString().Length > 300)
                                {
                                    error += "MotherOrganizationAddress length is greater than 300." + ",";
                                }

                                if (error == "")
                                {
                                    MotherOrganizationAddress = db.RemoveSpecialChar(dt.Rows[i]["MotherOrganizationAddress"].ToString());
                                }
                                logMsg += error;
                            }
                        }
                        if (dt.Columns.Contains("MotherOrganizationName"))
                        {
                            string error = "";
                            if (dt.Rows[i]["MotherOrganizationName"].ToString() != "")
                            {
                                if (dt.Rows[i]["MotherOrganizationName"].ToString().Length > 120)
                                {
                                    error += "MotherOrganizationName length is greater than 120." + ",";
                                }

                                if (error == "")
                                {
                                    MotherOrganizationName = db.RemoveSpecialChar(dt.Rows[i]["MotherOrganizationName"].ToString());
                                }
                                logMsg += error;
                            }
                        }

                        if (dt.Columns.Contains("MotherEmailID"))
                        {
                            string error = "";
                            if (dt.Rows[i]["MotherEmailID"].ToString() != "")
                            {
                                if (dt.Rows[i]["MotherEmailID"].ToString().Length > 60)
                                {
                                    error += "MotherEmailID length is greater than 60." + ",";
                                }

                                var Memailcheck = IsValidEmail(dt.Rows[i]["MotherEmailID"].ToString());
                                if (Memailcheck == false)
                                {
                                    error += "Mother EmailID (" + dt.Rows[i]["MotherEmailID"].ToString() + ") not in Correct Format" + ",";
                                }
                                if (error == "")
                                {
                                    MotherEmailID = db.RemoveSpecialChar(dt.Rows[i]["MotherEmailID"].ToString());
                                }
                                logMsg += error;
                            }
                        }
                        if (dt.Columns.Contains("MotherMobileNo"))
                        {
                            string error = "";
                            string Mmob = dt.Rows[i]["MotherMobileNo"].ToString();


                            if (Mmob != "")
                            {
                                if (Mmob.Length > 10)
                                {
                                    error += "MotherMobileNo length is greater than 10." + ",";
                                }

                                bool chkvaluesMnFmob = true;
                                foreach (char c in Mmob)
                                {
                                    if (!char.IsNumber(c))
                                    {
                                        chkvaluesMnFmob = false;
                                        break;
                                    }
                                }

                                if (chkvaluesMnFmob == false)
                                {
                                    error += "MotherMobileNo should be Number" + " ,";
                                }

                                if (error == "")
                                {
                                    MotherMobileNo = db.RemoveSpecialChar(Mmob);
                                }
                                logMsg += error;
                            }
                        }
                        //-====Guardian Details
                        if (dt.Columns.Contains("GuardianName"))
                        {
                            string error = "";
                            if (dt.Rows[i]["GuardianName"].ToString() != "")
                            {
                                if (dt.Rows[i]["GuardianName"].ToString().Length > 100)
                                {
                                    error += "GuardianName length is greater than 100." + ",";
                                }

                                if (error == "")
                                {
                                    GuardianName = db.RemoveSpecialChar(dt.Rows[i]["GuardianName"].ToString());
                                }
                                logMsg += error;
                            }
                        }
                        if (dt.Columns.Contains("GuardianRelation"))
                        {
                            string error = "";
                            if (dt.Rows[i]["GuardianRelation"].ToString() != "")
                            {
                                if (dt.Rows[i]["GuardianRelation"].ToString().Length > 50)
                                {
                                    error += "GuardianRelation length is greater than 50." + ",";
                                }

                                if (error == "")
                                {
                                    GuardianRelation = db.RemoveSpecialChar(dt.Rows[i]["GuardianRelation"].ToString());
                                }
                                logMsg += error;
                            }
                        }
                        if (dt.Columns.Contains("GuardianMobile"))
                        {
                            string error = "";
                            string Gmob = dt.Rows[i]["GuardianMobile"].ToString();


                            if (Gmob != "")
                            {
                                if (Gmob.Length > 10)
                                {
                                    error += "GuardianMobile length is greater than 10." + ",";
                                }


                                bool chkvaluesGnFmob = true;
                                foreach (char c in Gmob)
                                {
                                    if (!char.IsNumber(c))
                                    {
                                        chkvaluesGnFmob = false;
                                        break;
                                    }
                                }
                                if (chkvaluesGnFmob == false)
                                {
                                    error += "GuardianMobile should be Number" + " ,";
                                }

                                if (error == "")
                                {
                                    GuardianMobile = db.RemoveSpecialChar(Gmob);
                                }
                                logMsg += error;
                            }
                        }
                        if (dt.Columns.Contains("GuardianEmailID"))
                        {
                            string error = "";
                            if (dt.Rows[i]["GuardianEmailID"].ToString() != "")
                            {
                                if (dt.Rows[i]["GuardianEmailID"].ToString().Length > 80)
                                {
                                    error += "GuardianEmailID length is greater than 80." + ",";
                                }
                                var Gemailcheck = IsValidEmail(dt.Rows[i]["GuardianEmailID"].ToString());
                                if (Gemailcheck == false)
                                {
                                    error += "Guardian EmailID (" + dt.Rows[i]["GuardianEmailID"].ToString() + ") not in Correct Format" + ",";
                                }
                                if (error == "")
                                {
                                    GuardianEmailID = db.RemoveSpecialChar(dt.Rows[i]["GuardianEmailID"].ToString());
                                }
                                logMsg += error;
                            }
                        }
                        if (dt.Columns.Contains("GuardianAddress"))
                        {
                            string error = "";
                            if (dt.Rows[i]["GuardianAddress"].ToString() != "")
                            {
                                if (dt.Rows[i]["GuardianAddress"].ToString().Length > 300)
                                {
                                    error += "GuardianAddress length is greater than 300." + ",";
                                }

                                if (error == "")
                                {
                                    GuardianAddress = db.RemoveSpecialChar(dt.Rows[i]["GuardianAddress"].ToString());
                                }
                                logMsg += error;
                            }
                        }
                        //============Additional====
                        if (dt.Columns.Contains("SecondLanguage"))
                        {
                            string error = "";
                            string Slang = dt.Rows[i]["SecondLanguage"].ToString();
                            if (Slang != "")
                            {
                                if (Slang.Length > 50)
                                {
                                    error += "SecondLanguage length is greater than 50." + ",";
                                }

                                if (error == "")
                                {
                                    Slang = db.RemoveSpecialChar(Slang);
                                    if (db.MTMotherTongueMasters.Where(model => model.MName == Slang).Count() == 0)
                                    {
                                        db.MasterCreation(Slang, "MotherTongue");
                                    }
                                    SecondLanguage = db.MTMotherTongueMasters.Where(model => model.MName == Slang).Max(m => m.AutoID);
                                }
                                logMsg += error;
                            }
                        }
                        if (dt.Columns.Contains("ThridLanguage"))
                        {
                            string error = "";
                            string Tlang = dt.Rows[i]["ThridLanguage"].ToString();
                            if (Tlang != "")
                            {
                                if (Tlang.Length > 50)
                                {
                                    error += "SecondLanguage length is greater than 50." + ",";
                                }


                                if (error == "")
                                {
                                    Tlang = db.RemoveSpecialChar(Tlang);
                                    if (db.MTMotherTongueMasters.Where(model => model.MName == Tlang).Count() == 0)
                                    {
                                        db.MasterCreation(Tlang, "MotherTongue");
                                    }
                                    ThridLanguage = db.MTMotherTongueMasters.Where(model => model.MName == Tlang).Max(m => m.AutoID);
                                }
                                logMsg += error;
                            }
                        }
                        if (dt.Columns.Contains("PlaceofBirth"))
                        {
                            string error = "";
                            if (dt.Rows[i]["PlaceofBirth"].ToString() != "")
                            {
                                if (dt.Rows[i]["PlaceofBirth"].ToString().Length > 100)
                                {
                                    error += "PlaceofBirth length is greater than 100." + ",";
                                }

                                if (error == "")
                                {
                                    PlaceofBirth = db.RemoveSpecialChar(dt.Rows[i]["PlaceofBirth"].ToString());
                                }
                                logMsg += error;
                            }
                        }
                        if (dt.Columns.Contains("CertificateNo"))
                        {
                            string error = "";
                            if (dt.Rows[i]["CertificateNo"].ToString() != "")
                            {
                                if (dt.Rows[i]["CertificateNo"].ToString().Length > 50)
                                {
                                    error += "CertificateNo length is greater than 50." + ",";
                                }

                                if (error == "")
                                {
                                    CertificateNo = db.RemoveSpecialChar(dt.Rows[i]["CertificateNo"].ToString());
                                }
                                logMsg += error;
                            }
                        }

                        if (dt.Columns.Contains("CertificateDate"))
                        {
                            string error = "";
                            string CD = dt.Rows[i]["CertificateDate"].ToString();
                            if (CD != "")
                            {
                                if (CD.Length > 10)
                                {
                                    error += "CertificateDate length is greater than 10.Format should (dd-mm-yyyy)." + ",";
                                }
                                DateTime CDdasts;
                                if (DateTime.TryParse(CD, out CDdasts))
                                {
                                    string.Format("{0:d-MM-yyyy}", CDdasts);
                                }
                                else
                                {
                                    error += "Invalid CertificateDate Format(dd-mm-yyyy)" + ",";
                                }


                                if (error == "")
                                {
                                    CertificateDate = Convert.ToDateTime(db.RemoveSpecialChar(CD));
                                }
                                logMsg += error;
                            }
                        }


                        if (dt.Columns.Contains("CertificateCropNo"))
                        {
                            string error = "";
                            if (dt.Rows[i]["CertificateCropNo"].ToString() != "")
                            {
                                if (dt.Rows[i]["CertificateCropNo"].ToString().Length > 50)
                                {
                                    error += "CertificateCropNo length is greater than 50." + ",";
                                }

                                if (error == "")
                                {
                                    CertificateCropNo = db.RemoveSpecialChar(dt.Rows[i]["CertificateCropNo"].ToString());
                                }
                                logMsg += error;
                            }
                        }

                        if (dt.Columns.Contains("SchoolName"))
                        {
                            string error = "";
                            if (dt.Rows[i]["SchoolName"].ToString() != "")
                            {
                                if (dt.Rows[i]["SchoolName"].ToString().Length > 150)
                                {
                                    error += "SchoolName length is greater than 150." + ",";
                                }

                                if (error == "")
                                {
                                    SchoolName = db.RemoveSpecialChar(dt.Rows[i]["SchoolName"].ToString());
                                }
                                logMsg += error;
                            }
                        }

                        if (dt.Columns.Contains("TCNo"))
                        {
                            string error = "";
                            if (dt.Rows[i]["TCNo"].ToString() != "")
                            {
                                if (dt.Rows[i]["TCNo"].ToString().Length > 20)
                                {
                                    error += "TCNo length is greater than 20." + ",";
                                }

                                if (error == "")
                                {
                                    TCNo = db.RemoveSpecialChar(dt.Rows[i]["TCNo"].ToString());
                                }
                                logMsg += error;
                            }
                        }

                        if (dt.Columns.Contains("LeavingReason"))
                        {
                            string error = "";
                            if (dt.Rows[i]["LeavingReason"].ToString() != "")
                            {
                                if (dt.Rows[i]["LeavingReason"].ToString().Length > 50)
                                {
                                    error += "LeavingReason length is greater than 50." + ",";
                                }

                                if (error == "")
                                {
                                    LeavingReason = db.RemoveSpecialChar(dt.Rows[i]["LeavingReason"].ToString());
                                }
                                logMsg += error;
                            }
                        }

                        if (dt.Columns.Contains("Syllabus"))
                        {
                            string error = "";
                            if (dt.Rows[i]["Syllabus"].ToString() != "")
                            {
                                if (dt.Rows[i]["Syllabus"].ToString().Length > 30)
                                {
                                    error += "Syllabus length is greater than 30." + ",";
                                }

                                if (error == "")
                                {
                                    Syllabus = db.RemoveSpecialChar(dt.Rows[i]["Syllabus"].ToString());
                                }
                                logMsg += error;
                            }
                        }

                        if (dt.Columns.Contains("PreviousClass"))
                        {
                            string error = "";
                            if (dt.Rows[i]["PreviousClass"].ToString() != "")
                            {
                                if (dt.Rows[i]["PreviousClass"].ToString().Length > 50)
                                {
                                    error += "PreviousClass length is greater than 50." + ",";
                                }

                                if (error == "")
                                {
                                    PreviousClass = db.RemoveSpecialChar(dt.Rows[i]["PreviousClass"].ToString());
                                }
                                logMsg += error;
                            }
                        }

                        if (dt.Columns.Contains("TCDate"))
                        {
                            string error = "";
                            string TCD = dt.Rows[i]["TCDate"].ToString();
                            if (TCD != "")
                            {
                                if (TCD.Length > 10)
                                {
                                    error += "TCDate length is greater than 10.Format should (dd-mm-yyyy)." + ",";
                                }
                                DateTime TCDdasts;
                                if (DateTime.TryParse(TCD, out TCDdasts))
                                {
                                    string.Format("{0:d-MM-yyyy}", TCDdasts);
                                }
                                else
                                {
                                    error += "Invalid TCDate Format(dd-mm-yyyy)" + ",";
                                }


                                if (error == "")
                                {
                                    TCDate = Convert.ToDateTime(db.RemoveSpecialChar(TCD));
                                }
                                logMsg += error;
                            }
                        }


                        if (dt.Columns.Contains("PreviousSchoolAddress"))
                        {
                            string error = "";
                            if (dt.Rows[i]["PreviousSchoolAddress"].ToString() != "")
                            {
                                if (dt.Rows[i]["PreviousSchoolAddress"].ToString().Length > 300)
                                {
                                    error += "PreviousSchoolAddress length is greater than 300." + ",";
                                }

                                if (error == "")
                                {
                                    PreviousSchoolAddress = db.RemoveSpecialChar(dt.Rows[i]["PreviousSchoolAddress"].ToString());
                                }
                                logMsg += error;
                            }
                        }

                        if (dt.Columns.Contains("CareerGoals"))
                        {
                            string error = "";
                            if (dt.Rows[i]["CareerGoals"].ToString() != "")
                            {
                                if (dt.Rows[i]["CareerGoals"].ToString().Length > 250)
                                {
                                    error += "CareerGoals length is greater than 250." + ",";
                                }

                                if (error == "")
                                {
                                    CareerGoals = db.RemoveSpecialChar(dt.Rows[i]["CareerGoals"].ToString());
                                }
                                logMsg += error;
                            }
                        }

                        if (dt.Columns.Contains("Hobbies"))
                        {
                            string error = "";
                            if (dt.Rows[i]["Hobbies"].ToString() != "")
                            {
                                if (dt.Rows[i]["Hobbies"].ToString().Length > 250)
                                {
                                    error += "Hobbies length is greater than 250." + ",";
                                }

                                if (error == "")
                                {
                                    Hobbies = db.RemoveSpecialChar(dt.Rows[i]["Hobbies"].ToString());
                                }
                                logMsg += error;
                            }
                        }
                        if (dt.Columns.Contains("Achievements"))
                        {
                            string error = "";
                            if (dt.Rows[i]["Achievements"].ToString() != "")
                            {
                                if (dt.Rows[i]["Achievements"].ToString().Length > 250)
                                {
                                    error += "Achievements length is greater than 250." + ",";
                                }

                                if (error == "")
                                {
                                    Achievements = db.RemoveSpecialChar(dt.Rows[i]["Achievements"].ToString());
                                }
                                logMsg += error;
                            }
                        }

                        if (dt.Columns.Contains("PersonalIdentificationMark"))
                        {
                            string error = "";
                            if (dt.Rows[i]["PersonalIdentificationMark"].ToString() != "")
                            {
                                if (dt.Rows[i]["PersonalIdentificationMark"].ToString().Length > 250)
                                {
                                    error += "PersonalIdentificationMark length is greater than 250." + ",";
                                }

                                if (error == "")
                                {
                                    PersonalIdentificationMark = db.RemoveSpecialChar(dt.Rows[i]["PersonalIdentificationMark"].ToString());
                                }
                                logMsg += error;
                            }
                        }



                        /******************************Other Validation Start****************************************************/




                        if (dt.Columns.Contains("AdmissionNo"))
                        {
                            string error = "";
                            string Adm = dt.Rows[i]["AdmissionNo"].ToString();
                            if (Adm != "")
                            {
                                Adm = db.RemoveSpecialChar(Adm);
                                if (db.SIStudentYearWiseDetails.Where(model => model.AdmNo == Adm && model.AcaStarting == SAcaStart && model.SchID == SchoolID).Count() > 0)
                                {

                                    int StudentId = db.SIStudentYearWiseDetails.Where(model => model.AdmNo == Adm && model.AcaStarting == SAcaStart && model.SchID == SchoolID).Max(m => m.StudID);
                                    int YearWiseId = db.SIStudentYearWiseDetails.Where(model => model.AdmNo == Adm && model.AcaStarting == SAcaStart && model.SchID == SchoolID).Max(m => m.YearWiseID);

                                    SIStudentMaster CM = db.SIStudentMasters.Find(StudentId);
                                    SIStudentYearWiseDetail SYD = db.SIStudentYearWiseDetails.Find(YearWiseId);
                                    DateTime DtAttDate;


                                    if (dt.Columns.Contains("DateOfAdmission") && dt.Columns.Contains("DateOfJoin"))
                                    {
                                        if (DateOfAdmission > DateOfJoin)
                                        {
                                            error += "Date of Join should not be smaller than Date of Admission" + ",";
                                            logMsg += error;
                                        }
                                    }

                                    else if (dt.Columns.Contains("DateOfAdmission"))
                                    {
                                        if (DateOfAdmission > CM.DateOfJ)
                                        {
                                            error += "Date of Admission should not be greater than Date of Join" + ",";
                                            logMsg += error;
                                        }
                                    }
                                    else if (dt.Columns.Contains("DateOfJoin"))
                                    {
                                        if (DateOfJoin < CM.DateOfAdm)
                                        {
                                            error += "Date of Join  should not be smaller than Date of Admission" + ",";
                                            logMsg += error;
                                        }

                                    }
                                    else
                                    { }




                                    if (CM.DateOfJ != DateOfJoin)
                                    {
                                        if (db.SIStudentAttEntrys.Where(model => model.ClID == SYD.ClsID && model.SECID == SYD.SECID && model.AttDates == CM.DateOfJ && model.AcaStat == SAcaStart && model.SchID == SchoolID).Count() > 0)
                                        {
                                            error += "Attendance Entry Already Done! So You Cannot Change Date of Join" + ",";
                                            logMsg += error;
                                        }

                                        string strDate = "";
                                        strDate = db.SIStudentAttEntrys.Where(model => model.ClID == SYD.ClsID && model.SECID == SYD.SECID && model.AttDates > DateOfJoin && model.AcaStat == SAcaStart && model.SchID == SchoolID).Min(model => model.AttDates).ToString();
                                        if (strDate != "")
                                        {
                                            DtAttDate = Convert.ToDateTime(strDate);

                                            if (CM.DateOfJ == null)
                                            {
                                                if (db.SIStudentAttEntrys.Where(model => model.ClID == SYD.ClsID && model.SECID == SYD.SECID && model.AttDates >= DateOfJoin && model.AcaStat == SAcaStart && model.SchID == SchoolID).Count() > 0)
                                                {
                                                    error += "Attendance Entry Already Done! So You Cannot Change Date of Join" + ",";
                                                    logMsg += error;
                                                }
                                            }
                                            else
                                            {
                                                if (db.SIStudentAttEntrys.Where(model => model.ClID == SYD.ClsID && model.SECID == SYD.SECID && model.AttDates >= DateOfJoin && model.AttDates <= CM.DateOfJ && model.AcaStat == SAcaStart && model.SchID == SchoolID).Count() > 0)
                                                {
                                                    error += "Attendance Entry Already Done! So You Cannot Change Date of Join" + ",";
                                                    logMsg += error;
                                                }

                                                if (db.SIStudentAttEntrys.Where(model => model.ClID == SYD.ClsID && model.SECID == SYD.SECID && model.AttDates <= DateOfJoin && model.AttDates >= CM.DateOfJ && model.AcaStat == SAcaStart && model.SchID == SchoolID).Count() > 0)
                                                {
                                                    error += "Attendance Entry Already Done! So You Cannot Change Date of Join" + ",";
                                                    logMsg += error;
                                                }
                                            }
                                        }

                                        strDate = db.SIStudentAttEntrys.Where(model => model.ClID == SYD.ClsID && model.SECID == SYD.SECID && model.AttDates < DateOfJoin && model.AcaStat == SAcaStart && model.SchID == SchoolID).Max(model => model.AttDates).ToString();
                                        if (strDate != "")
                                        {
                                            DtAttDate = Convert.ToDateTime(strDate);
                                            if (db.SIStudentAttEntrys.Where(model => model.ClID == SYD.ClsID && model.SECID == SYD.SECID && model.AttDates <= DateOfJoin && model.AttDates >= CM.DateOfJ && model.AcaStat == SAcaStart && model.SchID == SchoolID).Count() > 0)
                                            {
                                                error += "Attendance Entry Already Done! So You Cannot Change Date of Join" + ",";
                                                logMsg += error;
                                            }

                                            if (db.SIStudentAttEntrys.Where(model => model.ClID == SYD.ClsID && model.SECID == SYD.SECID && model.AttDates >= DateOfJoin && model.AttDates <= CM.DateOfJ && model.AcaStat == SAcaStart && model.SchID == SchoolID).Count() > 0)
                                            {
                                                error += "Attendance Entry Already Done! So You Cannot Change Date of Join" + ",";
                                                logMsg += error;
                                            }
                                        }
                                    }
                                }
                            }


                        }





                        /******************************Other Validation End****************************************************/

                        //--------------------------------Condition---End--------------------------------------


                        if (logMsg == "")
                        {

                            int StudentId = db.SIStudentYearWiseDetails.Where(model => model.AdmNo == AdmissionNo && model.AcaStarting == SAcaStart && model.SchID == SchoolID).Max(m => m.StudID);
                            int YearWiseId = db.SIStudentYearWiseDetails.Where(model => model.AdmNo == AdmissionNo && model.AcaStarting == SAcaStart && model.SchID == SchoolID).Max(m => m.YearWiseID);

                            SIStudentMaster CM = db.SIStudentMasters.Find(StudentId);
                            SIStudentYearWiseDetail SYD = db.SIStudentYearWiseDetails.Find(YearWiseId);
                            SIStudentFatherDetail FD = db.SIStudentFatherDetails.Find(StudentId);
                            SIStudentMotherDetail MD = db.SIStudentMotherDetails.Find(StudentId);
                            SIStudentAddressDetail AD = db.SIStudentAddressDetails.Find(StudentId);
                            SIStudentLocalGuardianDetails GD = db.SIStudentLocalGuardian.Find(StudentId);



                            if (dt.Columns.Contains("StudentFirstName"))
                            {
                                if (StudentFirstName != "")
                                {
                                    CM.FName = StudentFirstName;
                                }
                            }
                            if (dt.Columns.Contains("StudentMiddleName"))
                            {
                                if (StudentMiddleName != "")
                                {
                                    CM.MName = StudentMiddleName;
                                }

                            }
                            if (dt.Columns.Contains("StudentLastName"))
                            {
                                if (StudentLastName != "")
                                {
                                    CM.LName = StudentLastName;
                                }

                            }
                            if (dt.Columns.Contains("DateOfBirth"))
                            {
                                if (DateOfBirth != Convert.ToDateTime("01-01-1999"))
                                {
                                    CM.DateBirth = DateOfBirth;
                                }
                            }
                            if (dt.Columns.Contains("DateOfAdmission"))
                            {
                                if (DateOfAdmission != Convert.ToDateTime("01-01-1999"))
                                {
                                    CM.DateOfAdm = DateOfAdmission;
                                }

                            }
                            if (dt.Columns.Contains("DateOfJoin"))
                            {
                                if (DateOfJoin != Convert.ToDateTime("01-01-1999"))
                                {
                                    CM.DateOfJ = DateOfJoin;
                                }

                            }
                            if (dt.Columns.Contains("Category"))
                            {
                                if (Category != 0)
                                {
                                    CM.SocialCategoryID = Category;
                                }

                            }
                            if (dt.Columns.Contains("Religion"))
                            {
                                if (Religion != 0)
                                {
                                    CM.RelID = Religion;
                                }

                            }
                            if (dt.Columns.Contains("House"))
                            {
                                if (House != 0)
                                {
                                    SYD.HousID = House;
                                }

                            }
                            if (dt.Columns.Contains("BoardingCategory"))
                            {
                                if (BoardingCategory != 0)
                                {
                                    SYD.BoardCatID = BoardingCategory;
                                }

                            }
                            if (dt.Columns.Contains("EmergencyPhoneNo"))
                            {
                                if (EmergencyPhoneNo != "")
                                {
                                    CM.EmerghoneNo = EmergencyPhoneNo;
                                }

                            }
                            if (dt.Columns.Contains("EmailID"))
                            {
                                if (EmailID != "")
                                {
                                    CM.StuEmailID = EmailID;
                                }

                            }
                            if (dt.Columns.Contains("BloodGroup"))
                            {
                                if (BloodGroup != 0)
                                {
                                    CM.BloodID = BloodGroup;
                                }

                            }
                            if (dt.Columns.Contains("Nationality"))
                            {
                                if (Nationality != 0)
                                {
                                    CM.NatID = Nationality;
                                }

                            }
                            if (dt.Columns.Contains("MotherTongue"))
                            {
                                if (MotherTongue != 0)
                                {
                                    CM.MoTongueID = MotherTongue;
                                }

                            }
                            if (dt.Columns.Contains("RollNo"))
                            {
                                if (RollNo != 0)
                                {
                                    SYD.ClassRoll = RollNo;
                                }

                            }
                            if (dt.Columns.Contains("BoardRollNo"))
                            {
                                if (BoardRollNo != "")
                                {
                                    CM.CBSERollNos = BoardRollNo;
                                }
                            }
                            if (dt.Columns.Contains("Caste"))
                            {
                                if (Caste != "")
                                {
                                    CM.CasteName = Caste;
                                }
                            }
                            if (dt.Columns.Contains("Gender"))
                            {
                                if (Gender != 0)
                                {
                                    CM.GenderID = Gender;
                                }

                            }
                            if (dt.Columns.Contains("AadhaarCard"))
                            {
                                if (AadhaarCard != "")
                                {
                                    CM.AdharCard = AadhaarCard;
                                }

                            }


                            if (dt.Columns.Contains("SRNo"))
                            {
                                if (SRNo != "")
                                {
                                    CM.SRNo = SRNo;
                                }

                            }

                            if (dt.Columns.Contains("PENNo"))
                            {
                                if (PENNo != "")
                                {
                                    CM.PENNo = PENNo;
                                }
                            }

                            if (dt.Columns.Contains("SchoolBus"))
                            {
                                if (SchoolBus != "")
                                {
                                    CM.SchoolBusID = SchoolBus;
                                }

                            }
                            if (dt.Columns.Contains("PresentAddress"))
                            {
                                if (PresentAddress != "")
                                {
                                    AD.PresFlatNos = PresentAddress;
                                }

                            }

                            if (dt.Columns.Contains("FatherName"))
                            {
                                if (FatherName != "")
                                {
                                    FD.Father = FatherName;
                                }

                            }
                            if (dt.Columns.Contains("FatherQualification"))
                            {
                                if (FatherQualification != "")
                                {
                                    FD.FPQualiID = FatherQualification.TrimEnd(',');
                                }
                            }
                            if (dt.Columns.Contains("FatherOccupation"))
                            {
                                if (FatherOccupation != 0)
                                {
                                    FD.FPOccuID = FatherOccupation;
                                }

                            }
                            if (dt.Columns.Contains("FatherDesignation"))
                            {
                                if (FatherDesignation != 0)
                                {
                                    FD.FPDesigID = FatherDesignation;
                                }

                            }
                            if (dt.Columns.Contains("FatherAnnualIncome"))
                            {
                                if (FatherDesignation != 0)
                                {
                                    FD.FIncome = FatherAnnualIncome;
                                }

                            }
                            if (dt.Columns.Contains("FatherOrganizationName"))
                            {
                                if (FatherOrganizationName != "")
                                {
                                    FD.FOrgName = FatherOrganizationName;
                                }

                            }
                            if (dt.Columns.Contains("FatherOrganizationAddress"))
                            {
                                if (FatherOrganizationAddress != "")
                                {
                                    FD.FOrgAddress = FatherOrganizationAddress;
                                }

                            }
                            if (dt.Columns.Contains("FatherEmailID"))
                            {
                                if (FatherEmailID != "")
                                {
                                    FD.FEmail = FatherEmailID;
                                }

                            }
                            if (dt.Columns.Contains("FatherMobileNo"))
                            {
                                if (FatherMobileNo != "")
                                {
                                    FD.FMobileNo = FatherMobileNo;
                                }

                            }
                            //---Mother
                            if (dt.Columns.Contains("MotherName"))
                            {
                                if (MotherName != "")
                                {
                                    MD.Mother = MotherName;
                                }

                            }
                            if (dt.Columns.Contains("MotherQualification"))
                            {
                                if (MotherQualification != "")
                                {
                                    MD.MPQualiID = MotherQualification.TrimEnd(',');
                                }

                            }
                            if (dt.Columns.Contains("MotherOccupation"))
                            {
                                if (MotherOccupation != 0)
                                {
                                    MD.MPOccuID = MotherOccupation;
                                }

                            }
                            if (dt.Columns.Contains("MotherDesignation"))
                            {
                                if (MotherDesignation != 0)
                                {
                                    MD.MPDesigID = MotherDesignation;
                                }

                            }
                            if (dt.Columns.Contains("MotherAnnualIncome"))
                            {
                                if (MotherAnnualIncome != 0)
                                {
                                    MD.MIncome = MotherAnnualIncome;
                                }

                            }
                            if (dt.Columns.Contains("MotherOrganizationName"))
                            {
                                if (MotherOrganizationName != "")
                                {
                                    MD.MOrgName = MotherOrganizationName;
                                }

                            }
                            if (dt.Columns.Contains("MotherOrganizationAddress"))
                            {
                                if (MotherOrganizationAddress != "")
                                {
                                    MD.MOrgAddress = MotherOrganizationAddress;
                                }

                            }
                            if (dt.Columns.Contains("MotherEmailID"))
                            {
                                if (MotherEmailID != "")
                                {
                                    MD.MEmail = MotherEmailID;
                                }

                            }
                            if (dt.Columns.Contains("MotherMobileNo"))
                            {
                                if (MotherMobileNo != "")
                                {
                                    MD.MMobileNo = MotherMobileNo;
                                }

                            }

                            //-----Guardian
                            if (db.SIStudentLocalGuardian.Where(model => (model.StudID == StudentId)).Count() > 0)
                            {
                                if (dt.Columns.Contains("GuardianName"))
                                {
                                    if (GuardianName != "")
                                    {
                                        GD.GuardianNames = GuardianName;
                                    }

                                }
                                if (dt.Columns.Contains("GuardianRelation"))
                                {
                                    if (GuardianRelation != "")
                                    {
                                        GD.Relations = GuardianRelation;
                                    }

                                }
                                if (dt.Columns.Contains("GuardianMobile"))
                                {
                                    if (GuardianMobile != "")
                                    {
                                        GD.MobileNo = GuardianMobile;
                                    }

                                }
                                if (dt.Columns.Contains("GuardianEmailID"))
                                {
                                    if (GuardianEmailID != "")
                                    {
                                        GD.GEmailID = GuardianEmailID;
                                    }

                                }
                                if (dt.Columns.Contains("GuardianAddress"))
                                {
                                    if (GuardianAddress != "")
                                    {
                                        GD.GuardAddr = GuardianAddress;
                                    }

                                }
                            }



                            if (dt.Columns.Contains("SecondLanguage"))
                            {
                                if (SecondLanguage != 0)
                                {
                                    CM.SecondID = SecondLanguage;
                                }

                            }
                            if (dt.Columns.Contains("ThridLanguage"))
                            {
                                if (ThridLanguage != 0)
                                {
                                    CM.ThirdID = ThridLanguage;
                                }

                            }
                            if (dt.Columns.Contains("PlaceofBirth"))
                            {
                                if (PlaceofBirth != "")
                                {
                                    CM.PlOfBirth = PlaceofBirth;
                                }

                            }
                            if (dt.Columns.Contains("CertificateNo"))
                            {
                                if (CertificateNo != "")
                                {
                                    CM.BirthCerteNo = CertificateNo;
                                }

                            }
                            if (dt.Columns.Contains("CertificateDate"))
                            {
                                if (CertificateDate != Convert.ToDateTime("01-01-1999"))
                                {
                                    CM.BirthCertDate = CertificateDate;
                                }

                            }
                            if (dt.Columns.Contains("CertificateCropNo"))
                            {
                                if (CertificateCropNo != "")
                                {
                                    CM.BirthCertCorpNo = CertificateCropNo;
                                }

                            }
                            if (dt.Columns.Contains("SchoolName"))
                            {
                                if (SchoolName != "")
                                {
                                    CM.PSchName = SchoolName;
                                }

                            }
                            if (dt.Columns.Contains("TCNo"))
                            {
                                if (TCNo != "")
                                {
                                    CM.PSchTCNo = TCNo;
                                }

                            }
                            if (dt.Columns.Contains("LeavingReason"))
                            {
                                if (LeavingReason != "")
                                {
                                    CM.PSchLeavingReason = LeavingReason;
                                }

                            }
                            if (dt.Columns.Contains("Syllabus"))
                            {
                                if (Syllabus != "")
                                {
                                    CM.PSchSyllabus = Syllabus;
                                }

                            }
                            if (dt.Columns.Contains("PreviousClass"))
                            {
                                if (PreviousClass != "")
                                {
                                    CM.PSchClass = PreviousClass;
                                }

                            }
                            if (dt.Columns.Contains("TCDate"))
                            {
                                if (TCDate != Convert.ToDateTime("01-01-1999"))
                                {
                                    CM.PSchTCDate = TCDate;
                                }

                            }
                            if (dt.Columns.Contains("PreviousSchoolAddress"))
                            {
                                if (PreviousSchoolAddress != "")
                                {
                                    CM.PSchAddress = PreviousSchoolAddress;
                                }

                            }
                            if (dt.Columns.Contains("CareerGoals"))
                            {
                                if (CareerGoals != "")
                                {
                                    CM.CarrGoals = CareerGoals;
                                }

                            }
                            if (dt.Columns.Contains("Hobbies"))
                            {
                                if (Hobbies != "")
                                {
                                    CM.Hobby = Hobbies;
                                }

                            }
                            if (dt.Columns.Contains("Achievements"))
                            {
                                if (Achievements != "")
                                {
                                    CM.Achievementscholarships = Achievements;
                                }

                            }
                            if (dt.Columns.Contains("PersonalIdentificationMark"))
                            {
                                if (PersonalIdentificationMark != "")
                                {
                                    CM.PersonalIdentMarks = PersonalIdentificationMark;
                                }

                            }

                            string strDetails = "Student Excel Updated Studentid:  " + StudentId.ToString() + " Admission No " + AdmissionNo;
                            SUserUpdateDetails(ids[2], strDetails);
                            db.SaveChanges();

                            WritelogMsg += AdmissionNo + "     " + "Updated" + "     " + "                               " + "\r\n";

                        }
                        else
                        {
                            if (AdmissionNo != "")
                            {
                                WritelogMsg += AdmissionNo + "     " + "NotUpdated" + "     " + logMsg + "\r\n";
                            }

                            //Log_ExcelEntry Logs = new Log_ExcelEntry();
                            //if (AdmissionNo != "")
                            //{
                            //    Logs.AdmissionNo = AdmissionNo;
                            //    Logs.SName = StudentFirstName + " " + StudentMiddleName + " " + StudentLastName;
                            //    Logs.Status = logMsg;
                            //    Logs.EntryUID = (int)Session["UID"];
                            //    Logs.EntryDate = DateTime.Now;
                            //    db.Log_ExcelEntry.Add(Logs);
                            //    db.SaveChanges();
                            //}

                        }

                    }

                    /*========== Write Log in Notepad==============*/

                    if (Session["ExcelFileName"].ToString() != "")
                    {
                        if (System.IO.File.Exists(Server.MapPath("~") + "\\StudentExcelLog\\" + Session["ExcelFileName"].ToString() + ".txt") == true)
                        {
                            System.IO.File.Delete(Server.MapPath("~") + "\\StudentExcelLog\\" + Session["ExcelFileName"].ToString() + ".txt");
                        }
                    }
                    FileStream FS = System.IO.File.Create(Server.MapPath("/StudentExcelLog\\") + Session["ExcelFileName"].ToString() + ".txt");
                    StreamWriter SW = new StreamWriter(FS);
                    SW.WriteLine(Server.UrlDecode(WritelogMsg));
                    SW.Flush();
                    SW.Close();



                    /*=============NotePad Log End================*/

                    string hostName = Dns.GetHostName();
                    string myIP = Dns.GetHostByName(hostName).AddressList[0].ToString();

                    Log_ExcelEntry Logs = new Log_ExcelEntry();
                    if (Session["ExcelFileName"].ToString() != "")
                    {
                        Logs.IPAddress = myIP;
                        Logs.NoteURL = Session["ExcelFileName"].ToString() + ".txt";
                        Logs.ExcelURL = Session["ExcelFileName"].ToString() + ".xls";

                        Logs.EntryUID = (int)Session["UID"];
                        Logs.EntryDate = DateTime.Now;
                        db.Log_ExcelEntry.Add(Logs);
                        db.SaveChanges();
                    }



                    ViewBag.GetData = TempData["ExcelData"];
                    objects[0] = ViewBag.GetData;
                    return Json("Saved Successfully,Please Check Log Details");

                }
                else
                {
                    return Json("Saved Successfully,Please Check Log Details");

                }
            }
            catch (Exception ex)
            {
                return Json(ex.Message);
            }
        }


        [Authorize]
        public ActionResult LogDetail()
        {
            string From = Convert.ToDateTime(DateTime.Now, cinfo).ToString("MM/dd/yyyy");
            string To = Convert.ToDateTime(DateTime.Now, cinfo).ToString("MM/dd/yyyy");

            List<TempExcelLogDetail> ls = new List<TempExcelLogDetail>();
            int userid = (int)Session["UID"];
            ls = db.GetExcelLogData(From, To, userid).ToList();


            if (ls.Count > 0)
            {
                ViewData["LogStatus"] = "";
            }

            ViewData["GetLogDetail"] = ls;
            return PartialView("_LogDetail");
        }

        [HttpPost]
        public ActionResult LogDetailFilter(string From, string To)
        {

            From = Convert.ToDateTime(From, cinfo).ToString("MM/dd/yyyy");
            To = Convert.ToDateTime(To, cinfo).ToString("MM/dd/yyyy");

            CommonResponse CR = new CommonResponse();
            object[] objects = new object[6];

            List<TempExcelLogDetail> ls = new List<TempExcelLogDetail>();
            int userid = (int)Session["UID"];

            ls = db.GetExcelLogData(From, To, userid).ToList();

            if (ls.Count > 0)
            {
                ViewData["LogStatus"] = "";
            }

            ViewData["GetLogDetail"] = ls;

            objects[0] = DbCampusContext.RenderPertialViewtoString(this, "_LogDetailGrid").Replace("LogDetailFilter", "ExcelUpdation");
            CR.Message = "";
            CR.Data = objects;
            return Json(CR);
        }

        public void SUserUpdateDetails(string FormName, string Details)
        {
            UserUpdateDetails uud = new UserUpdateDetails();
            uud.UID = Convert.ToInt32(Session["UID"]);
            uud.SessionID = Session.SessionID;
            uud.UpdateDate = DateTime.Now;
            uud.FormName = FormName;
            uud.Details = Details;
            db.UserUpdateDetailss.Add(uud);
            db.SaveChanges();

        }

        [HttpPost]
        public JsonResult FillSectionFill(int ClsIDs)
        {
            CommonResponse CR = new CommonResponse();
            object[] objects = new object[2];
            try
            {
                int SchoolID = (int)Session["SchoolID"];
                int SAcaStart = (int)Session["AcaStart"];
                int SessionUID = (int)Session["UID"];
                if (CheckSession())
                {
                    objects[0] = "Login Again";
                    return Json(objects);
                }
                if (ModelState.IsValid)
                {
                    objects[0] = "";
                    CR.Message = "";

                    ViewBag.Section = (from sm in db.SIStudentYearWiseDetails
                                       join cm in db.MTSectionMasters on sm.SECID equals cm.AutoID
                                       where cm.AutoID != 0 && sm.AcaStarting == SAcaStart && sm.SchID == SchoolID && sm.ClsID == ClsIDs
                                       where cm.AutoID != 0 && sm.AcaStarting == SAcaStart && sm.SchID == SchoolID
                                       orderby cm.SectionName
                                       select new { SECID = cm.AutoID.ToString(), SECName = cm.SectionName }).Distinct().ToList();

                    objects[1] = ViewBag.Section;

                    CR.Data = objects;
                    return Json(CR);
                }
                else
                {
                    CR.Message = "Data not valid";
                    return Json(CR);
                }
            }
            catch (Exception ex)
            {
                CR.Message = ex.Message;
                return Json(CR);
            }
        }

        [Authorize]
        public void GetExcel(string strid)
        {
            try
            {

                string strNewFile1 = (Server.MapPath("~") + "StudentExcel/StudentFile.xls");
                FileInfo excelFiles1 = new FileInfo(strNewFile1);
                if (excelFiles1.Exists)
                {
                    excelFiles1.Delete();
                }

                int ClassID = 0, SecId = 0;
                string FDate = "", TDate = "";

                if (strid != "")
                {
                    var Data = strid.ToString().Split('^');

                    if (Data[0].ToString() != "0")
                    {
                        FDate = Data[0].ToString();
                    }
                    if (Data[1].ToString() != "0")
                    {
                        TDate = Data[1].ToString();
                    }
                    if (Data[2].ToString() != "0")
                    {
                        ClassID = Convert.ToInt32(Data[2].ToString());
                    }
                    if (Data[3].ToString() != "0")
                    {
                        SecId = Convert.ToInt32(Data[3].ToString());
                    }
                }

                int SchoolID = (int)Session["SchoolID"];
                int SAcaStart = (int)Session["AcaStart"];


                System.Data.DataTable dt = TempData["DummyData"] as System.Data.DataTable;

                string strFile = (Server.MapPath("~") + "StudentExcel/Template.xls");
                string strNewFile = (Server.MapPath("~") + "StudentExcel/StudentFile.xls");

                FileInfo excelFiles = new FileInfo(strNewFile);
                if (excelFiles.Exists)
                {
                    excelFiles.Delete();
                }
                System.IO.File.Copy(strFile, strNewFile, true);
                string strConnection = System.Configuration.ConfigurationManager.AppSettings["ConnectionString"].ToString();
                SqlConnection strCon = new SqlConnection(strConnection.ToString());
                strCon.Open();
                //SqlCommand sqlcom;
                OleDbConnection excelConnection = new OleDbConnection();
                excelConnection.ConnectionString = @"Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + strNewFile + ";Extended Properties=Excel 12.0";
                //excelConnection.ConnectionString = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + strNewFile + ";Extended Properties=Excel 8.0";

                excelConnection.Open();
                DataTable dtSheetName = excelConnection.GetOleDbSchemaTable(OleDbSchemaGuid.Tables, null);
                if (dtSheetName == null || dtSheetName.Rows.Count == 0)
                {
                    if (excelConnection.State == ConnectionState.Open)
                        excelConnection.Close();
                }
                //Create OleDbCommand to fetch data from Excel
                OleDbCommand cmd;


                string ColName = "", InsertColumn = "";

                for (int j = 0; j < dt.Columns.Count; j++)
                {
                    ColName += dt.Columns[j].ColumnName.ToString() + "  string,";
                    InsertColumn += dt.Columns[j].ColumnName.ToString() + ",";
                }

                ColName = ColName.ToString().Remove(ColName.Length - 1);
                InsertColumn = InsertColumn.ToString().Remove(InsertColumn.Length - 1);

                cmd = new OleDbCommand("create table [STUDENT$](" + ColName + ")", excelConnection);
                cmd.ExecuteNonQuery();


                if (strid != "")
                {

                    ViewData["List"] = db.GetSelectedDataValue(FDate, TDate, ClassID, SecId, InsertColumn, SchoolID, SAcaStart).Tables[0];
                    System.Data.DataTable dts = ViewData["List"] as System.Data.DataTable;


                    string ColN = ""; string ColValue = "";
                    for (int k = 0; k < dts.Rows.Count; k++)
                    {
                        for (int j = 0; j < dt.Columns.Count; j++)
                        {
                            ColN = dt.Columns[j].ColumnName.ToString();
                            ColValue += "'" + dts.Rows[k][ColN].ToString() + "',";
                        }
                        ColValue = ColValue.ToString().Remove(ColValue.Length - 1);

                        cmd = new OleDbCommand("Insert into [STUDENT$] (" + InsertColumn + ") Values(" + ColValue + " )", excelConnection);
                        cmd.ExecuteNonQuery();
                        ColValue = "";

                    }

                }


                //cmd = new OleDbCommand("Insert into [STUDENT$] (" + InsertColumn + ") Values('133','Rohan','Kumar','Sharma' )", excelConnection);
                //cmd.ExecuteNonQuery();



                dtSheetName.Dispose();
                strCon.Dispose();
                excelConnection.Close();
                excelConnection.Dispose();

                string path = "Student.xls";

                FileStream MyFileStream = new FileStream(strNewFile, FileMode.Open);
                long FileSize;
                FileSize = MyFileStream.Length;
                byte[] Buffer = new byte[(long)FileSize];
                MyFileStream.Read(Buffer, 0, (int)MyFileStream.Length);
                MyFileStream.Close();
                Response.AddHeader("content-disposition", "attachment; filename=" + path + "");
                Response.ContentType = ("application/vnd.ms-excel");
                Response.BinaryWrite(Buffer);

            }
            catch (Exception ex)
            {

            }
            finally
            {
                string strNewFile = (Server.MapPath("~") + "StudentExcel/StudentFile.xls");
                FileInfo excelFiles = new FileInfo(strNewFile);
                if (excelFiles.Exists)
                {
                    excelFiles.Delete();
                }
            }
        }

        public ActionResult StudentExcelDownload(string FileName)
        {
            string path = AppDomain.CurrentDomain.BaseDirectory + "StudentExcelLog/";
            byte[] fileBytes = System.IO.File.ReadAllBytes(path + FileName);
            string fname = FileName;
            return File(fileBytes, System.Net.Mime.MediaTypeNames.Application.Octet, fname);
        }

        public ActionResult StudentLogsDownload(string FileName)
        {
            string path = AppDomain.CurrentDomain.BaseDirectory + "StudentExcelLog/";
            byte[] fileBytes = System.IO.File.ReadAllBytes(path + FileName);
            string fname = FileName;
            return File(fileBytes, System.Net.Mime.MediaTypeNames.Application.Octet, fname);
        }





        #endregion

        #region Discussion

        [HttpPost]
        [Authorize]
        public JsonResult PostDiscussion(string para, HttpPostedFileBase fuImage, string PostTo, string VisibleTo, string trdata)
        {
            CommonResponse cr = new CommonResponse();
            DiscussionMaster objDM = new DiscussionMaster();
            DiscussionMaster paraDM = new DiscussionMaster();
            DiscussionPermission objDP = new DiscussionPermission();
            JavaScriptSerializer json = new JavaScriptSerializer();
            paraDM = (DiscussionMaster)json.ConvertToType<DiscussionMaster>(json.DeserializeObject(para));
            object[] obj = new object[2];
            try
            {
                if (CheckSession())
                {
                    cr.Message = "Login Again";
                    return Json(cr);
                }
                int DID = (db.DiscussionMaster.Max(m => (int?)m.AutoID) ?? 0) + 1;
                int DPID = db.DiscussionPermission.Max(m => (int?)m.DPID) ?? 0 + 1;
                if (paraDM.AutoID == 0)
                {
                    objDM.AutoID = DID;
                    objDM.StudEmp = CCSession.StudEmp == 0 ? (int)Session["EmployeeID"] : CCSession.StudEmp;
                    objDM.SchoolID = CCSession.SchoolID;
                    objDM.AcaStart = CCSession.AcaStart;
                    objDM.DDate = DateTime.Now;
                    objDM.Desc = Server.UrlDecode(paraDM.Desc);
                    objDM.MemberType = paraDM.MemberType;
                    objDM.DImage = "";
                    objDM.EntryDate = DateTime.Now;
                    objDM.UpdateDate = DateTime.Now;
                    objDM.EntryUserID = CCSession.UID;
                    objDM.UpdateUserID = CCSession.UID;
                    objDM.SchoolID = CCSession.SchoolID;
                    if (fuImage != null)
                    {
                        string Extn = Path.GetExtension(fuImage.FileName);
                        if (fuImage.FileName != "" && fuImage.FileName != "noImage.png" && fuImage != null)
                        {
                            if (System.IO.File.Exists(Server.MapPath("~") + "\\Discussion\\D" + "_" + DID + Extn) == true)
                            {
                                System.IO.File.Delete(Server.MapPath("~") + "\\Discussion\\D" + "_" + DID + Extn);
                            }
                            fuImage.SaveAs(Server.MapPath("~") + "\\Discussion\\D" + "_" + DID + Extn);
                            objDM.DImage = DID + Extn;
                        }
                    }
                    db.DiscussionMaster.Add(objDM);
                    objDP.DPID = DPID;
                    objDP.DID = DID;
                    objDP.PRLEmployeeID = 0;
                    objDP.StudentID = 0;
                    objDP.VisibleTo = PostTo;
                    db.DiscussionPermission.Add(objDP);
                }
                else
                {
                    objDM = db.DiscussionMaster.Find(paraDM.AutoID);
                    objDM.AutoID = paraDM.AutoID;
                    objDM.AcaStart = CCSession.AcaStart;
                    objDM.DDate = DateTime.Now;
                    objDM.Desc = Server.UrlDecode(paraDM.Desc);
                    objDM.SchoolID = CCSession.SchoolID;
                    objDM.UpdateDate = DateTime.Now;
                    objDM.UpdateUserID = CCSession.UID;
                }
                db.SaveChanges();
                cr.Message = "Saved Successfully";
                var Discussion = (from DM in db.DiscussionMaster
                                  join DP in db.DiscussionPermission on DM.AutoID equals DP.DID
                                  where DM.SchoolID == CCSession.SchoolID && DM.AcaStart == CCSession.AcaStart && (DP.VisibleTo == "" || DP.VisibleTo == VisibleTo)
                                  orderby DM.EntryDate descending
                                  select new GetGridData()
                                  {
                                      ColID = DM.AutoID,

                                      Col2 = DM.Desc,
                                      Col3 = DM.StudEmp.ToString(),
                                      Col4 = DM.MemberType,
                                      Col5 = (db.SIStudentMasters.Where(m => m.StudID == DM.StudEmp).Select(m => m.FName + " " + m.MName + "" + m.LName).FirstOrDefault()),
                                      Col6 = (db.PRLEmployeeMasters.Where(m => m.EmpID == DM.StudEmp).Select(m => m.FName + " " + m.MName + "" + m.LName).FirstOrDefault()),
                                      Col7 = (DM.StudEmp == CCSession.StudEmp ? "True" : "False"),
                                      Col8 = DM.DImage,
                                      Col9 = DM.EntryDate.ToString()
                                  });
                ViewData["Discussion"] = Discussion.ToList();
                obj[1] = Discussion.FirstOrDefault().ColID;
                ViewData["Take"] = "5";

                obj[0] = DbCampusContext.RenderPertialViewtoString(this, "_DiscForum").Replace("PostDiscussion?", "Discussion");
                cr.Data = obj;
                return Json(cr);
            }
            catch (Exception ex)
            {
                cr.Message = ex.Message;
                return Json(cr);
            }
        }
        [HttpPost]
        [Authorize]
        public JsonResult ReplyDiscussion(string MType, string Description, int DID, int DDID)
        {
            CommonResponse cr = new CommonResponse();

            object[] obj = new object[1];
            if (CheckSession())
            {
                cr.Message = "Login Again";
                return Json(cr);
            }
            MType = (Convert.ToInt32(Session["UserTypeID"]) == 1 ? "E" : "S");
            DiscussionDetails objDD = new DiscussionDetails();
            if (DDID == 0)
            {
                objDD.DDID = (db.DiscussionDetails.Max(m => (int?)m.DDID) ?? 0) + 1;
                objDD.DID = DID;
                objDD.MemberType = MType;
                objDD.Reply = Description;
                objDD.ReplyDate = DateTime.Now;
                objDD.StudEmpID = CCSession.StudEmp == 0 ? (int)Session["EmployeeID"] : CCSession.StudEmp;
                objDD.UpdateDate = DateTime.Now;
                objDD.UpdateUserID = CCSession.UID;
                objDD.EntryDate = DateTime.Now;
                objDD.EntryUserID = CCSession.UID;
                db.DiscussionDetails.Add(objDD);
            }
            else if (db.DiscussionDetails.Where(m => m.DDID == DDID).Count() > 0)
            {
                objDD = db.DiscussionDetails.Find(DDID);
                objDD.DID = DID;
                objDD.Reply = Description;
                objDD.ReplyDate = DateTime.Now;
                objDD.UpdateDate = DateTime.Now;
                objDD.UpdateUserID = CCSession.UID;
            }
            else
            {
                cr.Message = "Record Not Found";
            }
            db.SaveChanges();
            cr.Message = "";
            int SessionID = CCSession.StudEmp == 0 ? (int)Session["EmployeeID"] : CCSession.StudEmp;
            var Discussion = (from DM in db.DiscussionMaster
                              join DD in db.DiscussionDetails on DM.AutoID equals DD.DID
                              where DM.SchoolID == CCSession.SchoolID && DM.AutoID == DID
                              select new GetGridData()
                              {
                                  ColID = DD.DDID,
                                  Col1 = DD.DID.ToString(),
                                  Col2 = DD.Reply,
                                  Col3 = DM.DDate.ToString(),
                                  Col5 = DD.MemberType,
                                  Col6 = DD.StudEmpID.ToString(),
                                  Col7 = db.SIStudentMasters.Where(m => m.StudID == DD.StudEmpID).Select(m => m.FName + " " + m.MName + " " + m.LName).FirstOrDefault(),
                                  Col8 = db.PRLEmployeeMasters.Where(m => m.EmpID == DD.StudEmpID).Select(m => m.FName + " " + m.MName + "" + m.LName).FirstOrDefault(),
                                  Col9 = DD.StudEmpID == db.DiscussionDetails.Where(model => model.MemberType == MType && model.StudEmpID == SessionID && model.DDID == DD.DDID).Select(model => model.StudEmpID).FirstOrDefault() ? "True" : "False",
                                  Col10 = DD.ReplyDate.Day.ToString() + "/" + DD.ReplyDate.Month.ToString() + "/" + DD.ReplyDate.Year.ToString()
                              }).ToList();
            obj[0] = Discussion;
            cr.Data = obj;
            return Json(cr);
        }

        [HttpPost]
        [Authorize]
        public JsonResult GetDiscussion(int Did)
        {
            CommonResponse cr = new CommonResponse();
            object[] obj = new object[1];
            try
            {
                if (CheckSession())
                {
                    cr.Message = "Login Again";
                    return Json(cr);
                }
                var GetDetails = db.DiscussionDetails.Where(m => m.DDID == Did).FirstOrDefault();
                obj[0] = GetDetails;
                cr.Data = obj;
                return Json(cr);
            }
            catch (Exception ex)
            {
                cr.Message = ex.Message;
                return Json(cr);
            }
        }


        [HttpPost]
        [Authorize]
        public JsonResult DeleteFeed(int Did)
        {
            CommonResponse cr = new CommonResponse();
            DiscussionDetails objDD = new DiscussionDetails();
            object[] obj = new object[1];
            try
            {
                if (CheckSession())
                {
                    cr.Message = "Login Again";
                    return Json(cr);
                }
                objDD = db.DiscussionDetails.Find(Did);
                db.DiscussionDetails.Remove(objDD);
                db.SaveChanges();
                cr.Message = "Deleted Successfully";
                return Json(cr);
            }
            catch (Exception ex)
            {
                cr.Message = ex.Message;
                return Json(cr);
            }
        }

        [HttpPost]
        [Authorize]
        public JsonResult GetDiscussionDetails(int ID)
        {
            CommonResponse cr = new CommonResponse();
            object[] obj = new object[1];
            try
            {
                if (CheckSession())
                {
                    cr.Message = "Login Again";
                    return Json(cr);
                }
                var Discussion = (from DM in db.DiscussionMaster
                                  where DM.SchoolID == CCSession.SchoolID && DM.AcaStart == CCSession.AcaStart && DM.AutoID == ID
                                  orderby DM.EntryDate descending
                                  select new GetGridData()
                                  {
                                      ColID = DM.AutoID,

                                      Col2 = DM.Desc,
                                      Col3 = DM.StudEmp.ToString(),
                                      Col4 = DM.MemberType,
                                      Col5 = (db.SIStudentMasters.Where(m => m.StudID == DM.StudEmp).Select(m => m.FName + " " + m.MName + "" + m.LName).FirstOrDefault()),
                                      Col6 = (db.PRLEmployeeMasters.Where(m => m.EmpID == DM.StudEmp).Select(m => m.FName + " " + m.MName + "" + m.LName).FirstOrDefault()),
                                      Col7 = (DM.StudEmp == CCSession.StudEmp ? "True" : "False"),
                                      Col8 = DM.DImage,
                                      Col9 = DM.EntryDate.ToString()
                                  }).ToList();
                ViewData["Discussion"] = Discussion;
                ViewData["Take"] = "100";
                obj[0] = DbCampusContext.RenderPertialViewtoString(this, "_DiscForum").Replace("GetDiscussionDetails?", "Discussion");

                cr.Data = obj;

                return Json(cr);
            }
            catch (Exception ex)
            {
                throw;
            }
        }
        #endregion
    }

   
}using CampusCare.Models;
using CrystalDecisions.CrystalReports.Engine;
//using Microsoft.AspNet.SignalR;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Web.Security;
using System.Reflection;
using System.ComponentModel;
using System.Net;
using System.Web.Script.Serialization;
using System.Security.Cryptography.X509Certificates;
using System.Net.Security;
using System.Net.Sockets;
using System.Security.Authentication;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Web.Hosting;




namespace CampusCare.Controllers
{
    public class CCWebController : Controller
    {
       
        public DbCampusContextPRLAtt dbAtt = new DbCampusContextPRLAtt();
        public DbCampusContext db = new DbCampusContext();
        public CCSession CCSession = new CCSession();
        public CultureInfo cinfo = new CultureInfo("hi-IN");
        public static CommonResponse objCR;

        public string strServer = System.Configuration.ConfigurationManager.AppSettings["ServerName"].ToString();
        public string strDatabase = System.Configuration.ConfigurationManager.AppSettings["DatabaseName"].ToString();
        public string strUID = System.Configuration.ConfigurationManager.AppSettings["UID"].ToString();
        public string strPWD = System.Configuration.ConfigurationManager.AppSettings["PWD"].ToString();

        public CommonResponse crInitializing()
        {
            if (objCR != null)
            {
                return objCR;
            }
            objCR = new CommonResponse();
            return objCR;
        }

        public enum Message
        {
            [Description("Success")]
            Success = 1,
            [Description("Technical issue , contact your Administrator")]
            Error = 2
        }

        public string GetDescription(object enumValue, string value)
        {
            FieldInfo field = enumValue.GetType().GetField(enumValue.ToString());
            if (field != null)
            {
                object[] attrs = field.GetCustomAttributes(typeof(DescriptionAttribute), true);
                if (attrs != null && attrs.Length > 0)
                {
                    return ((DescriptionAttribute)attrs[0]).Description;
                }
            }
            return value;
        }

        protected override void OnActionExecuting(ActionExecutingContext filterContext)
        {
            base.OnActionExecuting(filterContext);
            TempData.Keep("ids");
            TempData.Keep("Submenu");
            TempData.Keep("ModuleMaster");
            if (CheckSession())
            {
                RedirectToAction("Logon", "Logon");
            }
            else
            {
                //ViewData["MenuMaster"] = db.FillMenu((int)Session["UID"]);               
            }
        }
        protected override void OnActionExecuted(ActionExecutedContext filterContext)
        {
            base.OnActionExecuted(filterContext);

            //Response.Cache.SetCacheability(HttpCacheability.NoCache);
            //Response.Cache.SetExpires(DateTime.UtcNow.AddMinutes(-1));
            //Response.Cache.SetNoStore();
            //Response.AddHeader("Cache-control", "no-store,must-revalidate,private,no-cache,no-store,pre-check=0,post-check=0,max-stale=0");
            //Response.AddHeader("Pragma", "no-cache");
            //Response.AddHeader("Expires", "0");

            Random obj = new Random();
            HttpCookie Cookie = new HttpCookie("SchoolCode");
            Cookie.Value = obj.Next(10000, 100000).ToString();
            Response.SetCookie(Cookie);
            Session["SchoolCode"] = Cookie.Value;
        }

        public CCWebController()
        {
            Dictionary<string, object> obj = db.BindOnloadData();
            ViewData["AcademicSession"] = obj["AcaStart"];
            if (obj.ContainsKey("Student"))
            {
                ViewData["Students"] = obj["Student"];
                CCSession.StudEmp = Convert.ToInt16(obj["StudentID"]);
            }
        }

        public string[] ids;
        public virtual void fillPermission()
        {
            ids = db.FillRequestQueryString();
            //Session["ids"] = ids;
            TempData["ids"] = ids;
            ViewData["UserPermission"] = db.FillUserMenuPermission(Convert.ToInt32(Session["UID"]), Convert.ToInt32(ids[1]))[0];
            ViewData["MenuName"] = ids[3].ToString();
        }
        public bool CheckSession()
        {
            if (Session["UID"] == null)
            {
                ClearSession();
                return true;
            }
            else
            {
                ids = (string[])TempData["ids"];
                return false;
            }
        }

        public void ClearSession()
        {
            Session.Clear();
            Session.Abandon();
           // TempData.Clear();
            Response.Cookies.Clear();
            Request.Cookies.Clear();

            //Response.Cache.SetCacheability(HttpCacheability.NoCache);
            //Response.Cache.SetExpires(DateTime.UtcNow.AddMinutes(-1));
            //Response.Cache.SetNoStore();
            //Response.AddHeader("Cache-control", "no-store,must-revalidate,private,no-cache,no-store,pre-check=0,post-check=0,max-stale=0");
            //Response.AddHeader("Pragma", "no-cache");
            //Response.AddHeader("Expires", "0");
        }

        public bool RequestAuthentication(encodeshdata trdata)
        {
            string receiveddata = FormsAuthentication.HashPasswordForStoringInConfigFile(trdata.actualdata.Replace("\n", "\\n") + "^" + Convert.ToString(Session["SchoolCode"]), "sha1");
            bool status = false;
        
            if (receiveddata.ToUpper() == trdata.ImageData.ToUpper() && Request.Url.Authority.ToUpper() == System.Configuration.ConfigurationManager.AppSettings["DomainName"].ToString().ToUpper())
            {
                status = true;
            }
            else
            {
                ClearSession();
            }
            return status;
        }

        public string ChangeYYYYMMDD(string strDate)
        {
            if (strDate.Length == 10)
            {
                string[] strFinalDate;
                strFinalDate = strDate.Split('/');
                if (strFinalDate.Length != 3)
                    strFinalDate = strDate.Split('-');
                if (strFinalDate.Length != 3)
                    strFinalDate = strDate.Split('.');
                return strFinalDate[2] + '-' + strFinalDate[1] + '-' + strFinalDate[0];
            }
            else
                return "";
        }

        public string GetMultidimentionalArrayInString(string[][] temp)
        {
            //trdata.actualdata = para_fm + "#" + "[" + "\"" + string.Join("\",\"", fd) + "\"]";
            string result = "";
            if (temp != null)
            {
                foreach (string[] tp in temp)
                {
                    if (tp != null)
                    {
                        result += "," + "[" + "\"" + string.Join("\",\"", tp) + "\"]";
                    }
                }
                if (result.Length > 0)
                    result = "[" + result.Substring(1) + "]";
            }
            return result;
        }
        public List<ReportGrouping> GetReportName(int ModuleId = 0)
        {
            List<ReportGrouping> obj = new List<ReportGrouping>();
            int menuid = Convert.ToInt32(ids[1]);
            int intUID = Convert.ToInt32(Session["UID"].ToString());
            ModuleId = (int)(db.MTMenuMasters.Where(x => x.MenuID == menuid).Select(x => x.ModuleID).ToList()[0]);
            List<MTReportGroupMaster> RGM = (from RM in db.MTReportGroupMAsters
                                             join RGD in db.MTReportGroupdetail on RM.GroupIDs equals RGD.GroupIDs
                                             join MUM in db.MTUserReportMasters on RGD.ReportIDs equals MUM.ReportID
                                             where RM.ModuleIDs == ModuleId && MUM.UID == intUID
                                             orderby RM.PriorityNos
                                             select RM).Distinct().ToList();
            foreach (MTReportGroupMaster rm in RGM)
            {
                ReportGrouping rg = new ReportGrouping();
                rg.GroupID = rm.GroupIDs;
                rg.GroupName = rm.GroupNames;
                var data = from RM in db.MTReportMasters
                           join RGD in db.MTReportGroupdetail on RM.AutoID equals RGD.ReportIDs
                           join MUM in db.MTUserReportMasters on RM.AutoID equals MUM.ReportID
                           where MUM.UID == intUID && RGD.GroupIDs == rm.GroupIDs
                           orderby RM.Priority
                           select RM;
                rg.ReportMaster = data.ToList();
                obj.Add(rg);
            }
            return obj;
        }

        public ActionResult CameraCapture(string imageName)
        {
            var stream = Request.InputStream;
            string imgfilestring;
            using (var reader = new StreamReader(stream))
            {
                imgfilestring = reader.ReadToEnd();
            }
            string Apppath = AppDomain.CurrentDomain.BaseDirectory + "StudentPhoto/";
            var path = Path.Combine(Apppath, imageName + ".jpg");
            System.IO.File.WriteAllBytes(path, stringtoByteConverter(imgfilestring));
            return null;
        }

        public byte[] stringtoByteConverter(string imgfile)
        {
            int numbyte = (imgfile.Length) / 2;
            byte[] bytes = new byte[numbyte];
            for (int i = 0; i < numbyte; ++i)
            {
                bytes[i] = Convert.ToByte(imgfile.Substring(i * 2, 2), 16);
            }
            return bytes;
        }
        public FileResult GetFileFormat(string FileFormat, string virtualPath, ReportDocument reportdocument, Stream stream)
        {
            if (FileFormat == "xls")
            {
                stream = reportdocument.ExportToStream(CrystalDecisions.Shared.ExportFormatType.ExcelRecord);
                return File(stream, "application/xls", virtualPath + ".xls");
            }
            else
            {
                stream = reportdocument.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                return File(stream, "application/pdf");
            }
        }

        public FileResult GetFileFormat(string FileFormat, string virtualPath, ReportDocument reportdocument, Stream stream, string Paper = "")
        {
            if (Paper != "" && Paper != null && Paper != "undefined")
            {
                if (Paper.ToString().Split('^')[0].ToString() != "0")
                {

                    if (Paper.ToString().Split('^')[0].ToString() == "1")  //Paper Size
                    {
                        reportdocument.PrintOptions.PaperSize = CrystalDecisions.Shared.PaperSize.PaperA4;
                    }
                    else if (Paper.ToString().Split('^')[0].ToString() == "2")
                    {
                        reportdocument.PrintOptions.PaperSize = CrystalDecisions.Shared.PaperSize.PaperLegal;
                    }
                    else
                    {
                        reportdocument.PrintOptions.PaperSize = CrystalDecisions.Shared.PaperSize.PaperA3;
                    }
                }

                if (Paper.ToString().Split('^')[1].ToString() != "0")
                {
                    if (Paper.ToString().Split('^')[1].ToString() == "1") //Page Orientation
                    {
                        reportdocument.PrintOptions.PaperOrientation = CrystalDecisions.Shared.PaperOrientation.Portrait;
                    }
                    else
                    {
                        reportdocument.PrintOptions.PaperOrientation = CrystalDecisions.Shared.PaperOrientation.Landscape;
                    }

                }
            }
            if (FileFormat == "xls")
            {
                stream = reportdocument.ExportToStream(CrystalDecisions.Shared.ExportFormatType.ExcelRecord);
                return File(stream, "application/xls", virtualPath + ".xls");
            }
            else
            {
                stream = reportdocument.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                return File(stream, "application/pdf");
            }
        }

        public string CompanyName()
        {
            try
            {
                int Menuid = Convert.ToInt32(ids[1]);
                int moduleid = Convert.ToInt32(db.MTMenuMasters.Where(x => x.MenuID == Menuid).Select(x => x.ModuleID).ToList()[0]);
                if (moduleid == 18)
                {
                    Session["moduleid"] = moduleid.ToString();
                    int CID = Convert.ToInt32(Session["CompanyID"]);
                    string[] FY = Convert.ToString(Session["FYSession"]).Split('^');
                    return Convert.ToString(db.FACompanyMasters.Where(model => model.AutoID == CID).Select(model => model.CompName).ToList()[0]) + "  (Financial Year " + FY[0] + " - " + FY[1] + ")";
                }
                else
                {
                    return "";
                }
            }
            catch (Exception)
            {
                return "";
            }
        }

        public string LocationName()
        {
            try
            {
                int Menuid = Convert.ToInt32(ids[1]);
                int moduleid = Convert.ToInt32(db.MTMenuMasters.Where(x => x.MenuID == Menuid).Select(x => x.ModuleID).ToList()[0]);
                if (moduleid == 19)
                {
                    Session["moduleid"] = moduleid.ToString();
                    int CID = Convert.ToInt32(Session["InvCompanyID"]);
                    int LID = Convert.ToInt32(Session["LocationID"]);
                    string[] FY = Convert.ToString(Session["FYSession"]).Split('^');
                    string CName = (db.InvCompanyMasters.Where(model => model.AutoID == CID).Select(model => model.CompName).ToList()[0]);
                    return Convert.ToString(CName + ", " + db.INVLocationMasters.Where(model => model.AutoID == LID).Select(model => model.LocName).ToList()[0]) + "  (Financial Year " + FY[0] + " - " + FY[1] + ")";
                }
                else
                {
                    return "";
                }
            }
            catch (Exception)
            {
                return "";
            }
        }

        #region PushNotification
        //Push Notification

        public string fReplaceChars(string replaceStr) { return Regex.Replace(replaceStr.Trim().Replace("%20", " ").Replace("%40", "@").Replace("%23", "#").Replace("%24", "$").Replace("%25", "%").Replace("%5E", "^").Replace("%26amp%3B", "&").Replace("%3F", "?").Replace("%22", "'").Replace("%7B", "{").Replace("%7D", "}").Replace("%3A", ":").Replace("%3B", ";").Replace("%26lt;", "<").Replace("%26gt;", ">").Replace("%2C", ",").Replace("%26nbsp;", " ").Replace("%2F", "/"), "%3C.*?%3E", string.Empty); }
        public string GetNotificationUserName(int StudentID, string Message)
        {

            var NotificationMessage = (from SYD in db.SIStudentYearWiseDetails
                                       join CM in db.MTClassMasters on SYD.ClsID equals CM.AutoID
                                       join SM in db.MTSectionMasters on SYD.SECID equals SM.AutoID
                                       join SSM in db.SIStudentMasters on SYD.StudID equals SSM.StudID
                                       where SYD.AcaStarting == CCSession.AcaStart && SYD.StudID == StudentID
                                       select new { ClsSec = " Your ward " + SSM.FName + " " + SSM.MName + " " + SSM.LName + "(" + CM.ClassName + "-" + SM.SectionName + "):-" }).FirstOrDefault();
            return (NotificationMessage == null ? "" : NotificationMessage.ClsSec) + " " + Message;
        }
        public void MobileNotification(string Header, string Title, string Message, int StudEmpID, string UserType = "", string NotifyFor = "")
        {
            try
            {
                Regex regx = new Regex("\\<[^\\>]*\\>");

                string DomainName = System.Configuration.ConfigurationManager.AppSettings.Get("DomainName");
                string MyUrl = DomainName.Replace("www.", "");

                int AcaStart = CCSession.AcaStart;
                string message1 = "";
                message1 = Header + "&&&" + Title + "&&&" + fReplaceChars(regx.Replace(Server.UrlDecode(Message), String.Empty)) + "&&&" + UserType + "&&&" + MyUrl;
                if (StudEmpID != 0)
                {
                    var USERID = UserType == "S" ? (from SYD in db.SIStudentYearWiseDetails
                                                    join SI in db.SIStudentMasters on SYD.StudID equals SI.StudID
                                                    join MTU in db.MTUserMasters on SI.PareD equals MTU.EmployeeIDStudentID
                                                    where SYD.StudID == StudEmpID && (SYD.AcaStarting == AcaStart) && SYD.StudStatus == "S"
                                                    && (MTU.UserTypeID == 3)
                                                    select new { UserID = (string)MTU.UserID }) : (from EM in db.PRLEmployeeMasters
                                                                                                   join MTU in db.MTUserMasters on EM.EmpID equals MTU.EmployeeIDStudentID
                                                                                                   where EM.EmpID == StudEmpID && EM.EmployeeStatus == "N"
                                                                                                   && (MTU.UserTypeID == 1 || MTU.UserTypeID == 7)
                                                                                                   select new { MTU.UserID });
                    if (USERID.Count() > 0)
                    {
                        foreach (var item in USERID.ToList())
                        {
                            InsertNotification(item.UserID.ToString(), message1, CCSession.UID);
                        }

                        var MobileID = (from PUSH in db.PushGetRegIdWCF
                                        join UID in USERID on PUSH.UniqueID equals UID.UserID
                                        join MTU in db.MTUserMasters on PUSH.UniqueID equals MTU.UserID
                                        where (PUSH.Devicetype == "Android")
                                        select new { PUSH.MobileRegID }).ToList();

                        var MobileID1 = (from PUSH in db.PushGetRegIdWCF
                                         join UID in USERID on PUSH.UniqueID equals UID.UserID
                                         join MTU in db.MTUserMasters on PUSH.UniqueID equals MTU.UserID
                                         where (PUSH.Devicetype == "Iphone")
                                         select new { PUSH.MobileRegID }).ToList();

                        for (int i = 0; i < MobileID.Count(); i++)
                        {
                            PushNotificationandroid(Title, message1, (MobileID[i].MobileRegID.ToString()));
                        }
                        for (int i = 0; i < MobileID1.Count(); i++)
                        {
                            PushNotificationanIphone(Title, fReplaceChars(Message.Length > 100 ? Message.Substring(0, 95) + "..." : Message), (MobileID1[i].MobileRegID.ToString()));
                        }
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }
        public void InsertNotification(string UserID, string Message, int UID)
        {
            try
            {



                MobileNotifications objMN = new MobileNotifications();
                objMN.Content = Message;
                objMN.EntryDate = DateTime.Now;
                objMN.EntryUserID = UID;
                objMN.NotifyDate = DateTime.Now;
                objMN.NotifyBy = "Web";
                objMN.USERID = UserID;
                db.MobileNotifications.Add(objMN);
                db.SaveChanges();

            }
            catch (Exception ex)
            {
                throw;
            }
        }
        public void PushNotificationandroid(string Title, string message = "", string RegIDs = "")
        {
            try
            {
                if (RegIDs != "")
                {
                    string Responsemessage = "";
                    var applicationID = System.Configuration.ConfigurationManager.AppSettings.Get("ApplicationID");
                    var SENDER_ID = "";
                    string collapse_key = Guid.NewGuid().ToString("n");
                    System.Net.ServicePointManager.ServerCertificateValidationCallback = delegate (object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors) { return true; };
                    ServicePointManager.Expect100Continue = true;
                    ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;

                    WebRequest tRequest = WebRequest.Create("https://fcm.googleapis.com/fcm/send");
                    tRequest.Method = "post";
                    //tRequest.ContentType = "application/x-www-form-urlencoded;charset=UTF-8";
                    tRequest.ContentType = "application/json";
                    tRequest.Headers.Add(HttpRequestHeader.Authorization, string.Format("key={0}", applicationID));
                    tRequest.Headers.Add(string.Format("Sender: id={0}", SENDER_ID));

                    var postdata = new
                    {
                        to = RegIDs,
                        priority = "high",
                        content_available = true,
                        data = new
                        {
                            message = message,
                            title = Title,
                            badge = 1
                        },
                    };

                    string postbody = Newtonsoft.Json.JsonConvert.SerializeObject(postdata).ToString();
                    Byte[] arraybyte = Encoding.UTF8.GetBytes(postbody);
                    tRequest.ContentLength = arraybyte.Length;
                    Stream stream = tRequest.GetRequestStream();
                    stream.Write(arraybyte, 0, arraybyte.Length);
                    stream.Close();
                    WebResponse tResponse = tRequest.GetResponse();
                    stream = tResponse.GetResponseStream();
                    StreamReader tReader = new StreamReader(stream);
                    String sResponseFromServer = tReader.ReadToEnd();
                    tReader.Close();
                    stream.Close();
                    tResponse.Close();
                    if (sResponseFromServer.Contains("\"failure\":0"))
                    {
                        Responsemessage = RegIDs + " / " + "Send notification successfully!";
                    }
                    else if (sResponseFromServer.Contains("Error="))
                    {
                        Responsemessage = RegIDs + " / " + "Not Send notification!";
                    }


                }

            }
            catch (Exception ex)
            {
                //return "";
                // Response.Write(ex.Message);
            }

        }
        protected void PushNotificationanIphone(string Title, string message = "", string devicetocken = "")
        {
            int port = 2195;
            //String hostname = "gateway.sandbox.push.apple.com";
            String hostname = "gateway.push.apple.com";

            string certificatePath = HostingEnvironment.MapPath("~/Certificates.p12");

            string certificatePassword = "";

            X509Certificate2 clientCertificate = new X509Certificate2(certificatePath, certificatePassword, X509KeyStorageFlags.MachineKeySet);
            X509Certificate2Collection certificatesCollection = new X509Certificate2Collection(clientCertificate);

            TcpClient client = new TcpClient(hostname, port);
            SslStream sslStream = new SslStream(client.GetStream(), false, new RemoteCertificateValidationCallback(ValidateServerCertificate), null);

            try
            {
                sslStream.AuthenticateAsClient(hostname, certificatesCollection, SslProtocols.Tls12, true);

            }
            catch (AuthenticationException ex)
            {
                Console.WriteLine("Authentication failed");
                client.Close();
                // Request.SaveAs(Server.MapPath("Authenticationfailed.txt"), true);
                // return;
                //Response.Write(ex.Message);

            }

            //// Encode a test message into a byte array.
            MemoryStream memoryStream = new MemoryStream();
            BinaryWriter writer = new BinaryWriter(memoryStream);

            writer.Write((byte)0);  //The command
            writer.Write((byte)0);  //The first byte of the deviceId length (big-endian first byte)
            writer.Write((byte)32); //The deviceId length (big-endian second byte)

            byte[] b0 = HexString2Bytes(devicetocken);
            WriteMultiLineByteArray(b0);

            writer.Write(b0);
            String payload;
            string strmsgbody = "";
            int totunreadmsg = 0;
            //Debug.WriteLine("during testing via device!");
            //Request.SaveAs(Server.MapPath("APNSduringdevice.txt"), true);
            payload = "{\"aps\":{\"alert\":{\"title\":\"" + Title + "\" ,\"body\":\"" + message + "\"},\"badge\":1,\"sound\":\"mailsent.wav\"}}";
            writer.Write((byte)0); //First byte of payload length; (big-endian first byte)
            writer.Write((byte)payload.Length);     //payload length (big-endian second byte)

            byte[] b1 = System.Text.Encoding.UTF8.GetBytes(payload);
            writer.Write(b1);
            writer.Flush();

            byte[] array = memoryStream.ToArray();

            try
            {
                sslStream.Write(array);
                sslStream.Flush();
            }
            catch
            {

            }

            client.Close();

        }
        private byte[] HexString2Bytes(string hexString)
        {
            //check for null
            if (hexString == null) return null;
            //get length
            int len = hexString.Length;
            if (len % 2 == 1) return null;
            int len_half = len / 2;
            //create a byte array
            byte[] bs = new byte[len_half];
            try
            {
                //convert the hexstring to bytes
                for (int i = 0; i != len_half; i++)
                {
                    bs[i] = (byte)Int32.Parse(hexString.Substring(i * 2, 2), System.Globalization.NumberStyles.HexNumber);
                }
            }
            catch (Exception ex)
            {
                //MessageBox.Show("Exception : " + ex.Message);
            }
            //return the byte array
            return bs;
        }
        // The following method is invoked by the RemoteCertificateValidationDelegate.
        public static bool ValidateServerCertificate(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors)
        {
            if (sslPolicyErrors == SslPolicyErrors.None)
                return true;

            Console.WriteLine("Certificate error: {0}", sslPolicyErrors);

            // Do not allow this client to communicate with unauthenticated servers.
            return false;
        }
        public static void WriteMultiLineByteArray(byte[] bytes)
        {
            const int rowSize = 20;
            int iter;

            Console.WriteLine("initial byte array");
            Console.WriteLine("------------------");

            for (iter = 0; iter < bytes.Length - rowSize; iter += rowSize)
            {
                Console.Write(
                    BitConverter.ToString(bytes, iter, rowSize));
                Console.WriteLine("-");
            }

            Console.WriteLine(BitConverter.ToString(bytes, iter));
            Console.WriteLine();
        }
        #endregion

        #region SMSWeb

        JavaScriptSerializer Js = new JavaScriptSerializer();
        protected string TransactionLimit()
        {
            EMSMSSettingsMaster objSMSSM = new EMSMSSettingsMaster();
            bool connected = true;
            string TransactionLimit;
            if (connected)
            {
                try
                {
                    var SMSSetting = db.EMSMSSettingsMasters.Select(model => new { model.UserName, model.Password, model.BalanceURL }).FirstOrDefault();

                    HttpWebRequest myReq = (HttpWebRequest)WebRequest.Create("" + SMSSetting.BalanceURL + "?userId=" + SMSSetting.UserName + "&password=" + SMSSetting.Password + "&format=json");

                    HttpWebResponse myResp = (HttpWebResponse)myReq.GetResponse();
                    System.IO.StreamReader respStreamReader = new System.IO.StreamReader(myResp.GetResponseStream());
                    string responseString = respStreamReader.ReadToEnd();
                    SMSGatewayJsonResponse JResponse = (SMSGatewayJsonResponse)Js.ConvertToType<SMSGatewayJsonResponse>(Js.DeserializeObject(responseString));
                    myResp.Close();
                    objSMSSM = db.EMSMSSettingsMasters.Find(1);
                    objSMSSM.CreditAvailable = JResponse.smsBalance;
                    db.SaveChanges();
                    return TransactionLimit = JResponse.smsBalance.ToString();
                }
                catch (Exception ex)
                {
                    return TransactionLimit = "Connection Not Available";
                }
            }
            else
            {
                return TransactionLimit = "Connection Not Available";
            }
        }

        public string SMSWebRequest(string strPhoneNumber, string strFlag, Hashtable hsTableID, string strMessage, int SMSTemplateID)
        {
            string Status;
            EMSMSSendDetails objESSD = new EMSMSSendDetails();
            string strURL = db.EMSMSSettingsMasters.Select(model => model.SMSURL).FirstOrDefault();

            string req;

            req = strURL.Replace("MobileNo", strPhoneNumber).Replace("Message", Uri.EscapeDataString(strMessage));

            try
            {
                System.Net.ServicePointManager.ServerCertificateValidationCallback = delegate (object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors) { return true; };
                ServicePointManager.Expect100Continue = true;
                ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;

                HttpWebRequest myReq = (HttpWebRequest)WebRequest.Create(req);
                HttpWebResponse myResp = (HttpWebResponse)myReq.GetResponse();
                System.IO.StreamReader respStreamReader = new System.IO.StreamReader(myResp.GetResponseStream());
                string responseString = respStreamReader.ReadToEnd();
                myResp.Close();
            }
            catch (Exception ex)
            {
                Status = ex.Message;
            }
            try
            {
                string strPhone = "";
                int isendid = 0;
                int SendId = Convert.ToInt32(db.EMSMSSendDetailss.Max(model => (int?)model.AutoID) ?? 0) + 1;
                foreach (DictionaryEntry entry in hsTableID)
                {
                    strPhone = entry.Value.ToString();
                    objESSD = new EMSMSSendDetails();
                    objESSD.AutoID = SendId + isendid;
                    objESSD.Content = strMessage.ToString();
                    objESSD.EntryDate = DateTime.Now;

                    objESSD.SMSDate = DateTime.Now;
                    objESSD.SMSTemplateID = SMSTemplateID;
                    objESSD.SMSTo = strPhone;
                    if (strFlag == "E")
                    {
                        objESSD.PRLEmployeeID = Convert.ToInt16(entry.Key);
                    }
                    if (strFlag == "S")
                    {
                        objESSD.StudentID = Convert.ToInt16(entry.Key);
                    }
                    if (strFlag != "L")
                    {
                        objESSD.EntryUserID = (int)Session["UID"];
                        objESSD.UpdateUserID = (int)Session["UID"];
                    }
                    objESSD.Notification = "S";
                    objESSD.UpdateDate = DateTime.Now;
                    isendid = isendid + 1;
                    db.EMSMSSendDetailss.Add(objESSD);
                }
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                return Status = ex.Message;

            }
            return Status = "Success";
        }
        #endregion

        #region DPI Checking For Images
        [HttpPost]
        public JsonResult CheckPhotoDPI(HttpPostedFileBase FileName, string Type)
        {
            string msg = "";
            try
            {
                Random RM = new Random();
                int RNum = RM.Next(6, 100000);
                var ImgName = RNum.ToString() + Session.SessionID;
                if (FileName != null)
                {
                    if (FileName.FileName != "" && FileName.FileName != "noImage.png" && FileName != null)
                    {
                        string Fextension = Path.GetExtension(FileName.FileName);
                        FileName.SaveAs(Server.MapPath("~") + "\\Temp\\" + ImgName + ".jpg");
                    }
                    var path = Server.MapPath("~") + "\\Temp\\" + ImgName + ".jpg";
                    System.Drawing.Image image = System.Drawing.Image.FromFile(path);

                    var dpiX = image.HorizontalResolution;
                    var dpiY = image.VerticalResolution;
                    if (dpiX < 14 && dpiY < 14)
                    {
                        image.Dispose();
                        System.IO.File.Delete(path);
                        msg = Type + "'s Photo Resolution Quality is Low, Please Reupload Other Photo";
                        return Json(msg);
                    }

                }
            }

            catch (Exception ex)
            {
                return Json(ex.Message);
            }
            return Json(msg);

        }
        #endregion

    }

}using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Data.SqlClient;
using System.IO;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Web.Security;
using CampusCare.Controllers;
namespace CampusCare.Models
{
    public partial class DbCampusContext
    {
        public string GetConnectionString()
        {
            return System.Configuration.ConfigurationManager.ConnectionStrings["ConnectionString"].ToString();
        }
        public Dictionary<string, object> BindOnloadData()
        {
            Dictionary<string, object> lstobj = new Dictionary<string, object>();
            if (Convert.ToString(HttpContext.Current.Session["UsertypeID"]) == "3" || Convert.ToString(HttpContext.Current.Session["UsertypeID"]) == "2")
            {
                int StudentSession = 0;
                int ParentID = 0;
                if (Convert.ToString(HttpContext.Current.Session["UsertypeID"]) == "3")
                {
                    ParentID = (int)HttpContext.Current.Session["ParentsID"];
                }
                int AcaStart = (int)HttpContext.Current.Session["AcaStart"];
                if (HttpContext.Current.Session["StudentID"] == null)
                {
                    StudentSession = (from SUB in
                                          (from SM in SIStudentMasters
                                           join SYS in SIStudentYearWiseDetails on SM.StudID equals SYS.StudID
                                           join CM in MTClassMasters on SYS.ClsID equals CM.AutoID
                                           where SM.PareD == ParentID && SYS.StudStatus == "S" && SYS.AcaStarting == AcaStart
                                           select new { SM.StudID, CM.PriorityNo }).Distinct()
                                      orderby SUB.PriorityNo descending
                                      select new { SUB.StudID, SUB.PriorityNo }).ToList().FirstOrDefault().StudID;
                }
                else
                {
                    StudentSession = (int)HttpContext.Current.Session["StudentID"];
                }


                lstobj.Add("AcaStart", (from sq in
                                            (from SYD in SIStudentYearWiseDetails
                                             join MTA in MTAcademicSessionMasters on SYD.AcaStarting equals MTA.AcaStart
                                             where SYD.AcaStarting != 0 && SYD.StudID == StudentSession && SYD.StudStatus == "S" && MTA.ShowFlag == "Y"
                                             select new { Value = SYD.AcaStarting.ToString(), Text = MTA.AcaStart + "-" + (MTA.AcaStart + 1).ToString() }).Distinct()
                                        orderby sq.Value descending
                                        select new SelectListItem() { Value = sq.Value, Text = sq.Text }).ToList());


                lstobj.Add("Student", (from sub in
                                           ((from SM in SIStudentMasters
                                             join SYD in SIStudentYearWiseDetails on SM.StudID equals SYD.StudID
                                             where SM.PareD == ParentID && SYD.StudStatus == "S" && SYD.AcaStarting == AcaStart
                                             select new SelectListItem() { Value = SM.StudID.ToString(), Text = SM.FName }).Except
                                               (from SM in SIStudentMasters
                                                join SYD in SIStudentYearWiseDetails on SM.StudID equals SYD.StudID
                                                join ST in SIStudentTCDetail on SM.StudID equals ST.StudID
                                                where SM.PareD == ParentID && SYD.StudStatus == "T"
                                                select new SelectListItem() { Value = SM.StudID.ToString(), Text = SM.FName }))
                                       select new SelectListItem() { Value = sub.Value.ToString(), Text = sub.Text })
                                    .ToList());
                //lstobj.Add("Student", (from SM in SIStudentMasters
                //                       join SYD in SIStudentYearWiseDetails on SM.StudID equals SYD.StudID
                //                       where SM.PareD == ParentID && SYD.StudStatus == "S" && SYD.AcaStarting == AcaStart
                //                       select new SelectListItem() { Value = SM.StudID.ToString(), Text = SM.FName }).ToList());
                lstobj.Add("StudentID", StudentSession);
            }
            else
            {
                lstobj.Add("AcaStart", MTAcademicSessionMasters.ToList().OrderByDescending(x => x.AcaStart).ToList());
            }
            //lstobj.Add("InstitutionMaster", MTInstitutionMasters.ToList());
            return lstobj;
        }
        
        public DataSet GetSPFromSql(string spname, SqlParameter[] param)
        {
            SqlConnection con = new SqlConnection(GetConnectionString());
            if (con.State == ConnectionState.Closed)
                con.Open();
            SqlCommand cmd = new SqlCommand(spname, con);
            cmd.CommandTimeout = 0;
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.AddRange(param);

            DataSet ds = new DataSet();
            SqlDataAdapter adp = new SqlDataAdapter(cmd);            
            adp.Fill(ds);

            cmd.Dispose();
            con.Close();
            return ds;
        }

        public List<MTStateMasterGrid> fillStateGrid()
        {
            List<MTStateMasterGrid> ls = new List<MTStateMasterGrid>();
            var obj = from sm in MTStateMasters
                      join cm in MTCountryMasters on sm.CountryID equals cm.AutoID
                      where sm.AutoID != 0
                      orderby cm.CountryName, sm.StateName
                      select new { CountryID = cm.AutoID, CountryName = cm.CountryName, StateID = sm.AutoID, StateName = sm.StateName };

            foreach (var objItem in obj)
            {
                MTStateMasterGrid lsItem = new MTStateMasterGrid();
                lsItem.CountryID = objItem.CountryID;
                lsItem.CountryName = objItem.CountryName;
                lsItem.StateID = objItem.StateID;
                lsItem.StateName = objItem.StateName;
                ls.Add(lsItem);
            }
            return ls;
        }

        public List<MTCityMasterGrid> fillCityGrid()
        {
            List<MTCityMasterGrid> ls = new List<MTCityMasterGrid>();
            var obj = from ct in MTCityMasters
                      join sm in MTStateMasters on ct.StateID equals sm.AutoID
                      join cm in MTCountryMasters on sm.CountryID equals cm.AutoID
                      where ct.AutoID != 0
                      orderby cm.CountryName, sm.StateName, ct.CityName
                      select new { CountryName1 = cm.CountryName, StateID = sm.AutoID, StateName1 = sm.StateName, CityID = ct.AutoID, CityName1 = ct.CityName };

            foreach (var objItem in obj)
            {
                MTCityMasterGrid lsItem = new MTCityMasterGrid();
                lsItem.CountryName = objItem.CountryName1;
                lsItem.StateName = objItem.StateName1;
                lsItem.CityID = objItem.CityID;
                lsItem.CityName = objItem.CityName1;
                ls.Add(lsItem);
            }
            return ls;
        }


        public string[] FillRequestQueryString()
        {
            //string[] id = new string[4];
            //string[] querystring = HttpUtility.UrlDecode(HttpContext.Current.Request.QueryString.ToString()).Split('/');           
            //id[0] = querystring[0];//HttpContext.Current.Request.QueryString["parentid"];
            //id[1] = querystring[1];//HttpContext.Current.Request.QueryString["menuid"];
            //if (querystring.Length > 1)
            //{
            //    int menuid = Convert.ToInt32(id[1]);
            //    var obj = (from mt in MTMenuMasters
            //               where mt.MenuID == menuid
            //               select new { mt.MenuName, mt.MenuCaption }).First();

            //    id[2] = obj.MenuName;
            //    id[3] = obj.MenuCaption;
            //}

            //return id;
            string[] id = new string[5];
            //id[0] = HttpContext.Current.Request.QueryString["parentid"];
            id[1] = HttpContext.Current.Request.QueryString["menuid"];
            int menuid = Convert.ToInt32(HttpContext.Current.Request.QueryString["menuid"]);
            var obj = (from mt in MTMenuMasters
                       where mt.MenuID == menuid
                       select new { mt.MenuName, mt.MenuCaption,mt.NavigationUrl,mt.ParentID }).First();
            id[0] = obj.ParentID.ToString();
            id[2] = obj.MenuName;
            id[3] = obj.MenuCaption;
            id[4] = obj.NavigationUrl;
            return id;
        }
        public List<MTMenuMaster> FillMenu(int UID)
        {
            //int UID = (int)HttpContext.Current.Session["UID"];
            List<MTMenuMaster> all = new List<MTMenuMaster>();
            var ss = from mtm in MTMenuMasters
                     join mtd in MTUserModuleMasters on mtm.ModuleID equals mtd.ModuleID
                     join mtl in MTMenulimitmasters on mtm.MenuID equals mtl.MenuID
                     //join mtl in db.MTMenulimitmasters on new { mtm.MenuID, mtm.ModuleID} equals new {mtl.MenuID, mtl.ModuleID}
                     orderby mtd.Priority, mtm.PriorityNo,mtm.MenuID
                     where mtl.UID == UID && mtl.VisibleOption == "Y"
                     select new { mtm.MenuID, mtm.ParentID, mtm.ModuleID, mtm.MenuCaption, mtm.NavigationUrl, mtm.PriorityNo };
            foreach (var item in ss.ToList())
            {
                MTMenuMaster lst = new MTMenuMaster();
                lst.MenuID = item.MenuID;
                lst.ParentID = item.ParentID;
                lst.ModuleID = item.ModuleID;
                lst.MenuCaption = item.MenuCaption;
                //lst.NavigationUrl = (item.NavigationUrl == "#" ? "#" : item.NavigationUrl + "?"+ HttpUtility.UrlEncode(item.ParentID.ToString() + "/" + item.MenuID.ToString()));
                //lst.NavigationUrl = (item.NavigationUrl == "#" ? "#" : item.NavigationUrl + "?" + item.ParentID.ToString() + "/" + item.MenuID.ToString());
                //parentid=" + item.ParentID.ToString() + "&
                lst.NavigationUrl = (item.NavigationUrl == "#" ? "#" : item.NavigationUrl + "?menuid=" + item.MenuID.ToString());
                lst.PriorityNo = item.PriorityNo;
                all.Add(lst);
            }
            return all.ToList();
            //ViewBag["MenuMaster"] = all.OrderBy(a => a.MenuID).ToList();
        }

        public List<MTMenulimitmaster> FillUserMenuPermission(int UID, int MenuID)
        {            
            var ss = from m in MTMenulimitmasters
                     where m.UID == UID && m.MenuID == MenuID
                     select m;
            return ss.ToList();
        }
        public List<MTMenulimitmaster> FillUserMenuPermission(int UID, string MenuName)
        {
            var ss = from m in MTMenulimitmasters
                     join mm in MTMenuMasters on m.MenuID equals mm.MenuID
                     where m.UID == UID && mm.MenuName == MenuName
                     select m;
            return ss.ToList();
        }

        public List<SelectListItem> FillAcademicSession()
        {
            List<SelectListItem> ddlAca = new List<SelectListItem>();
            ddlAca = (from mta in MTAcademicSessionMasters
                      //where mta.AcaStartDate <= DateTime.Now && mta.AcaEndDate >= DateTime.Now
                      orderby mta.AcaStart descending
                      select new SelectListItem()
                      {
                          Text = mta.AcaStart.ToString() + "-" + (mta.AcaStart + 1).ToString(),
                          Value = mta.AcaStart.ToString()
                      }).ToList();
            return ddlAca;
        }

        public string CreatePasswordHash(string pwd, string salt)
        {
            //pwd = FormsAuthentication.HashPasswordForStoringInConfigFile(pwd.ToLower(), "sha1");
            string saltAndPwd = String.Concat(pwd, salt);
            string hashedPwd = FormsAuthentication.HashPasswordForStoringInConfigFile(saltAndPwd.ToLower(), "sha1");
            return hashedPwd;
        }

        public static string RenderPertialViewtoString(Controller controller, string ViewName)
        {
            try
            {
                using (StringWriter sw = new StringWriter())
                {
                    ViewEngineResult viewResult = ViewEngines.Engines.FindPartialView(controller.ControllerContext, ViewName);
                    
                    ViewContext viewContext = new ViewContext(controller.ControllerContext, viewResult.View, controller.ViewData, controller.TempData, sw);
                    viewResult.View.Render(viewContext, sw);
                    return sw.GetStringBuilder().ToString();
                }
            }
            catch (Exception ex)
            {
                return ex.Message.ToString();
            }
        }

        public static string GetAuthName(string CookieName) 
        {
            return Convert.ToString(FormsAuthentication.GetAuthCookie(CookieName, true));
        }

        public virtual List<CampusCare.RestServiceImpl.FeeDefaulterDetails> spHODSchoolFeeDefaulter(int ArgSchoolID, int ArgAcastart, string FeeType, string ArgClass, string ArgIntFGID, string ArgIntall, string ArgAccountType, string Flag)
        {
            SqlParameter[] param = new SqlParameter[] 
                { 
                    new SqlParameter("@ArgSchoolID",ArgSchoolID),
                    new SqlParameter("@ArgYStart",ArgAcastart),
                    new SqlParameter("@ArgFeeType",FeeType)  ,
                    new SqlParameter("@ArgClass",ArgClass)  ,
                    new SqlParameter("@ArgIntFGID",ArgIntFGID)  ,
                    new SqlParameter("@ArgIntall",ArgIntall)  ,
                    new SqlParameter("@ArgAccountType",ArgAccountType),
                    new SqlParameter("@Flag",Flag)  
                };

            return Database.SqlQuery<CampusCare.RestServiceImpl.FeeDefaulterDetails>("FeeReconcillationWCF @ArgSchoolID,@ArgYStart,@ArgFeeType,@ArgClass,@ArgIntFGID,@ArgIntall,@ArgAccountType,@Flag", param).ToList();
        }

        public virtual List<MgtFeeGridData> HODFeeDefaulterSummary(int ID, int ArgAcaStart, int ArgSchoolID, string ArgCriteria, int FIID)
        {
            SqlParameter[] param = new SqlParameter[] 
                { 
                    new SqlParameter("@ArgID",ID),
                    new SqlParameter("@ArgAcastart",ArgAcaStart),                    
                    new SqlParameter("@ArgSchoolID",ArgSchoolID),
                   new SqlParameter("@ArgCriteria",ArgCriteria) ,
                   new SqlParameter("@ArgFIID",FIID) 
                       
                };
            return Database.SqlQuery<MgtFeeGridData>("HODFeeDefaulterSummary @ArgID,@ArgAcastart,@ArgSchoolID,@ArgCriteria,@ArgFIID", param).ToList();
        }

        public virtual List<MgtFeeGridData> HODFeeDetailsStudentWise(string FromDate, string ToDate, int Acastart, int SchoolID, int FIID, int StudentID, string Criteria, int UserReceiptNo)
        {
            SqlParameter[] para = new SqlParameter[]
            {
               new SqlParameter("@ArgFromDate",FromDate),
               new SqlParameter("@ArgToDate",ToDate),
               new SqlParameter("@ArgAcaStart",Acastart),
               new SqlParameter("@ArgSchoolID",SchoolID), 
               new SqlParameter("@ArgInstalID",FIID),
               new SqlParameter("@ArgStudentID",StudentID),
                new SqlParameter("@ArgCriteria",Criteria),
            new SqlParameter("@ArURecNo",UserReceiptNo)
            };
            return Database.SqlQuery<MgtFeeGridData>("HODFeeDetailsStudentWise @ArgFromDate,@ArgToDate,@ArgAcaStart,@ArgSchoolID,@ArgInstalID,@ArgStudentID,@ArgCriteria,@ArURecNo", para).ToList();
        }
        
        #region Chart

        public List<Chart> DashBoardChart(int ArgSchoolID, int ArgAcaStart,string ArgFlag)
        {
            SqlParameter[] param = new SqlParameter[]
            { 
                new SqlParameter("@ArgSchoolID",ArgSchoolID),
                new SqlParameter("@ArgAcaStart",ArgAcaStart),
                new SqlParameter("@ArgFlag",ArgFlag)
            };
            return Database.SqlQuery<Chart>("DashBoardChart @ArgSchoolID,@ArgAcaStart,@ArgFlag", param).ToList();
        }


        public virtual DataSet SchoolAnalysis(int ArgSchoolID, int ArgAcaStart, string ArgSelField, string ArgGroup, int ArgModuleID, int ArgLibraryID)
        {
            SqlParameter[] param = new SqlParameter[] 
                { 
                    new SqlParameter("@ArgAcastart",ArgAcaStart),
                    new SqlParameter("@ArgSchoolID",ArgSchoolID),
                    new SqlParameter("@ArgSelFields", ArgSelField),
                    new SqlParameter("@ArgGroup", ArgGroup),
                    new SqlParameter("@ArgModuleID", ArgModuleID)  ,
                    new SqlParameter("@ArgLibraryID", ArgLibraryID)  
                };
            DataSet ds = GetSPFromSql("SchoolAnalysis", param);
            return ds;

        }
        public virtual DataSet SchoolFeeAnalysis(int ArgSchoolID, int ArgAcaStart, string ArgSelField, string ArgGroup, int ArgModuleID, int ArgLibraryID)
        {
            SqlParameter[] param = new SqlParameter[] 
                { 
                    new SqlParameter("@ArgAcastart",ArgAcaStart),
                    new SqlParameter("@ArgSchoolID",ArgSchoolID),
                    new SqlParameter("@ArgSelFields", ArgSelField),
                    new SqlParameter("@ArgGroup", ArgGroup),
                    new SqlParameter("@ArgModuleID", ArgModuleID)  ,
                    new SqlParameter("@ArgLibraryID", ArgLibraryID)  
                };
            DataSet ds = GetSPFromSql("SchoolFeeAnalysis", param);
            return ds;
        }

        #endregion

        #region Comman Function

        public List<MTDDLMaster> fillDDLOption()
        {
            List<MTDDLMaster> ddl = new List<MTDDLMaster>();
            MTDDLMaster obj = new MTDDLMaster();
            obj.DDLID = "1";
            obj.DDLName = "Crystal Report";
            ddl.Add(obj);
            obj = new MTDDLMaster();
            obj.DDLID = "2";
            obj.DDLName = "PDF";
            ddl.Add(obj);
            return ddl;
        }

        public List<MTDDLMaster> fillDDLOrientation()
        {
            List<MTDDLMaster> ddl = new List<MTDDLMaster>();
            MTDDLMaster obj = new MTDDLMaster();
            obj.DDLID = "1";
            obj.DDLName = "Portrait";
            ddl.Add(obj);
            obj = new MTDDLMaster();
            obj.DDLID = "2";
            obj.DDLName = "Landscape";
            ddl.Add(obj);
            return ddl;
        }

        public List<MTDDLMaster> fillDDLPaperSize()
        {
            List<MTDDLMaster> ddl = new List<MTDDLMaster>();
            MTDDLMaster obj = new MTDDLMaster();
            obj.DDLID = "1";
            obj.DDLName = "A4";
            ddl.Add(obj);
            obj = new MTDDLMaster();
            obj.DDLID = "2";
            obj.DDLName = "A3";
            ddl.Add(obj);
            obj = new MTDDLMaster();
            obj.DDLID = "3";
            obj.DDLName = "Legal";
            ddl.Add(obj);
            return ddl;
        }
        #endregion

        #region 1. Preference
        public string RemoveSpecialChar(string value)
        {
            SqlParameter[] param = new SqlParameter[] { 
            new SqlParameter("@value", value)
            };
            return Database.SqlQuery<string>("Sp_RemoveSpecialChar @value", param).SingleOrDefault();
        }

        public void MasterCreation(string Fields, string Type)
        {
            SqlParameter[] param = new SqlParameter[] 
                { 
                    new SqlParameter("@Fields",Fields),
                    new SqlParameter("@Type",Type)
                 };
            Database.ExecuteSqlCommand("SP_MasterCreation  @Fields,@Type", param);
        }

        public virtual DataSet SPGetExcelData(string Fields)
        {
            SqlParameter[] param = new SqlParameter[] 
                { 
                    new SqlParameter("@Fields",Fields)
                };
            return GetSPFromSql("SPGetExcelData", param);
        }

        public virtual DataSet GetSelectedDataValue(string FDate, string TDate, int ClassID, int SecId, string InsertColumn, int SchoolId, int AcaStart)
        {
            SqlParameter[] param = new SqlParameter[] 
                { 
                    new SqlParameter("@FDate",FDate),
                    new SqlParameter("@TDate",TDate),
                    new SqlParameter("@ClassID",ClassID),
                    new SqlParameter("@SecId",SecId),
                    new SqlParameter("@InsertColumn",InsertColumn),
                    new SqlParameter("@SchoolId",SchoolId),
                    new SqlParameter("@AcaStart",AcaStart)
                };
            return GetSPFromSql("SPGetSelectedDataValue", param);
        }


        public virtual List<TempExcelLogDetail> GetExcelLogData(string fromdt, string todt, int userid)
        {
            SqlParameter[] param = new SqlParameter[] 
                { 
                    new SqlParameter("@FDate",fromdt),
                    new SqlParameter("@TDate",todt),
                    new SqlParameter("@User",userid)
                };
            return Database.SqlQuery<TempExcelLogDetail>("GetExcelLogData @FDate,@TDate,@User", param).ToList();
        }

        public virtual DataSet DropReports(int ArgUserID, int ArgMinReport, int ArgMaxReport, int ArgModuleID)
        {
            SqlParameter[] param = new SqlParameter[]
                {
                    new SqlParameter("@ArgUserID",ArgUserID),
                     new SqlParameter("@ArgMinReport",ArgMinReport),
                    new SqlParameter("@ArgMaxReport",ArgMaxReport),
                    new SqlParameter("@ArgModuleID ",ArgModuleID)
                };
            DataSet ds = GetSPFromSql("DropReport", param);
            return ds;

        }



    
        public void spPrefGroupUpdateDelete(int GroupId)
        {
            SqlParameter[] param = new SqlParameter[]
                {
                    new SqlParameter("@GroupId",GroupId)
                };
            Database.ExecuteSqlCommand("spPrefGroupUpdateDelete  @GroupId", param);
        }
        public virtual List<GetGridData> PrefUserBindUserManagement(int ArgUID, int ArgUserGroupId)
        {
            SqlParameter[] param = new SqlParameter[] 
                { 
                    new SqlParameter("@ArgUID",ArgUID),
                    new SqlParameter("@ArgUserGroupId",ArgUserGroupId)         
                };
            return Database.SqlQuery<GetGridData>("PrefUserBindUserManagement @ArgUID,@ArgUserGroupId", param).ToList();
        }


        public virtual List<GetGridData> spCalendar(int intMonth, int intYear, int intTotalDays)
        {
            SqlParameter[] param = new SqlParameter[] 
                { 
                    new SqlParameter("@intMonth",intMonth),
                    new SqlParameter("@intYear",intYear),
                    new SqlParameter("@intTotalDays",intTotalDays)
                };
            return Database.SqlQuery<GetGridData>("spCalendar @intMonth,@intYear,@intTotalDays", param).ToList();
        }
        #endregion

        #region 2. Registration
        public virtual List<GetGridData> SRSelectionProcessDisplayGrid(int ArgSchoolID, int ArgAcaStart, string ArgCriteria, int ArgClassID, int ArgSelectstatus, int FromRegNo, int ToRegNo)
        {
            SqlParameter[] param = new SqlParameter[]
                {
                    new SqlParameter("@ArgSchoolID",ArgSchoolID),
                    new SqlParameter("@ArgAcaStart",ArgAcaStart),
                    new SqlParameter("@ArgCriteria",ArgCriteria),
                    new SqlParameter("@ArgClassID",ArgClassID),
                    new SqlParameter("@ArgSelectstatus",ArgSelectstatus),
                     new SqlParameter("@FromRegNo",FromRegNo),
                      new SqlParameter("@ToRegNo",ToRegNo)
                };
            return Database.SqlQuery<GetGridData>("SRSelectionProcessDisplayGrid @ArgSchoolID,@ArgAcaStart,@ArgCriteria,@ArgClassID,@ArgSelectstatus,@FromRegNo,@ToRegNo", param).ToList();
        }
        public string SlotChecking(int SAcaStart, int? ClassID)
        {
            int Noofstudent = 0;
            string SlID = "";
            string Message = "";
            int countStudent = 0;
            int? noofStudent = null;
            int SlotID = 0;
            string get = string.Empty;
            List<SlotIds> S = GetSlotIDs(SAcaStart, ClassID);
            SlID = S[0].SlotID;

            if (!string.IsNullOrEmpty(SlID))
            {
                string[] RID = SlID.Split(',');
                if (RID.Length > 1)
                {
                    for (int i = 0; i < RID.Length; i++)
                    {
                        int k = Convert.ToInt32(RID[i]);
                        countStudent = (from m in SRStudentTimeSlotAssigners
                                        where m.ClassIDs == ClassID && m.SlotIDs == k
                                        select new { ArstudentID = m.ARStudentIDs }
                                        ).Count();


                        var No = (from m in SRTimeSlotMasters
                                  where m.AcaStarts == SAcaStart && m.ClassIDs == ClassID
                                  && m.SlotIDs == k
                                  select new { NoofStudent = m.NumberOfStudents }).FirstOrDefault();

                        noofStudent = No.NoofStudent;
                        if (countStudent >= noofStudent)
                        {
                            if (i == RID.Length - 1)
                            {
                                get = "A";
                                break;
                            }
                            continue;
                        }
                        else
                        {

                            break;
                        }
                    }


                    if (!string.IsNullOrEmpty(get))
                    {
                        Message = "Maximum no. of student has been assigned to all slot!";
                    }

                }
                else
                {
                    var SloID = (from m in SRTimeSlotMasters
                                 where m.AcaStarts == SAcaStart && m.ClassIDs == ClassID
                                 orderby m.Dates, m.StartTimes, m.EndTimes, m.SlotIDs
                                 select new { SlotID = m.SlotIDs }
                               ).FirstOrDefault();
                    SlotID = SloID.SlotID;
                    var NUMSTD = (from m in SRTimeSlotMasters
                                  where m.AcaStarts == SAcaStart && m.ClassIDs == ClassID && m.SlotIDs == SlotID
                                  orderby m.Dates, m.StartTimes, m.EndTimes, m.SlotIDs
                                  select new { NOF = m.NumberOfStudents }
                              ).FirstOrDefault();
                    Noofstudent = Convert.ToInt32(NUMSTD.NOF);
                    countStudent = SRStudentTimeSlotAssigners.Where(m => m.SlotIDs == SlotID && m.ClassIDs == ClassID).Count();

                    if (countStudent >= Noofstudent)
                    {
                        Message = "Maximum no. of student has been assigned to slot assigned to this class";
                    }

                }
            }
            return Message;
        }


        public void TimeSlotCreation(int AcaStart, int SchID, int CLID, int ARStudentID, int UID)
        {

            if (SRStudentTimeSlotAssigners.Where(m => m.ARStudentIDs == ARStudentID).Count() == 0)
            {
                int? countStudent = 0;
                int? noofStudent = 0;
                int SlotID = 0;

                string SlID = "";
                List<SlotIds> S = GetSlotIDs(AcaStart, CLID);
                SlID = S[0].SlotID;

                if (!string.IsNullOrEmpty(SlID))
                {
                    string[] RID = SlID.Split(',');
                    if (RID.Length > 1)
                    {
                        for (int i = 0; i < RID.Length; i++)
                        {
                            int k = Convert.ToInt32(RID[i]);
                            countStudent = (from m in SRStudentTimeSlotAssigners
                                            where m.ClassIDs == CLID && m.SlotIDs == k
                                            select new { ArstudentID = m.ARStudentIDs }
                                            ).Count();


                            var No = (from m in SRTimeSlotMasters
                                      where m.AcaStarts == AcaStart && m.ClassIDs == CLID
                                      && m.SlotIDs == k
                                      select new { NoofStudent = m.NumberOfStudents }).FirstOrDefault();

                            noofStudent = No.NoofStudent;


                            if (countStudent >= noofStudent)
                            {
                                if (i == RID.Length - 1)
                                {
                                    break;
                                }
                                continue;
                            }
                            else
                            {
                                SlotID = Convert.ToInt32(RID[i]);
                                break;
                            }
                        }
                    }
                    else
                    {
                        var SloID = (from m in SRTimeSlotMasters
                                     where m.AcaStarts == AcaStart && m.ClassIDs == CLID
                                     orderby m.Dates, m.StartTimes, m.EndTimes, m.SlotIDs
                                     select new { SlotID = m.SlotIDs }
                                   ).FirstOrDefault();
                        SlotID = SloID.SlotID;


                    }
                }
                if (SlotID != 0)
                {
                    SRStudentTimeSlotAssigner SA = new SRStudentTimeSlotAssigner();
                    SA.ARStudentIDs = ARStudentID;
                    SA.SlotIDs = SlotID;
                    SA.EntryUserIDs = UID;
                    SA.EntryDates = DateTime.Now;
                    SA.UpdateUserIDs = null;
                    SA.UpdateDates = null;
                    SA.SelectStatuss = 0;
                    SA.ClassIDs = CLID;
                    SRStudentTimeSlotAssigners.Add(SA);
                    SaveChanges();
                }
            }
            else
            {
                //  return "";
            }
        }


        public virtual List<GetGridData> SPAgeGetDisplay(DateTime ArgStartDate, DateTime ArgEndDate)
        {
            SqlParameter[] param = new SqlParameter[]
                {
                    new SqlParameter("@ArgStartDate",ArgStartDate),
                    new SqlParameter("@ArgEndDate",ArgEndDate)
                };
            return Database.SqlQuery<GetGridData>("SPAgeGetDisplay  @ArgStartDate,@ArgEndDate", param).ToList();
        }

        public virtual List<GetGridData> SRSelectionProcessDisplayGrid(int ArgSchoolID, int ArgAcaStart, string ArgCriteria, int ArgClassID, int ArgSelectstatus)
        {
            SqlParameter[] param = new SqlParameter[]
                {
                    new SqlParameter("@ArgSchoolID",ArgSchoolID),
                    new SqlParameter("@ArgAcaStart",ArgAcaStart),
                    new SqlParameter("@ArgCriteria",ArgCriteria),
                    new SqlParameter("@ArgClassID",ArgClassID),
                    new SqlParameter("@ArgSelectstatus",ArgSelectstatus)
                };
            return Database.SqlQuery<GetGridData>("SRSelectionProcessDisplayGrid @ArgSchoolID,@ArgAcaStart,@ArgCriteria,@ArgClassID,@ArgSelectstatus", param).ToList();
        }


        public virtual List<SRRegistrationStartDetails> SRRegistrationStartDetailsGrid(int ArgSchoolID, int ArgAcaStart, int ArgORID)
        {
            SqlParameter[] param = new SqlParameter[]
                {
                    new SqlParameter("@ArgSchoolID",ArgSchoolID),
                    new SqlParameter("@ArgAcaStart",ArgAcaStart),
                    new SqlParameter("@ArgORID",ArgORID)
                };
            return Database.SqlQuery<SRRegistrationStartDetails>("SRRegistrationStartDetailsGrid @ArgSchoolID,@ArgAcaStart,@ArgORID", param).ToList();
        }


        public virtual List<GetGridData> SRRegistrationStartDetailsSAVE(int ArgSchoolID, int ArgAcaStart, int ArgClassID, DateTime @ArgStartDate, DateTime @ArgEndDate,
          string @ArgStartTime, string @ArgEndTime, DateTime @ArgResultDate, string @ArgResultTime, DateTime @ArgFinalDate, string @ArgFinalTime,
          int @ArgORID, string @ArgStatus, int @ArgEntryUID, int @RegistrationFee)
        {


            SqlParameter[] param = new SqlParameter[]
                {
                    new SqlParameter("@ArgSchoolID",ArgSchoolID),
                    new SqlParameter("@ArgAcaStart",ArgAcaStart),
                    new SqlParameter("@ArgClassID",ArgClassID),
                    new SqlParameter("@ArgStartDate",@ArgStartDate),
                    new SqlParameter("@ArgEndDate",@ArgEndDate),
                    new SqlParameter("@ArgStartTime",@ArgStartTime),
                    new SqlParameter("@ArgEndTime",@ArgEndTime),
                    new SqlParameter("@ArgResultDate",@ArgResultDate),
                    new SqlParameter("@ArgResultTime",@ArgResultTime),
                    new SqlParameter("@ArgFinalDate",@ArgFinalDate),
                    new SqlParameter("@ArgFinalTime",@ArgFinalTime),
                    new SqlParameter("@ArgORID",@ArgORID),
                    new SqlParameter("@ArgStatus",@ArgStatus),
                    new SqlParameter("@ArgEntryUID",@ArgEntryUID),
                    new SqlParameter("@ArgRegistrationFee",@RegistrationFee),

                };
            return Database.SqlQuery<GetGridData>("SRRegistrationStartDetailsSAVE @ArgSchoolID,@ArgAcaStart,@ArgClassID,@ArgStartDate,@ArgEndDate,@ArgStartTime,@ArgEndTime,@ArgResultDate,@ArgResultTime,@ArgFinalDate,@ArgFinalTime,@ArgORID, @ArgStatus,@ArgEntryUID, @ArgRegistrationFee", param).ToList();
        }
        public virtual List<NurAdmissionSearchOnline_View> SpFillAdmProcessingSearchNur(string WhereCondition, string RegistrationType)
        {
            SqlParameter[] param = new SqlParameter[]
                {
                    new SqlParameter("@WhereCondition",WhereCondition),
                    new SqlParameter("@RegistrationType",RegistrationType),

                };
            return Database.SqlQuery<NurAdmissionSearchOnline_View>("SpFillAdmProcessingSearchNur @WhereCondition, @RegistrationType", param).ToList();
        }
        #endregion

        #region 3. Student Information
        public List<SIDirectEntry> StudentImport(DataTable dt, int UID, int AcaStart, int SchoolID)
        {
            SqlParameter[] param = new SqlParameter[]
            {
                new SqlParameter("@UID",UID),
                new SqlParameter("@SchoolID",SchoolID),
                new SqlParameter("@AcaStart",AcaStart),
                new SqlParameter("@Argdt",SqlDbType.Structured)
            };
            param[3].TypeName = "ut_StudentImportData";
            param[3].Value = dt;

            return Database.SqlQuery<SIDirectEntry>("StudentImport @UID, @SchoolID,@AcaStart,@Argdt", param).ToList();
        }

        public virtual List<GetGridData> AttendanceDetailsForTCStudent(int ArgSchoolID, int ArgAcaStart, int ArgStudent, string FromDate, string ToDate)
        {
            SqlParameter[] param = new SqlParameter[]
                {
                    new SqlParameter("@ArgSchoolID",ArgSchoolID),
                    new SqlParameter("@ArgAcaStart",ArgAcaStart),
                    new SqlParameter("@ArgStudent",ArgStudent),
                    new SqlParameter("@FromDate",FromDate),
                    new SqlParameter("@ToDate",ToDate)
                };
            return Database.SqlQuery<GetGridData>("AttendanceDetailsForTCStudent @ArgSchoolID,@ArgAcaStart,@ArgStudent,@FromDate,@ToDate", param).ToList();
        }
        public virtual List<GetGridData> NewAdmissionFeeNo(int ArgSchoolID, string ArgFlag)
        {
            SqlParameter[] param = new SqlParameter[] 
                {  
                    new SqlParameter("@ArgSchoolID",ArgSchoolID),
                    new SqlParameter("@ArgFlag",ArgFlag)
                };
            return Database.SqlQuery<GetGridData>("SPCREATEADMNOFEENO @ArgSchoolID,@ArgFlag", param).ToList();
        }

        public void StudentInsertFeeConcessionEntry(int ArgSchoolID, int ArgAcaStart, int ArgStudentID, int ArgConcID, int ArgUserID)
        {
            SqlParameter[] param = new SqlParameter[] 
                { 
                    new SqlParameter("@ArgSchoolID",ArgSchoolID),
                    new SqlParameter("@ArgAcaStart",ArgAcaStart),    
                    new SqlParameter("@ArgStudentID",ArgStudentID),
                    new SqlParameter("@ArgConcID",ArgConcID),
                    new SqlParameter("@ArgUserID",ArgUserID),
                 };
            Database.ExecuteSqlCommand("StudentInsertFeeConcessionEntry  @ArgSchoolID,@ArgAcaStart,@ArgStudentID,@ArgConcID,@ArgUserID", param);
        }

        public virtual List<GetGridData> spSIFillingGridForEntry(string TableName, int StudentID)
        {
            SqlParameter[] param = new SqlParameter[] 
                { 
                        new SqlParameter("@TableName",TableName),
                    new SqlParameter("@StudentID",StudentID)
                };
            return Database.SqlQuery<GetGridData>("spSIFillingGridForEntry @TableName,@StudentID", param).ToList();
        }

        public void spSIStudentDeleteResult(int StudentID)
        {
            SqlParameter[] param = new SqlParameter[] 
                { 
                    new SqlParameter("@StudentID",StudentID)                
                };
            Database.ExecuteSqlCommand("spSIStudentDelete  @StudentID", param);
        }
        public virtual List<string> spSIDeletePromotedStudent(int ArgSchoolID, int ArgAcaStart, int StudentID)
        {
            SqlParameter[] param = new SqlParameter[] 
                    { 
                        new SqlParameter("@ArgSchoolID",ArgSchoolID)  ,
                        new SqlParameter("@ArgAcaStart",ArgAcaStart) ,   
                        new SqlParameter("@StudentID",StudentID)  


                    };

            return Database.SqlQuery<string>("spSIDeletePromotedStudent @ArgSchoolID,@ArgAcaStart,@StudentID", param).ToList();
        }
        //  SPBindFieldUpdation
        public virtual DbSet<SIStudentTCDetail_View> SIStudentTCDetail_View { get; set; }

        public virtual List<GetGridData> SpRollNumberAssginer(int ArgClassID, int ArgSectionID, int ArgAcaStart, int ArgSchoolID, string ArgCondition)
        {
            SqlParameter[] param = new SqlParameter[] 
                { 
                    new SqlParameter("@ArgClassID",ArgClassID),
                    new SqlParameter("@ArgSectionID",ArgSectionID),
                    new SqlParameter("@ArgAcaStart",ArgAcaStart),
                    new SqlParameter("@ArgSchoolID",ArgSchoolID),
                    new SqlParameter("@ArgCondition",ArgCondition)
                };
            return Database.SqlQuery<GetGridData>("SpRollNumberAssginer @ArgClassID,@ArgSectionID,@ArgAcaStart,@ArgSchoolID,@ArgCondition", param).ToList();
        }

        public virtual List<GetGridData> SpStudentPopSearch(int ArgAcaStart, int ArgSchoolID, int ArgClassID, int ArgSectionID, int ArgHouseID, string @ArgStudent, string @ArgFather, string @ArgMother)
        {
            SqlParameter[] param = new SqlParameter[] 
                { 
                    new SqlParameter("@ArgAcaStart",ArgAcaStart),
                    new SqlParameter("@ArgSchoolID",ArgSchoolID),
                    new SqlParameter("@ArgClassID",ArgClassID),
                    new SqlParameter("@ArgSectionID",ArgSectionID), 
                    new SqlParameter("@ArgHouseID",ArgHouseID),                     
                    new SqlParameter("@ArgStudent",@ArgStudent),
                    new SqlParameter("@ArgFather",@ArgFather),
                    new SqlParameter("@ArgMother",@ArgMother)
                };
            return Database.SqlQuery<GetGridData>("SpStudentPopSearch @ArgAcaStart,@ArgSchoolID,@ArgClassID,@ArgSectionID,@ArgHouseID,@ArgStudent,@ArgFather,@ArgMother", param).ToList();
        }

        public virtual List<GetGridData> SIPromotionListDisplayGrid(int ArgSchoolID, int ArgAcaStart, string @ArgCriteria, string @PromotionType)
        {
            SqlParameter[] param = new SqlParameter[] 
                { 
                    new SqlParameter("@ArgAcaStart",ArgAcaStart),
                    new SqlParameter("@ArgSchoolID",ArgSchoolID),
                    new SqlParameter("@ArgCriteria",ArgCriteria),
                    new SqlParameter("@PromotionType",PromotionType),  
                };
            return Database.SqlQuery<GetGridData>("SIPromotionListDisplayGrid @ArgSchoolID,@ArgAcaStart,@ArgCriteria,@PromotionType", param).ToList();
        }
        public virtual List<GetGridData> SISchoolOverViewDisplayGrid(int ArgSchoolID, int ArgAcaStart, string @ArgCriteria)
        {
            SqlParameter[] param = new SqlParameter[] 
                { 
                    new SqlParameter("@ArgAcaStart",ArgAcaStart),
                    new SqlParameter("@ArgSchoolID",ArgSchoolID),
                    new SqlParameter("@ArgCriteria",ArgCriteria)   
                };
            return Database.SqlQuery<GetGridData>("SISchoolOverViewDisplayGrid @ArgSchoolID,@ArgAcaStart,@ArgCriteria", param).ToList();
        }
        public virtual List<GetGridData> SISummaryAttGridDetails(int ArgSchoolID, int ArgAcaStart, int ArgStudentID, string ArgCondition)
        {
            SqlParameter[] param = new SqlParameter[] 
                { 
                    new SqlParameter("@ArgSchoolID",ArgSchoolID),
                    new SqlParameter("@ArgAcaStart",ArgAcaStart),
                    new SqlParameter("@ArgStudentID",ArgStudentID), 
                    new SqlParameter("@ArgCondition",ArgCondition)
                };
            return Database.SqlQuery<GetGridData>("SISummaryAttGridDetails  @ArgSchoolID,@ArgAcaStart,@ArgStudentID,@ArgCondition", param).ToList();
        }

        public void SISummeryDt(int AcaStart, int SchoolID, int UID, string Criteria, string sortorder)
        {
            SqlParameter[] param = new SqlParameter[]
                    {

                    new SqlParameter("@AcaStart",AcaStart),
                    new SqlParameter("@SchoolID",SchoolID),
                    new SqlParameter("@UserID",UID),
                    new SqlParameter("@ArgCriteria",Criteria),
                    new SqlParameter("@ArgSortorder",sortorder),
                    };

            Database.ExecuteSqlCommand("SIStudentWiseSummaryNew @AcaStart,@SchoolID,@UserID,@ArgCriteria,@ArgSortorder", param);
        }

        public virtual List<SIAdvanceSearch> SIAdvanceSearchGrid(int ArgSchoolID, int ArgAcaStart, string ArgCondition, string ArgFieldID, string ArgDisplayID, string ArgOrder)
        {

            SqlParameter[] param = new SqlParameter[] 
                { 
                    new SqlParameter("@ArgSchoolID",ArgSchoolID),
                    new SqlParameter("@ArgAcaStart",ArgAcaStart),
                    new SqlParameter("@ArgCondition",ArgCondition),
                    new SqlParameter("@ArgFieldID",ArgFieldID),
                    new SqlParameter("@ArgDisplayID",ArgDisplayID),
                    new SqlParameter("@ArgOrder",ArgOrder)

     
                };
            return Database.SqlQuery<SIAdvanceSearch>("SIAdvanceSearchGrid @ArgSchoolID,@ArgAcaStart,@ArgCondition,@ArgFieldID,@ArgDisplayID,@ArgOrder", param).ToList();
        }

        public void ExamEntryShiftonSectionChange(int ArgClassID, int ArgNewSectionID, int ArgOldSectionID, int ArgstudentID, int ArgAcAstart, int ArgSchoolID)
        {
            SqlParameter[] param = new SqlParameter[]
            {
                new SqlParameter("@intClassID",ArgClassID),
                new SqlParameter("@intNewSectionID",ArgNewSectionID),
                new SqlParameter("@intOldSectionID",ArgOldSectionID),
                new SqlParameter("@intStudentID",ArgstudentID),
                new SqlParameter("@intAcaStart",ArgAcAstart),
                new SqlParameter("@intSchoolID",ArgSchoolID)
            };
            Database.ExecuteSqlCommand("ExamEntryShiftonSectionChange @intClassID,@intNewSectionID,@intOldSectionID,@intStudentID,@intAcaStart,@intSchoolID", param);
        }

        public List<MTCheckMaster> fillLanguageKnown(int StudentID)
        {
            List<MTCheckMaster> ls = new List<MTCheckMaster>();
            if (StudentID == 0)
            {
                ls = (from MM in MTMotherTongueMasters
                      where MM.AutoID != 0
                      select new MTCheckMaster() { CheckID = MM.AutoID.ToString(), CheckName = MM.MName }).Distinct().ToList();
            }
            else
            {
                ls = (from MM in MTMotherTongueMasters
                      join SL in SIStudentLanguage.Where(model => model.StudID == StudentID).DefaultIfEmpty() on MM.AutoID equals SL.MotherTongueIDs
                      into p
                      from SL in p.DefaultIfEmpty()
                      where MM.AutoID != 0
                      orderby MM.MName
                      select new MTCheckMaster() { CheckID = MM.AutoID.ToString(), CheckName = MM.MName, Check = (SL.MotherTongueIDs == null ? false : true) }).Distinct().ToList();
            }
            return ls;
        }

        public List<MTCheckMaster> fillActivityDetails(int StudentID)
        {
            List<MTCheckMaster> ls = new List<MTCheckMaster>();
            if (StudentID == 0)
            {
                ls = (from AM in MTActivitymasters
                      where AM.AutoID != 0
                      select new MTCheckMaster() { CheckID = AM.AutoID.ToString(), CheckName = AM.ActivityNames }).Distinct().ToList();
            }
            else
            {
                ls = (from AM in MTActivitymasters
                      join AL in SIStudentActivityDetail.Where(model => model.StudID == StudentID).DefaultIfEmpty() on AM.AutoID equals AL.ActivityIDs
                      into p
                      from AL in p.DefaultIfEmpty()
                      where AM.AutoID != 0
                      orderby AM.ActivityNames
                      select new MTCheckMaster() { CheckID = AM.AutoID.ToString(), CheckName = AM.ActivityNames, Check = (AL.ActivityIDs == null ? false : true) }).Distinct().ToList();
            }
            return ls;
        }

        public List<MTCheckMaster> fillParentQulaification(int StudentID, string strType)
        {

            List<MTCheckMaster> ls = new List<MTCheckMaster>();
            if (StudentID == 0)
            {
                ls = (from MM in MTPQualificationMasters
                      where MM.AutoID != 0
                      select new MTCheckMaster() { CheckID = MM.AutoID.ToString(), CheckName = MM.PQlifiName }).Distinct().ToList();
            }
            else
            {
                if (strType == "Father")
                {
                    List<string> ss = SIStudentFatherDetails.Where(s => s.StudID == StudentID).Select(s => s.FPQualiID).ToList()[0].Split(',').ToList();
                    ls = (from MTP in MTPQualificationMasters
                          where MTP.AutoID != 0
                          join MT in
                              (from st in MTPQualificationMasters where ss.Contains(st.AutoID.ToString()) select new { st.AutoID, st.PQlifiName })
                          on MTP.AutoID equals MT.AutoID into p
                          from MT in p.DefaultIfEmpty()
                          orderby MT.AutoID == null ? 1 : 0, MTP.PQlifiName
                          select new MTCheckMaster()
                          {
                              CheckID = MTP.AutoID.ToString(),
                              CheckName = MTP.PQlifiName,
                              Check = (MT.AutoID == null ? false : true)
                          }).Distinct().OrderByDescending(model => model.Check).ToList();


                }
                else
                {
                    List<string> ss = SIStudentMotherDetails.Where(s => s.StudID == StudentID).Select(s => s.MPQualiID).ToList()[0].Split(',').ToList();
                    ls = (from MTP in MTPQualificationMasters
                          where MTP.AutoID != 0
                          join MT in
                              (from st in MTPQualificationMasters where ss.Contains(st.AutoID.ToString()) select new { st.AutoID, st.PQlifiName })
                          on MTP.AutoID equals MT.AutoID into p
                          from MT in p.DefaultIfEmpty()
                          orderby MT.AutoID == null ? 1 : 0, MTP.PQlifiName
                          select new MTCheckMaster()
                          {
                              CheckID = MTP.AutoID.ToString(),
                              CheckName = MTP.PQlifiName,
                              Check = (MT.AutoID == null ? false : true)
                          }).Distinct().OrderByDescending(model => model.Check).ToList();
                }
            }
            return ls;
        }

        public virtual DataSet SPBindFieldUpdation(int ArgSchoolID, int ArgAcaStart, string ArgFieldID, string ArgStudentID, int ArgCLID, int ArgSECID)
        {

            SqlParameter[] param = new SqlParameter[] 
                { 
                    new SqlParameter("@ArgSchoolID",ArgSchoolID),
                    new SqlParameter("@ArgAcaStart",ArgAcaStart),
                    new SqlParameter("@ArgFieldID",ArgFieldID),
                    new SqlParameter("@ArgStudentID",ArgStudentID),
                     new SqlParameter("@ArgCLID",ArgCLID),
                    new SqlParameter("@ArgSECID",ArgSECID)
                };            
            return GetSPFromSql("SPBindFieldUpdation", param);
        }


        public virtual DataSet SIAdvanceSearch(int ArgSchoolID, int ArgAcaStart, string ArgCondition, string ArgFieldID, string ArgDisplayID, string ArgOrder, string ArgDeviceType)
        {

            SqlParameter[] param = new SqlParameter[] 
                { 
                    new SqlParameter("@ArgSchoolID",ArgSchoolID),
                    new SqlParameter("@ArgAcaStart",ArgAcaStart),
                    new SqlParameter("@ArgCondition",ArgCondition),
                    new SqlParameter("@ArgFieldID",ArgFieldID),
                    new SqlParameter("@ArgDisplayID",ArgDisplayID),
                    new SqlParameter("@ArgOrder",ArgOrder),
                    new SqlParameter("@ArgDeviceType",ArgDeviceType)
     
                };
            DataSet ds = GetSPFromSql("SIAdvanceSearch", param);
            return ds;
        }

        public virtual DataSet SISummaryAttGridStudent(int ArgSchoolID, int ArgAcaStart, int ArgStudentID, string ArgCriteria)
        {
            SqlParameter[] param = new SqlParameter[] 
                { 
                    new SqlParameter("@ArgSchoolID",ArgSchoolID),
                    new SqlParameter("@ArgAcaStart",ArgAcaStart),
                    new SqlParameter("@ArgStudentID",ArgStudentID),
                    new SqlParameter("@ArgCriteria",ArgCriteria)
     
                };
            DataSet ds = GetSPFromSql("SISummaryAttGridStudent", param);
            return ds;
        }
        public virtual List<string> NewStudentAttEntryDetail(int SSchoolID, int AcaStart, string TCDatee, int StudentIDNew)
        {
            SqlParameter[] param = new SqlParameter[] 
                {  
                    new SqlParameter("@ArgSchoolID",SSchoolID),
                    new SqlParameter("@ArgAcaStart",AcaStart),
                    new SqlParameter("@ArgTCDate",TCDatee),
                    new SqlParameter("@ArgStudentID",StudentIDNew)

                };
            return Database.SqlQuery<string>("SPATTENDANCENEW @ArgSchoolID,@ArgAcaStart,@ArgTCDate,@ArgStudentID", param).ToList();
        }
        public virtual List<GetGridData> SRGetStudentdetailsParentPotel(int ArgAcaStart, int ArgSchoolID, int ArgStudentID)
        {
            SqlParameter[] param = new SqlParameter[]
                {
                    new SqlParameter("@ArgAcaStart",ArgAcaStart),
                    new SqlParameter("@ArgSchoolID",ArgSchoolID),
                    new SqlParameter("@ArgStudentID",ArgStudentID)

                };
            return Database.SqlQuery<GetGridData>("SRGetStudentdetailsParentPotel @ArgAcaStart,@ArgSchoolID,@ArgStudentID", param).ToList();
        }

        public virtual List<GetGridData> SISchoolOverViewDisplayGridNew(int ArgSchoolID, int ArgAcaStart, string @ArgCriteria, string AsonDate)
        {
            SqlParameter[] param = new SqlParameter[]
                {
                    new SqlParameter("@ArgAcaStart",ArgAcaStart),
                    new SqlParameter("@ArgSchoolID",ArgSchoolID),
                    new SqlParameter("@ArgCriteria",ArgCriteria),
                    new SqlParameter("@AsOnDate",AsonDate)
                };
            return Database.SqlQuery<GetGridData>("SISchoolOverViewDisplayGridNew @ArgSchoolID,@ArgAcaStart,@ArgCriteria,@AsOnDate", param).ToList();
        }

        #endregion

        #region 4. Student Attandance

        public virtual List<GetGridData> AttendanceEntryBulkDts(int ArgSchoolID, int ArgAcaStart, int ArgClassID, int ArgSectionID, string ArgDate, string ArgCondition)
        {
            SqlParameter[] param = new SqlParameter[] 
                { 
                    new SqlParameter("@ArgSchoolID",ArgSchoolID),
                    new SqlParameter("@ArgAcaStart",ArgAcaStart),
                    new SqlParameter("@ArgClassID",ArgClassID),
                    new SqlParameter("@ArgSectionID",ArgSectionID),
                    new SqlParameter("@ArgDate",ArgDate),
                    new SqlParameter("@ArgCondition",ArgCondition)   
                };
            return Database.SqlQuery<GetGridData>("AttendanceEntryBulkDts @ArgSchoolID,@ArgAcaStart,@ArgClassID,@ArgSectionID,@ArgDate,@ArgCondition", param).ToList();
        }
        public virtual List<GetGridData> AttendanceEntryDts(int ArgSchoolID, int ArgAcaStart, int ArgClassID, int ArgSectionID, string ArgDate, string ArgCondition)
        {
            SqlParameter[] param = new SqlParameter[] 
                { 
                    new SqlParameter("@ArgSchoolID",ArgSchoolID),
                    new SqlParameter("@ArgAcaStart",ArgAcaStart),
                    new SqlParameter("@ArgClassID",ArgClassID),
                    new SqlParameter("@ArgSectionID",ArgSectionID),
                    new SqlParameter("@ArgDate",ArgDate),
                    new SqlParameter("@ArgCondition",ArgCondition)   
                };
            return Database.SqlQuery<GetGridData>("AttendanceEntryDts @ArgSchoolID,@ArgAcaStart,@ArgClassID,@ArgSectionID,@ArgDate,@ArgCondition", param).ToList();
        }

        public virtual List<GetGridData> AttendanceStudentWiseDts(int ArgSchoolID, int ArgAcaStart, int ArgStudent, string FromDate, string ToDate, string ArgCondition)
        {
            SqlParameter[] param = new SqlParameter[] 
                { 
                    new SqlParameter("@ArgSchoolID",ArgSchoolID),
                    new SqlParameter("@ArgAcaStart",ArgAcaStart),
                    new SqlParameter("@ArgStudent",ArgStudent),
                    new SqlParameter("@FromDate",FromDate),
                    new SqlParameter("@ToDate",ToDate),
                    new SqlParameter("@ArgCondition",ArgCondition)   
                };
            return Database.SqlQuery<GetGridData>("AttendanceStudentWiseDts @ArgSchoolID,@ArgAcaStart,@ArgStudent,@FromDate,@ToDate,@ArgCondition", param).ToList();
        }

        public virtual List<GetGridData> AttCalendarDetails(int ArgMonth, int ArgYear, int ArgTotalDays, int ArgSchoolID, string ArgAttType, string WeekOff)
        {
            SqlParameter[] param = new SqlParameter[]
                {
                    new SqlParameter("@ArgMonth",ArgMonth),
                    new SqlParameter("@ArgYear",ArgYear),
                    new SqlParameter("@ArgTotalDays",ArgTotalDays),
                    new SqlParameter("@ArgSchoolID",ArgSchoolID),
                    new SqlParameter("@ArgAttType",ArgAttType),
                    new SqlParameter("@WeekOff",WeekOff)
                };
            return Database.SqlQuery<GetGridData>("AttCalendarDetails @ArgMonth,@ArgYear,@ArgTotalDays,@ArgSchoolID,@ArgAttType,@WeekOff", param).ToList();
        }


        public virtual List<GetGridData> ATTCalendarChecking(int ArgSchoolID, int ArgAcaStart, string ArgClassSect, string ArgDate)
        {
            SqlParameter[] param = new SqlParameter[] 
                { 
                    new SqlParameter("@ArgSchoolID",ArgSchoolID),
                    new SqlParameter("@ArgAcaStart",ArgAcaStart),
                    new SqlParameter("@ArgClassSect",ArgClassSect),
                    new SqlParameter("@ArgDate",ArgDate)
                };
            return Database.SqlQuery<GetGridData>("ATTCalendarChecking @ArgSchoolID,@ArgAcaStart,@ArgClassSect,@ArgDate", param).ToList();
        }


        public virtual List<MTDDLMaster> SIBindMonthYear(int ArgAcaStart)
        {
            SqlParameter[] param = new SqlParameter[] 
                {
                    new SqlParameter("@ArgAcaStart",ArgAcaStart),                   
                };
            return Database.SqlQuery<MTDDLMaster>("SIBindMonthYear @ArgAcaStart", param).ToList();
        }


        public virtual List<GetGridData> AttedanceManagemt(int ArgSchoolID, int ArgAcaStart)
        {
            SqlParameter[] param = new SqlParameter[] 
                { 
                    new SqlParameter("@ArgSchoolID",ArgSchoolID),
                    new SqlParameter("@ArgAcaStart",ArgAcaStart)       
                };
            return Database.SqlQuery<GetGridData>("AttedanceManagemt @ArgSchoolID,@ArgAcaStart", param).ToList();
        }

        #endregion

        #region 6. Transport


        public virtual List<int> StudentBusMinMonth(int intAcaStart, int intSchoolid, int intStudentID, int BusRouteID, int BusStopID, string TravelType)
        {
            SqlParameter[] param = new SqlParameter[]
            {
                new SqlParameter("@ArgAcastart",intAcaStart),
                new SqlParameter("@ArgSchoolID",intSchoolid),
                new SqlParameter("@ArgStudentID",intStudentID),
                new SqlParameter("@ArgRouteID",BusRouteID),
                new SqlParameter("@ArgStopID",BusStopID),
                 new SqlParameter("@ArgType",TravelType)
            };
            return Database.SqlQuery<int>("StudentBusMinMonth @ArgAcastart,@ArgSchoolID,@ArgStudentID,@ArgRouteID,@ArgStopID,@ArgType", param).ToList();
        }
        public virtual DataSet spStudentBusRouteAssignment(int ArgYStart, int ArgSchoolID, string ArgStudentID, int ArgIntClassID, int ArgSectionID, string ArgTravelType)
        {
            SqlParameter[] param = new SqlParameter[] 
                { 
                    new SqlParameter("@ArgAcaStart",ArgYStart),
                    new SqlParameter("@ArgSchoolID",ArgSchoolID),
                    new SqlParameter("@ArgStudentID",ArgStudentID),
                    new SqlParameter("@ArgClassID",ArgIntClassID),
                    new SqlParameter("@ArgSectionID",ArgSectionID),
                    new SqlParameter("@ArgTravelType",ArgTravelType),
                };
            DataSet ds = GetSPFromSql("spStudentBusRouteAssignment", param);
            return ds;

        }

        public virtual DataSet spStudentBusRouteChange(int ArgYStart, int ArgSchoolID, string ArgStudentID, int ArgIntClassID, int ArgSectionID, string ArgTravelType)
        {
            SqlParameter[] param = new SqlParameter[] 
                { 
                    new SqlParameter("@ArgAcaStart",ArgYStart),
                    new SqlParameter("@ArgSchoolID",ArgSchoolID),
                    new SqlParameter("@ArgStudentID",ArgStudentID),
                    new SqlParameter("@ArgClassID",ArgIntClassID),
                    new SqlParameter("@ArgSectionID",ArgSectionID),
                    new SqlParameter("@ArgTravelType",ArgTravelType),
                };
            DataSet ds = GetSPFromSql("spStudentBusRouteChange", param);
            return ds;

        }

        public virtual DataSet TRBusRouteDetail(int ArgSchoolID, int ArgYStart, int ArgRouteID)
        {
            SqlParameter[] param = new SqlParameter[] 
                {                     
                    new SqlParameter("@ArgSchoolID",ArgSchoolID),
                    new SqlParameter("@ArgAcaStart",ArgYStart),
                    new SqlParameter("@BusRouteID",ArgRouteID)
                };
            DataSet ds = GetSPFromSql("TRBusRouteDetail", param);
            return ds;

        }

        public virtual DataSet TRBusInstallmentGrid(int ArgSchoolID, int ArgAcaStart, int ArgYearStyleID)
        {
            SqlParameter[] param = new SqlParameter[] 
                {                     
                    new SqlParameter("@ArgSchoolID",ArgSchoolID),
                    new SqlParameter("@ArgAcaStart",ArgAcaStart),
                    new SqlParameter("@ArgYearStyleID",ArgYearStyleID)
                };
            DataSet ds = GetSPFromSql("TRBusInstallmentGrid", param);
            return ds;

        }

        public virtual List<string> TransportTransferToNextYear(int AcaStart, int SchoolID, int UID, string type)
        {
            SqlParameter[] param = new SqlParameter[]
                {
                    new SqlParameter("@ArgAcaStart",AcaStart),
                    new SqlParameter("@ArgSchoolID",SchoolID),
                    new SqlParameter("@ArgUID",UID),
                    new SqlParameter("@ArgType",type)
                };
            return Database.SqlQuery<string>("TransportTransferToNextYear @ArgAcaStart ,@ArgSchoolID ,@ArgUID ,@ArgType", param).ToList();
        }

        public int GroupRateUpdate(int GroupID, int MonthID, int Rate, int SchoolID, int AcaStart, int UserID)
        {
            SqlParameter[] param = new SqlParameter[]
            {
                new SqlParameter("@ArgSchoolID",SchoolID),
                new SqlParameter("@ArgAcastart",AcaStart),
                new SqlParameter("@ArgGroupID",GroupID),
                new SqlParameter("@ArgRate",Rate),
                new SqlParameter("@ArgInstallmentID",MonthID),
                new SqlParameter("@UID",UserID)
            };

            return Database.ExecuteSqlCommand("TRBusRateUpdate @ArgSchoolID,@ArgAcastart,@ArgGroupID,@ArgRate,@ArgInstallmentID,@UID", param);
        }

        public virtual List<TRStudentPickDrop> TRStudentPickDrops(int ArgSchoolID, int ArgYStart, string ArgRouteID, string ArgStopID, string ArgPickDropDate)
        {
            SqlParameter[] param = new SqlParameter[]
                {
                    new SqlParameter("@SchoolID",ArgSchoolID),
                    new SqlParameter("@intAcastart",ArgYStart),
                    new SqlParameter("@intRouteID",ArgRouteID),
                    new SqlParameter("@StopID",ArgStopID),
                    new SqlParameter("@PickDropDate",ArgPickDropDate)
                };
            return Database.SqlQuery<TRStudentPickDrop>("TRStudentPickDrops @SchoolID,@intAcastart,@intRouteID,@StopID,@PickDropDate", param).ToList();
        }

        public virtual DataSet TRBindLatitudeLong(int ArgYStart, int ArgSchoolID, int ArgRouteID)
        {
            SqlParameter[] param = new SqlParameter[] 
                {               
                    new SqlParameter("@ArgAcaStart",ArgYStart),
                    new SqlParameter("@ArgSchoolID",ArgSchoolID),                  
                    new SqlParameter("@ArgBusRouteID",ArgRouteID)
                };
            DataSet ds = GetSPFromSql("TRBindLatitudeLong", param);
            return ds;

        }

        public virtual List<string> TRRouteFileUpload(DataTable dt, int UID, int AcaStart, int SchoolID)
        {
            SqlParameter[] param = new SqlParameter[]
            {
                new SqlParameter("@ArgAcaStart",AcaStart),
                new SqlParameter("@ArgSchoolID",SchoolID),
                new SqlParameter("@ArgUID",UID),
                new SqlParameter("@Argdt",SqlDbType.Structured)
            };
            param[3].TypeName = "ut_FileUploadRoute";
            param[3].Value = dt;
            return Database.SqlQuery<string>("TRRouteFileUpload @ArgAcaStart, @ArgSchoolID, @ArgUID, @Argdt", param).ToList();
        }

        public virtual List<string> TRStopFileUpload(DataTable dt, int UID, int AcaStart, int SchoolID)
        {
            SqlParameter[] param = new SqlParameter[]
            {
                new SqlParameter("@ArgAcaStart",AcaStart),
                new SqlParameter("@ArgSchoolID",SchoolID),
                new SqlParameter("@ArgUID",UID),
                new SqlParameter("@Argdt",SqlDbType.Structured)
            };
            param[3].TypeName = "ut_FileUploadStop";
            param[3].Value = dt;
            return Database.SqlQuery<string>("TRStopFileUpload @ArgAcaStart, @ArgSchoolID, @ArgUID, @Argdt", param).ToList();
        }

        public virtual List<string> TRRouteDetailFileUpload(DataTable dt, int UID, int AcaStart, int SchoolID)
        {
            SqlParameter[] param = new SqlParameter[]
            {
                new SqlParameter("@ArgAcaStart",AcaStart),
                new SqlParameter("@ArgSchoolID",SchoolID),
                new SqlParameter("@ArgUID",UID),
                new SqlParameter("@Argdt",SqlDbType.Structured)
            };
            param[3].TypeName = "ut_FileUploadRouteDetail";
            param[3].Value = dt;
            return Database.SqlQuery<string>("TRRouteDetailFileUpload @ArgAcaStart, @ArgSchoolID, @ArgUID, @Argdt", param).ToList();
        }

        #endregion





        #region 10. Fee

        public List<object> fillFeeFineSettingFilterGrid(int AcaStart, int SchoolID, int FeeHeadID, string FilterType, string Value)
        {
            // var obj = new var();
            List<object> ls = new List<object>();
            if (FilterType == "StartWith")
            {
                var obj = from FSS in FEEStructureSystems
                          join FGM in FEEGroupMasters on FSS.FGID equals FGM.AutoID
                          join FIM in FEEInstallmentMasters on FSS.FIID equals FIM.AutoID
                          join YSM in MTAcaYearStyleMasters on FGM.StyleID equals YSM.AutoID
                          where FSS.FHID == FeeHeadID && FGM.AcaStart == AcaStart && FGM.SchoolID == SchoolID && FGM.FGName.StartsWith(Value)
                          orderby FGM.FGName, FIM.AutoID, FSS.DDate
                          select new { FSS.AutoID, FGM.FGName, FSS.FGID, FIM.FIName, FSS.FIID, FSS.DDate, FSS.FHID, FSS.Amt, FSS.Type, TypeName = ((FSS.Type == "0" || FSS.Type == null) ? "" : (FSS.Type == "1" ? "Day" : (FSS.Type == "2" ? "Month" : (FSS.Type == "3" ? "Once" : "Limit")))) };
                ls = new List<object>(obj);
            }
            else if (FilterType == "Equal")
            {
                var obj = from FSS in FEEStructureSystems
                          join FGM in FEEGroupMasters on FSS.FGID equals FGM.AutoID
                          join FIM in FEEInstallmentMasters on FSS.FIID equals FIM.AutoID
                          join YSM in MTAcaYearStyleMasters on FGM.StyleID equals YSM.AutoID
                          where FSS.FHID == FeeHeadID && FGM.AcaStart == AcaStart && FGM.SchoolID == SchoolID && FGM.FGName == Value
                          orderby FGM.FGName, FIM.AutoID, FSS.DDate
                          select new { FSS.AutoID, FGM.FGName, FSS.FGID, FIM.FIName, FSS.FIID, FSS.DDate, FSS.FHID, FSS.Amt, FSS.Type, TypeName = ((FSS.Type == "0" || FSS.Type == null) ? "" : (FSS.Type == "1" ? "Day" : (FSS.Type == "2" ? "Month" : (FSS.Type == "3" ? "Once" : "Limit")))) };
                ls = new List<object>(obj);
            }
            else if (FilterType == "Contain")
            {
                var obj = from FSS in FEEStructureSystems
                          join FGM in FEEGroupMasters on FSS.FGID equals FGM.AutoID
                          join FIM in FEEInstallmentMasters on FSS.FIID equals FIM.AutoID
                          join YSM in MTAcaYearStyleMasters on FGM.StyleID equals YSM.AutoID
                          where FSS.FHID == FeeHeadID && FGM.AcaStart == AcaStart && FGM.SchoolID == SchoolID && FGM.FGName.Contains(Value)
                          orderby FGM.FGName, FIM.AutoID, FSS.DDate
                          select new { FSS.AutoID, FGM.FGName, FSS.FGID, FIM.FIName, FSS.FIID, FSS.DDate, FSS.FHID, FSS.Amt, FSS.Type, TypeName = ((FSS.Type == "0" || FSS.Type == null) ? "" : (FSS.Type == "1" ? "Day" : (FSS.Type == "2" ? "Month" : (FSS.Type == "3" ? "Once" : "Limit")))) };
                ls = new List<object>(obj);
            }
            else
            {
                var obj = from FSS in FEEStructureSystems
                          join FGM in FEEGroupMasters on FSS.FGID equals FGM.AutoID
                          join FIM in FEEInstallmentMasters on FSS.FIID equals FIM.AutoID
                          join YSM in MTAcaYearStyleMasters on FGM.StyleID equals YSM.AutoID
                          where FSS.FHID == FeeHeadID && FGM.AcaStart == AcaStart && FGM.SchoolID == SchoolID
                          orderby FGM.FGName, FIM.AutoID, FSS.DDate
                          select new { FSS.AutoID, FGM.FGName, FSS.FGID, FIM.FIName, FSS.FIID, FSS.DDate, FSS.FHID, FSS.Amt, FSS.Type, TypeName = ((FSS.Type == "0" || FSS.Type == null) ? "" : (FSS.Type == "1" ? "Day" : (FSS.Type == "2" ? "Month" : (FSS.Type == "3" ? "Once" : "Limit")))) };

                ls = new List<object>(obj);
            }


            return ls;
        }

        public List<GetGridData> fillFeeGroupMasterFilterGrid(int AcaStart, int SchoolID, string FilterType, string Value)
        {
            List<GetGridData> ls = new List<GetGridData>();
            if (FilterType == "StartWith")
            {
                var obj = (from FGM in FEEGroupMasters
                           join FAT in FeeAccTypes on new { col1 = FGM.AccID, col2 = FGM.SchoolID } equals new { col1 = FAT.AutoID, col2 = FAT.SchoolID }
                           join FCM in FeeStreamMasters on new { col1 = FGM.StrmID, col2 = FGM.SchoolID } equals new { col1 = FCM.AutoID, col2 = FCM.SchoolID }
                           join YSM in MTAcaYearStyleMasters on FGM.StyleID equals YSM.AutoID
                           where FGM.AutoID != 0 && FGM.AcaStart == AcaStart && FGM.SchoolID == SchoolID && FGM.FGName.StartsWith(Value)
                           orderby FGM.AutoID descending
                           select new GetGridData() { ColID = FGM.AutoID, Col1 = FGM.FGName, Col2 = FAT.AccName, Col3 = FCM.FeeStreamName, Col4 = YSM.StyleName }).ToList();

                ls = new List<GetGridData>(obj);
            }
            else if (FilterType == "Equal")
            {
                var obj = (from FGM in FEEGroupMasters
                           join FAT in FeeAccTypes on new { col1 = FGM.AccID, col2 = FGM.SchoolID } equals new { col1 = FAT.AutoID, col2 = FAT.SchoolID }
                           join FCM in FeeStreamMasters on new { col1 = FGM.StrmID, col2 = FGM.SchoolID } equals new { col1 = FCM.AutoID, col2 = FCM.SchoolID }
                           join YSM in MTAcaYearStyleMasters on FGM.StyleID equals YSM.AutoID
                           where FGM.AutoID != 0 && FGM.AcaStart == AcaStart && FGM.SchoolID == SchoolID && FGM.FGName == Value
                           orderby FGM.AutoID descending
                           select new GetGridData() { ColID = FGM.AutoID, Col1 = FGM.FGName, Col2 = FAT.AccName, Col3 = FCM.FeeStreamName, Col4 = YSM.StyleName }).ToList();

                ls = new List<GetGridData>(obj);
            }
            else if (FilterType == "Contain")
            {
                var obj = (from FGM in FEEGroupMasters
                           join FAT in FeeAccTypes on new { col1 = FGM.AccID, col2 = FGM.SchoolID } equals new { col1 = FAT.AutoID, col2 = FAT.SchoolID }
                           join FCM in FeeStreamMasters on new { col1 = FGM.StrmID, col2 = FGM.SchoolID } equals new { col1 = FCM.AutoID, col2 = FCM.SchoolID }
                           join YSM in MTAcaYearStyleMasters on FGM.StyleID equals YSM.AutoID
                           where FGM.AutoID != 0 && FGM.AcaStart == AcaStart && FGM.SchoolID == SchoolID && FGM.FGName.Contains(Value)
                           orderby FGM.AutoID descending
                           select new GetGridData() { ColID = FGM.AutoID, Col1 = FGM.FGName, Col2 = FAT.AccName, Col3 = FCM.FeeStreamName, Col4 = YSM.StyleName }).ToList();

                ls = new List<GetGridData>(obj);
            }
            else
            {
                var obj = (from FGM in FEEGroupMasters
                           join FAT in FeeAccTypes on new { col1 = FGM.AccID, col2 = FGM.SchoolID } equals new { col1 = FAT.AutoID, col2 = FAT.SchoolID }
                           join FCM in FeeStreamMasters on new { col1 = FGM.StrmID, col2 = FGM.SchoolID } equals new { col1 = FCM.AutoID, col2 = FCM.SchoolID }
                           join YSM in MTAcaYearStyleMasters on FGM.StyleID equals YSM.AutoID
                           where FGM.AutoID != 0 && FGM.AcaStart == AcaStart && FGM.SchoolID == SchoolID
                           orderby FGM.AutoID descending
                           select new GetGridData() { ColID = FGM.AutoID, Col1 = FGM.FGName, Col2 = FAT.AccName, Col3 = FCM.FeeStreamName, Col4 = YSM.StyleName }).ToList();

                ls = new List<GetGridData>(obj);
            }

            return ls;

        }

        public virtual DataSet FeeFALedgerSetting(int FEEAccID, int AcaStart, int SchoolID, int PayModeID, int DBankID)
        {
            SqlParameter[] param = new SqlParameter[] 
            { 
                new SqlParameter("@ArgFEEAccID",FEEAccID),
                new SqlParameter("@ArgAcaStart",AcaStart),
                new SqlParameter("@ArgSchoolID",SchoolID),                
                new SqlParameter("@ArgPayModeId",PayModeID),
                new SqlParameter("@DBankID",DBankID),
            };
            DataSet ds = GetSPFromSql("FeeFALedgerSetting", param);
            return ds;

        }

        public int FeeFAEntry(int ReceiptNo, int SchoolID, int AcaStart, int ArgUID)
        {
            SqlParameter[] param = new SqlParameter[] 
                    { 
                        new SqlParameter("@ArgReceiptNo",ReceiptNo),
                        new SqlParameter("@ArgAcaStart",AcaStart),
                        new SqlParameter("@ArgSchoolID",SchoolID),
                        new SqlParameter("@ArgUID", ArgUID)                        
                    };
            return Database.ExecuteSqlCommand("FeeFAEntry @ArgReceiptNo,@ArgAcaStart,@ArgSchoolID,@ArgUID", param);
        }

        public int FeeFAEntryReverse(int ReceiptNo, int SchoolID, int AcaStart, int ArgUID)
        {
            SqlParameter[] param = new SqlParameter[]
                    {
                        new SqlParameter("@ArgReceiptNo",ReceiptNo),
                        new SqlParameter("@ArgAcaStart",AcaStart),
                        new SqlParameter("@ArgSchoolID",SchoolID),
                        new SqlParameter("@ArgUID", ArgUID)
                    };
            return Database.ExecuteSqlCommand("FeeFAEntryReverse @ArgReceiptNo,@ArgAcaStart,@ArgSchoolID,@ArgUID", param);
        }

        public virtual List<FeeReceiptDetail_ForChqOnly> FeeReceiptDetail_ForChqOnly(int SchoolID, int AcaStart, int StudentId)
        {
            SqlParameter[] param = new SqlParameter[]
            { 
                new SqlParameter("@ArgSchoolID",SchoolID),
                new SqlParameter("@ArgAcaStart",AcaStart),
                new SqlParameter("@ArgStudentId",StudentId),
                new SqlParameter("@ArgFlag","ForChqOnly")
            };

            return Database.SqlQuery<FeeReceiptDetail_ForChqOnly>("FeeReceiptDetails @ArgSchoolId,@ArgAcaStart,@ArgStudentId,@ArgFlag", param).ToList();
        }
        public List<object> OnlineTransactionDetail(int AcaStart, int SchoolID, string TransactionID)
        {
            var obj = from A in
                          (
                              from FOD in FeeOnlinePaymentDetails
                              join FOP in FeeOnlinePaymentMasters on FOD.SystemTransactionID equals FOP.AutoID
                              where FOP.UserSystemTransactionID == TransactionID
                              select new { SID = FOD.StudentID, FIID = FOD.InstID, STID = FOD.SystemTransactionID })
                      join FAM in FEEAccountMasters on A.SID equals FAM.StdID
                      join FAD in FEEAccountDetails on FAM.AutoID equals FAD.BLNo
                      join FIM in FEEInstallmentMasters on A.FIID equals FIM.AutoID
                      where FAD.FIID == FIM.AutoID && FAM.Cancel == false && FAD.ChqBounce == false && FAM.AcaStart == AcaStart && FAM.SchoolID == SchoolID
                      group new { FIM, FAD } by new { FIM.AutoID, FIM.FIName, FAD.FIID } into qs
                      // group {FIM} by {FIM.FIName} into qs
                      select new { Installment = qs.Key.FIName, Amount = (int)(qs.Sum(model => (model.FAD.Amount - model.FAD.ConAmount))) };

            List<object> ls = new List<object>(obj);
            return ls;

        }

        public List<MTDDLMaster> fillClassSection()
        {
            List<MTDDLMaster> ls = new List<MTDDLMaster>();

            ls = (from Main in
                      (from CM in MTClassMasters
                       from SM in MTSectionMasters
                       join SYD in SIStudentYearWiseDetails on new { ClsID = CM.AutoID, SECID = SM.AutoID } equals new { ClsID = (int)SYD.ClsID, SECID = (int)SYD.SECID }
                       where CM.AutoID != 0 && SM.AutoID != 0
                       select new { CM.AutoID, SECID = SM.AutoID, CM.ClassName, CM.PriorityNo, SM.SectionName }).Distinct()
                  orderby Main.PriorityNo, Main.SectionName
                  select new MTDDLMaster() { DDLID = Main.AutoID + "^" + Main.SECID, DDLName = Main.ClassName + " - " + Main.SectionName }).ToList();
            return ls;
        }

        public List<MTCheckMaster> fillClassSection(int FGID)
        {
            List<MTCheckMaster> ls = new List<MTCheckMaster>();
            if (FGID == 0)
            {
                ls = (from CM in MTClassMasters
                      from SM in MTSectionMasters
                      where CM.AutoID != 0 && SM.AutoID != 0
                      orderby CM.PriorityNo, SM.SectionName
                      select new MTCheckMaster() { CheckID = CM.AutoID + "^" + SM.AutoID, CheckName = CM.ClassName + " - " + SM.SectionName }).ToList();
            }
            else
            {
                var obj = (from main in
                               (from CS in
                                    (from CM in MTClassMasters
                                     from SM in MTSectionMasters
                                     select new { CM.AutoID, SectionID = SM.AutoID, CM.ClassName, SM.SectionName, CM.PriorityNo })
                                join FGD in FEEGroupDetails on new { ID1 = CS.AutoID, ID2 = CS.SectionID } equals new { ID1 = FGD.ClassID, ID2 = FGD.SectionID } into ps
                                from FGD in (ps.Where(model => model.FGID == FGID)).DefaultIfEmpty()
                                join STD in SIStudentYearWiseDetails on new { ID3 = FGD.ClassID, ID4 = FGD.SectionID } equals new { ID3 = (int)STD.ClsID, ID4 = (int)STD.SECID } into qs
                                from STD in (qs.Where(model => model.FeeGrpID == FGID)).DefaultIfEmpty()
                                where CS.AutoID != 0 && CS.SectionID != 0
                                select new { CS.AutoID, CS.SectionID, CS.ClassName, CS.SectionName, Check = (FGD.FGID == null ? false : true), CS.PriorityNo, disb = (STD.StudID == null ? 0 : 1) }).Distinct()
                           orderby main.Check ? 0 : 1, main.PriorityNo, main.SectionName
                           select new MTCheckMaster() { CheckID = main.AutoID + "^" + main.SectionID + "_" + main.disb, CheckName = main.ClassName + " - " + main.SectionName, Check = main.Check });
                ls = obj.ToList();
            }
            return ls;
        }

        public List<GetGridData> fillFeeGroupMasterGrid(int AcaStart, int SchoolID)
        {
            List<GetGridData> ls = new List<GetGridData>();

            ls = (from FGM in FEEGroupMasters
                  join FAT in FeeAccTypes on new { col1 = FGM.AccID, col2 = FGM.SchoolID } equals new { col1 = FAT.AutoID, col2 = FAT.SchoolID }
                  join FCM in FeeStreamMasters on new { col1 = FGM.StrmID, col2 = FGM.SchoolID } equals new { col1 = FCM.AutoID, col2 = FCM.SchoolID }
                  join YSM in MTAcaYearStyleMasters on FGM.StyleID equals YSM.AutoID
                  where FGM.AutoID != 0 && FGM.AcaStart == AcaStart && FGM.SchoolID == SchoolID
                  orderby FGM.AutoID descending
                  select new GetGridData() { ColID = FGM.AutoID, Col1 = FGM.FGName, Col2 = FAT.AccName, Col3 = FCM.FeeStreamName, Col4 = YSM.StyleName }).ToList();
            return ls;
        }

        public List<FEEStructureUserDetail> fillFeeStructureUserDetail(int FGID)
        {
            var data = from FSM in FEEStructureUserMasters join FSD in FEEStructureUserDetails on FSM.AutoID equals FSD.StructureID where FSM.FGID == FGID select FSD;
            return data.ToList();
        }

        public virtual DataSet FeeBindFeeStructure(int FeeGroupID, int AcaStart, int SchoolID)
        {
            SqlParameter[] param = new SqlParameter[] 
            { 
                new SqlParameter("@ArgFeeGroupID",FeeGroupID),
                new SqlParameter("@ArgAcastart",AcaStart),
                new SqlParameter("@ArgSchoolID",SchoolID)
            };
            DataSet ds = GetSPFromSql("FeeBindFeeStructure", param);
            return ds;
        }

        public int FeeStructureAmountAssignment(string FGID, int oldFGID, int UID)
        {
            SqlParameter[] param = new SqlParameter[]
            { 
                new SqlParameter("@ArgFeeGroupID",FGID),
                new SqlParameter("@ArgOldFeeGroupID",oldFGID),
                new SqlParameter("@ArgUserID",UID)
            };

            return Database.ExecuteSqlCommand("FeeStructureAmountAssignment @ArgFeeGroupID,@ArgOldFeeGroupID,@ArgUserID", param);
        }

        public virtual List<FeeHeadFillingGrid> FeeFillingGridForEntry(string TableName, int AcaStart, int SchoolID, string Flag, string FilterType, string Value)
        {
            SqlParameter[] param = new SqlParameter[]
                    {
                        new SqlParameter("@ArgTableName",TableName),
                        new SqlParameter("@ArgAcaStart",AcaStart),
                        new SqlParameter("@ArgSchoolID",SchoolID),
                        new SqlParameter("@ArgFlag",Flag),
                        new SqlParameter("@FilterType",FilterType),
                        new SqlParameter("@Value",Value)
                    };
            return Database.SqlQuery<FeeHeadFillingGrid>("FeeFillingGridForEntry @ArgTableName,@ArgAcaStart,@ArgSchoolID,@ArgFlag,@FilterType,@Value", param).ToList();
        }
       
        public int FeeFineAssign(string FGID, int oldFGID, int FIID, int UID)
        {
            SqlParameter[] param = new SqlParameter[]
            { 
                new SqlParameter("@ArgFeeGroupID",FGID),
                new SqlParameter("@ArgOldFeeGroupID",oldFGID),
                new SqlParameter("@ArgFeInsID",FIID),
                new SqlParameter("@ArgUserID",UID)
            };

            return Database.ExecuteSqlCommand("FeeFineAssign @ArgFeeGroupID,@ArgOldFeeGroupID,@ArgFeInsID,@ArgUserID", param);
        }
        public int FeeFineAssign(string FGID, int oldFGID, int FIID, int UID, string Type, string DDate)
        {
            SqlParameter[] param = new SqlParameter[]
            { 
                new SqlParameter("@ArgFeeGroupID",FGID),
                new SqlParameter("@ArgOldFeeGroupID",oldFGID),
                new SqlParameter("@ArgFeInsID",FIID),
                new SqlParameter("@ArgUserID",UID),
                new SqlParameter("@ArgType",Type),
                new SqlParameter("@ArgDDate",DDate)
            };

            return Database.ExecuteSqlCommand("FeeFineAssign @ArgFeeGroupID,@ArgOldFeeGroupID,@ArgFeInsID,@ArgUserID, @ArgType, @ArgDDate", param);
        }


        public List<object> fillFeeFineSettingGrid(int AcaStart, int SchoolID, int FeeHeadID)
        {
            var obj = from FSS in FEEStructureSystems
                      join FGM in FEEGroupMasters on FSS.FGID equals FGM.AutoID
                      join FIM in FEEInstallmentMasters on FSS.FIID equals FIM.AutoID
                      join YSM in MTAcaYearStyleMasters on FGM.StyleID equals YSM.AutoID
                      where FSS.FHID == FeeHeadID && FGM.AcaStart == AcaStart && FGM.SchoolID == SchoolID
                      orderby FGM.FGName, FIM.AutoID, FSS.DDate
                      select new { FSS.AutoID, FGM.FGName, FSS.FGID, FIM.FIName, FSS.FIID, FSS.DDate, FSS.FHID, FSS.Amt, FSS.Type, TypeName = ((FSS.Type == "0" || FSS.Type == null) ? "" : (FSS.Type == "1" ? "Day" : (FSS.Type == "2" ? "Month" : (FSS.Type == "3" ? "Once" : "Limit")))) };

            List<object> ls = new List<object>(obj);
            return ls;
        }

        public virtual List<GetFeeExamSubjectData> FeeExamSubjectData(int SchoolID, int AcaStart, int FeeHeadID, int ExamGroupID)
        {
            SqlParameter[] param = new SqlParameter[] 
                    { 
                        new SqlParameter("@ArgSchoolID",SchoolID),
                        new SqlParameter("@ArgAcaStart",AcaStart),
                        new SqlParameter("@ArgFeeHeadID",FeeHeadID),
                        new SqlParameter("@ArgExamGroupID",ExamGroupID)
                    };
            return Database.SqlQuery<GetFeeExamSubjectData>("FeeExamSubjectData @ArgSchoolID,@ArgAcaStart,@ArgFeeHeadID,@ArgExamGroupID", param).ToList();
        }

        public virtual List<object> fillFeeConcessionSettingsGrid(int AcaStart, int SchoolID, int FeeConcessionTypeID)
        {
            var obj = (from FHM in FEEHeadMasters
                       join FCS in FeeConcessionSettingss on FHM.FHeadID equals FCS.FHID into ps
                       from FCS in ps.Where(model => model.FeeConcessTypeID == FeeConcessionTypeID).DefaultIfEmpty()
                       where FHM.AutoID != 0 && FHM.SchoolID == SchoolID && (FHM.AcaStart == AcaStart || FHM.AcaStart == null) //&& FHM.Type == "S"
                       orderby FHM.FPntHead
                       select new { FHM.AutoID, FHM.FHeadID, FHM.FHName, FCS.Perct, FHM.Type }).Where(model => model.Type == "S" || model.FHeadID == 7 || model.FHeadID == 8);

            List<object> ls = new List<object>(obj);
            return ls;
        }

        public List<object> fillFeeActivityMasterGrid(int AcaStart, int SchoolID, int FeeHeadID)
        {
            //SELECT IM.FeeInstallmentID As FeeInstallmentID,FeeInstallmentName" + Session["Type"].ToString() + "  AS FeeInstallmentName, Cast(Amount as Numeric(18,0)) AS Amount  FROM FeeInstallmentMaster IM   " +
            //                   " LEFT JOIN FEEActivityMaster AM   ON  AM.FeeInstallmentID=IM.FeeInstallmentID   AND  FEEHeadID=" + ddlActivity.SelectedValue + " WHERE  IM.FeeInstallmentID<>0 AND IM.SchoolID=" + Session["SchoolID"] + " ORDER BY FeeInstallmentID
            var obj = from FIM in FEEInstallmentMasters
                      join FAM in FeeActivityMasters on FIM.AutoID equals FAM.FIID into ps
                      from FAM in ps.Where(model => model.FHID == FeeHeadID && model.FHID != 0).DefaultIfEmpty()
                      where FIM.AutoID != 0 && FIM.SchoolID == SchoolID && FIM.AcaStart == AcaStart
                      orderby FIM.AutoID
                      select new { FIM.AutoID, FIM.FIName, FAM.Amount };

            List<object> ls = new List<object>(obj);
            return ls;
        }

        public virtual List<ReturnNumeric> FeeStructureMasterCheck(int FGID, int FIID, int FHID, decimal Amount, int AcaStart, int SchoolID)
        {
            SqlParameter[] param = new SqlParameter[] 
                    { 
                        new SqlParameter("@FGID",FGID),
                        new SqlParameter("@FIID",FIID),
                        new SqlParameter("@FHID",FHID),
                        new SqlParameter("@Amount",Amount),
                        new SqlParameter("@AcaStart",AcaStart),
                        new SqlParameter("@SchoolID",SchoolID)
                    };
            Database.CommandTimeout = 0;
            return Database.SqlQuery<ReturnNumeric>("FeeStructureMasterCheck @FGID,@FIID,@FHID,@Amount,@AcaStart,@SchoolID", param).ToList();
        }

        public virtual List<FeeStudentDetails> FeeStudentDetails(int AcaStart, int SchoolID, string argValue, string argType)
        {
            SqlParameter[] param = new SqlParameter[] 
                { 
                    new SqlParameter("@ArgAcaStart",AcaStart),
                    new SqlParameter("@ArgSchoolID",SchoolID),
                    new SqlParameter("@ArgValue",argValue),
                    new SqlParameter("@ArgType",argType)
                };
            return Database.SqlQuery<FeeStudentDetails>("FeeStudentDetails @ArgAcaStart,@ArgSchoolID,@ArgValue,@ArgType", param).ToList();
        }

        public virtual DataSet FeeBindConcessionEntry(int StudentID, int AcaStart, int SchoolID)
        {
            SqlParameter[] param = new SqlParameter[] 
                { 
                    new SqlParameter("@ArgStudentID",StudentID),
                    new SqlParameter("@ArgAcastart",AcaStart),
                    new SqlParameter("@ArgSchoolID",SchoolID)
                };
            DataSet ds = GetSPFromSql("FeeBindConcessionEntry", param);
            return ds;
        }

        public List<FeeFixedClassWiseDetails> FeeFixedAmountEntryClassWise(int AcaStart, int SchoolID, int FHID, int FIID, int ClassID, int SectionID)
        {

            SqlParameter[] param = new SqlParameter[] 
            { 
                new SqlParameter("@AcaStart",AcaStart),
                new SqlParameter("@SchoolID",SchoolID),
                new SqlParameter("@FIID",FIID),
                new SqlParameter("@FHID",FHID),
                new SqlParameter("@ClassID",ClassID),
                new SqlParameter("@SectionID",SectionID)
            };
            return Database.SqlQuery<FeeFixedClassWiseDetails>("FeeFixedAmountEntryClassWise @AcaStart,@SchoolID,@FIID,@FHID,@ClassID,@SectionID", param).ToList();
        }

        public List<FeeFixedStudentWiseDetails> FeeFixedAmountEntryStudentWise(int AcaStart, int SchoolID, int FIID, int StudentID)
        {
            SqlParameter[] param = new SqlParameter[] 
            { 
                new SqlParameter("@ArgAcaStart",AcaStart),
                new SqlParameter("@ArgSchoolID",SchoolID),
                new SqlParameter("@ArgFIID",FIID),
                new SqlParameter("@ArgStudentID",StudentID),
            };
            return Database.SqlQuery<FeeFixedStudentWiseDetails>("FeeFixedAmountEntryStudentWise @ArgAcaStart,@ArgSchoolID,@ArgFIID,@ArgStudentID", param).ToList();
        }

        public virtual List<ReturnNumeric> FeeFixedDeleteCheck(int StudentID, int FHID, int FIID, int AcaStart, int SchoolID)
        {
            SqlParameter[] param = new SqlParameter[] 
            { 
                new SqlParameter("@ArgStudentID",StudentID),
                new SqlParameter("@ArgFHID",FHID),
                new SqlParameter("@ArgFIID",FIID),
                new SqlParameter("@ArgAcaStart",AcaStart),
                new SqlParameter("@ArgSchoolID",SchoolID)
            };

            return Database.SqlQuery<ReturnNumeric>("FeeFixedDeleteCheck @ArgStudentID,@ArgFHID,@ArgFIID,@ArgAcaStart,@ArgSchoolID", param).ToList();
        }

        public virtual List<FeeReceiptDetail_Summ> FeeReceiptDetails_Summ(int SchoolID, int AcaStart, int StudentId)
        {
            SqlParameter[] param = new SqlParameter[] 
            { 
                new SqlParameter("@ArgSchoolID",SchoolID),
                new SqlParameter("@ArgAcaStart",AcaStart),
                new SqlParameter("@ArgStudentId",StudentId),
                new SqlParameter("@ArgFlag","Summ")
            };

            return Database.SqlQuery<FeeReceiptDetail_Summ>("FeeReceiptDetails @ArgSchoolId,@ArgAcaStart,@ArgStudentId,@ArgFlag", param).ToList();
        }

        public virtual List<FeeReceiptDetail_Det> FeeReceiptDetails_Det(int SchoolID, int AcaStart, int StudentId)
        {
            SqlParameter[] param = new SqlParameter[] 
            { 
                new SqlParameter("@ArgSchoolID",SchoolID),
                new SqlParameter("@ArgAcaStart",AcaStart),
                new SqlParameter("@ArgStudentId",StudentId),
                new SqlParameter("@ArgFlag","Det")
            };

            return Database.SqlQuery<FeeReceiptDetail_Det>("FeeReceiptDetails @ArgSchoolId,@ArgAcaStart,@ArgStudentId,@ArgFlag", param).ToList();
        }

        public virtual List<FeeReceiptDetail_Chq> FeeReceiptDetails_Chq(int SchoolID, int AcaStart, int StudentId)
        {
            SqlParameter[] param = new SqlParameter[]
            { 
                new SqlParameter("@ArgSchoolID",SchoolID),
                new SqlParameter("@ArgAcaStart",AcaStart),
                new SqlParameter("@ArgStudentId",StudentId),
                new SqlParameter("@ArgFlag","Chq")
            };

            return Database.SqlQuery<FeeReceiptDetail_Chq>("FeeReceiptDetails @ArgSchoolId,@ArgAcaStart,@ArgStudentId,@ArgFlag", param).ToList();
        }

        public virtual List<FeeChequeDetails> FeeChequeDetails(int SchoolID, int AcaStart, string ArgValue, string ArgType)
        {
            SqlParameter[] param = new SqlParameter[] 
            { 
                    new SqlParameter("@ArgArgValue",ArgValue),
                    new SqlParameter("@ArgArgType",ArgType),
                    new SqlParameter("@ArgAcaStart",AcaStart),
                    new SqlParameter("@ArgSchoolID",SchoolID)
            };

            return Database.SqlQuery<FeeChequeDetails>("FeeChequeDetails @ArgArgValue,@ArgArgType,@ArgAcaStart,@ArgSchoolID", param).ToList();
        }

        public virtual List<FeeChequeBounceDetails> FeeChequeBounceDetails(int SchoolID, int AcaStart, string FNo, string ChequeNo, string FIID, string FromDate, string ToDate)
        {
            SqlParameter[] param = new SqlParameter[] 
            { 
                    new SqlParameter("@ArgAcaStart",AcaStart),
                    new SqlParameter("@ArgSchoolID",SchoolID),
                    new SqlParameter("@ArgFNo",FNo),
                    new SqlParameter("@ArgFIID",FIID),
                    new SqlParameter("@ArgChequeNo",ChequeNo),
                    new SqlParameter("@ArgFromDate",FromDate),
                    new SqlParameter("@ArgToDate",ToDate)
            };

            return Database.SqlQuery<FeeChequeBounceDetails>("FeeChequeBounceDetails @ArgAcaStart,@ArgSchoolID,@ArgFNo,@ArgFIID,@ArgChequeNo,@ArgFromDate,@ArgToDate", param).ToList();
        }

        public virtual List<object> fillPettyReceiptDetails(int SchoolID, int AcaStart, DateTime RecDate)
        {
            var obj = from PAM in FEEPettyAccountMasters
                      join PAD in FEEPettyAccountDetails on PAM.AutoID equals PAD.PID
                      join PM in FeePayModeMasters on PAM.PMID equals PM.AutoID
                      join CM in MTClassMasters on PAM.CLID equals CM.AutoID into qs
                      from CM in qs.DefaultIfEmpty()
                      where PAM.RDate == RecDate && PAM.AcaStart == AcaStart && PAM.SchoolID == SchoolID
                      group new { PAM, PAD, PM, CM } by new { PAM.AutoID, PAM.RNo, PAM.RDate, PAM.Depby, PAM.SName, PAM.CLID, CM.ClassName, PAM.PMID, PAM.ChqBounce, PAM.Can, PAM.ChqNo, PAM.ChqDate, PM.PayModeName, PAM.BID } into main
                      select new { PID = main.Key.AutoID, main.Key.RNo, main.Key.RDate, main.Key.Depby, main.Key.SName, main.Key.CLID, main.Key.ClassName, main.Key.PMID, Amount = main.Sum(model => model.PAD.Amount), PayMode = (main.Key.ChqBounce == true ? "(Bounced)" : (main.Key.Can == true ? "(Cancelled)" : main.Key.PayModeName)), main.Key.ChqBounce, main.Key.Can, main.Key.ChqNo, main.Key.ChqDate, main.Key.BID };

            List<object> ls = new List<object>(obj);
            return ls;
        }

        public virtual List<FeeActivityStudentWise> spSIStudentActivityDetails(int SchoolID, int AcaStart, int StudentID)
        {
            SqlParameter[] param = new SqlParameter[] 
            { 
                    new SqlParameter("@ArgSchoolId",SchoolID),
                    new SqlParameter("@ArgAcaStart",AcaStart),
                    new SqlParameter("@ArgStudent",StudentID)
            };

            return Database.SqlQuery<FeeActivityStudentWise>("spSIStudentActivityDetails @ArgSchoolId,@ArgAcaStart,@ArgStudent", param).ToList();
        }

        public virtual List<FeeActivityClassWise> spSIStudentClassSectionActivityDetails(int SchoolID, int AcaStart, int ClassID, int SectionID, int FeeHeadID)
        {
            SqlParameter[] param = new SqlParameter[] 
            { 
                    new SqlParameter("@ClassID",ClassID),
                    new SqlParameter("@SectionID",SectionID),
                    new SqlParameter("@FeeHeadID",FeeHeadID),
                    new SqlParameter("@ArgSchoolId",SchoolID),
                    new SqlParameter("@ArgAcaStart",AcaStart)
            };

            return Database.SqlQuery<FeeActivityClassWise>("spSIStudentClassSectionActivityDetails @ClassID,@SectionID,@FeeHeadID,@ArgSchoolId,@ArgAcaStart", param).ToList();
        }

        public virtual DataSet spFeeGetDueAmount(int ArgSchoolID, string ArgStudentID, string ArgClass, int ArgYStart, string ArgIntFGID, int ArgFromMonID, int ArgToMonID, int ArgFeeType, string ArgSummaryDetail)
        {
            SqlParameter[] param = new SqlParameter[] 
                { 
                    new SqlParameter("@ArgSchoolID",ArgSchoolID),
                    new SqlParameter("@ArgStudentID",ArgStudentID),
                    new SqlParameter("@ArgClass",ArgClass),
                    new SqlParameter("@ArgYStart",ArgYStart),
                    new SqlParameter("@ArgIntFGID",ArgIntFGID),
                    new SqlParameter("@ArgFromMonID",ArgFromMonID),
                    new SqlParameter("@ArgToMonID",ArgToMonID),
                    new SqlParameter("@ArgFeeType",ArgFeeType),
                    new SqlParameter("@ArgSummaryDetail",ArgSummaryDetail)
                };
            DataSet ds = GetSPFromSql("spFeeGetDueAmount", param);
            return ds;
        }

        public virtual DataSet spFeeCollectionEntry(int ArgSchoolID, int ArgStudentID, int ArgYStart, string ArgIntFGID, int ArgFromMonID, int ArgToMonID, int ArgFeeType, string ArgSummaryDetail, string ArgDate)
        {
            SqlParameter[] param = new SqlParameter[] 
                { 
                    new SqlParameter("@ArgSchoolID",ArgSchoolID),
                    new SqlParameter("@ArgStudentID",ArgStudentID),
                    new SqlParameter("@ArgYStart",ArgYStart),
                    new SqlParameter("@ArgIntFGID",ArgIntFGID),
                    new SqlParameter("@ArgFromMonID",ArgFromMonID),
                    new SqlParameter("@ArgToMonID",ArgToMonID),
                    new SqlParameter("@ArgFeeType",ArgFeeType),
                    new SqlParameter("@ArgSummaryDetail",ArgSummaryDetail),
                    new SqlParameter("@ArgDate",ArgDate)
                };
            //List<object> ls = new List<object>();
            //ls = Database.SqlQuery<object>("spFeeCollectionEntry @ArgSchoolID,@ArgStudentID,@ArgYStart,@ArgIntFGID,@ArgFromMonID,@ArgToMonID,@ArgFeeType,@ArgSummaryDetail,@ArgDate", param).ToList();
            DataSet ds = GetSPFromSql("spFeeCollectionEntry", param);
            return ds;

        }

        public virtual List<int> spFeeParentFeeEntry(string PostParam, int SchoolID, int AcaStart, string SessionID, string FormName)
        {
            SqlParameter[] param = new SqlParameter[] 
                    { 
                        new SqlParameter("@PostParam",PostParam),
                        new SqlParameter("@ArgSchoolID",SchoolID),
                        new SqlParameter("@ArgYStart",AcaStart),
                        new SqlParameter("@SessionID", SessionID),
                        new SqlParameter("@FormName",FormName),
                        new SqlParameter("@Flag","NOPARAM")
                    };            
            return Database.SqlQuery<int>("spFeeParentFeeEntry @PostParam,@ArgSchoolID,@ArgYStart,@SessionID,@FormName,@Flag", param).ToList(); 
        }

        public virtual List<object> fillFeeRefundGrid(int SchoolID, int AcaStart, int SID, int FIID, int PayTypeID)
        {
            //SELECT StudentID AS Stud,FD.FeeHeadID, 0 as SNo,FeeHeadName1 As Head,  
            //CONVERT(DECIMAL(18,0),(SUM(Amount)-SUM(ConAmount))) AS Paid,'' As Refund  
            //FROM FEEAccountMaster FM INNER JOIN  FEEAccountDetail FD ON FM.BillNo=FD.BillNO  
            //INNER JOIN FEEHeadMaster HM ON HM.FEEHEadID=FD.FEEHeadID  
            //INNER JOIN FEEGroupMaster GM ON GM.FeeGroupID=FM.FeeGroupID  
            //WHERE StudentID=@ArgStudentID  AND FM.FeeInstallmentID=@ArgInstallID  AND  
            //GM.AcaStart=@ArgAcaStart AND GM.SchoolID=@ArgSchoolID AND HM.SchoolID=@ArgSchoolID  
            //AND FM.FeePayTypeID=@ArgAccType  
            //GROUP BY StudentID,FD.FEEHEADID,FeeHeadName1 HAVING (SUM(Amount)-SUM(ConAmount))>0 

            var obj = from FAM in FEEAccountMasters
                      join FAD in FEEAccountDetails on FAM.AutoID equals FAD.BLNo
                      join FHM in FEEHeadMasters on FAD.FHeadID equals FHM.FHeadID
                      where FAM.StdID == SID && FAM.Cancel == false && FAD.ChqBounce == false && FAM.AcaStart == AcaStart && FAM.SchoolID == SchoolID && FHM.AcaStart == AcaStart && FHM.SchoolID == SchoolID && FAM.FPTypeID == PayTypeID && FAD.FIID == FIID
                      group new { FAM, FAD, FHM } by new { FAM.StdID, FHM.FHeadID, FHM.FHName } into qs
                      where qs.Sum(model => (model.FAD.Amount - model.FAD.ConAmount)) > 0
                      select new { qs.Key.StdID, FHID = qs.Key.FHeadID, qs.Key.FHName, Paid = qs.Sum(model => (model.FAD.Amount - model.FAD.ConAmount)) };

            List<object> ls = new List<object>(obj);
            return ls;
        }

        public virtual List<FeebindGridData> fillFeePaidAmount(int SchoolID, int AcaStart, int SID, int FIID)
        {
            List<FeebindGridData> ls = (from FAM in FEEAccountMasters
                                        join FAD in FEEAccountDetails on FAM.AutoID equals FAD.BLNo
                                        join FHM in FEEHeadMasters on FAD.FHeadID equals FHM.FHeadID
                                        where FAM.StdID == SID && FAM.Cancel == false && FAD.ChqBounce == false && FAM.AcaStart == AcaStart && FAM.SchoolID == SchoolID && (FHM.AcaStart == AcaStart || FHM.FHeadID == 7 || FHM.FHeadID == 8 || FHM.FHeadID == 4) && FHM.SchoolID == SchoolID && FAD.FIID == FIID
                                        group new { FAM, FAD, FHM } by new { FAM.StdID, FHM.FHeadID, FHM.FHName } into qs
                                        where qs.Sum(model => (model.FAD.Amount - model.FAD.ConAmount)) > 0
                                        select new FeebindGridData { StudentID = (int)qs.Key.StdID, FeeHeadID = qs.Key.FHeadID, FeeHeadName = qs.Key.FHName, PaidAmt = (int)(qs.Sum(model => (model.FAD.Amount - model.FAD.ConAmount))) }).ToList();
            return ls;
        }

        public virtual List<FeeSearch> FEESearchDetails(int SchoolID, int AcaStart, string ChequeNo, int ReceiptNo, int BankID)
        {
            SqlParameter[] param = new SqlParameter[] 
            { 
                    new SqlParameter("@ArgAcaStart",AcaStart),
                    new SqlParameter("@ArgSchoolID",SchoolID),
                    new SqlParameter("@ArgChequeNo",ChequeNo),
                    new SqlParameter("@ArgReceiptNo",ReceiptNo),
                    new SqlParameter("@ArgBankID",BankID)
            };

            return Database.SqlQuery<FeeSearch>("FEESearchDetails @ArgAcaStart,@ArgSchoolID,@ArgChequeNo,@ArgReceiptNo,@ArgBankID", param).ToList();
        }

        public virtual List<FeeDayWiseCollection> FeeDayWiseCollection(int SchoolID, int AcaStart, string Date, int PayMode, int PayIn, int ClassID, int SectionID, int StudentID)
        {
            SqlParameter[] param = new SqlParameter[] 
            { 
                    new SqlParameter("@ArgAcaStart",AcaStart),
                    new SqlParameter("@ArgSchoolID",SchoolID),
                    new SqlParameter("@ArgDate",Date),
                    new SqlParameter("@ArgPayModeID",PayMode),
                    new SqlParameter("@ArgPayModeInID",PayIn),
                    new SqlParameter("@ArgClassID",ClassID),
                    new SqlParameter("@ArgSectionID",SectionID),
                    new SqlParameter("@ArgStudentID",StudentID)
            };

            return Database.SqlQuery<FeeDayWiseCollection>("FeeDayWiseCollection @ArgAcaStart,@ArgSchoolID,@ArgDate,@ArgPayModeID,@ArgPayModeInID,@ArgClassID,@ArgSectionID,@ArgStudentID", param).ToList();
        }


        public virtual List<FeeExcessTransfer> FeeExcessAmountTransfer(int SchoolID, int AcaStart, int ClassID, int SectionID)
        {
            SqlParameter[] param = new SqlParameter[] 
            { 
                    new SqlParameter("@ArgSchoolID",SchoolID),
                    new SqlParameter("@ArgAcaStart",AcaStart),
                    new SqlParameter("@ArgClassID",ClassID),
                    new SqlParameter("@ArgSectionID",SectionID)
            };

            return Database.SqlQuery<FeeExcessTransfer>("FeeExcessAmountTransfer @ArgSchoolID,@ArgAcaStart,@ArgClassID,@ArgSectionID", param).ToList();
        }

        public virtual List<string> FeeTransferToNextYear(int AcaStart, int SchoolID, int UID, string type)
        {
            SqlParameter[] param = new SqlParameter[]
            {
                new SqlParameter("@ArgAcaStart",AcaStart),
                new SqlParameter("@ArgSchoolID",SchoolID),
                new SqlParameter("@ArgUID",UID),
                new SqlParameter("@ArgType",type)
            };
            return Database.SqlQuery<string>("FeeTransferToNextYear @ArgAcaStart ,@ArgSchoolID ,@ArgUID ,@ArgType", param).ToList();
        }

        public virtual List<string> FeeExcessAmountTransferToNextYear(int AcaStart, int SchoolID, int UID, string ClassSection, string BillNo)
        {
            SqlParameter[] param = new SqlParameter[]
            {
                new SqlParameter("@ArgAcaStart",AcaStart),
                new SqlParameter("@ArgSchoolID",SchoolID),
                new SqlParameter("@ArgUID",UID),
                new SqlParameter("@ArgClassSection",ClassSection),
                new SqlParameter("@ArgBillNo",BillNo)
            };
            return Database.SqlQuery<string>("FeeExcessAmountTransferToNextYear @ArgAcaStart ,@ArgSchoolID ,@ArgUID, @ArgClassSection, @ArgBillNo", param).ToList();
        }

        public int FeeReceipts(string BillNo, int AcaStart, int SchoolID, int Flag, string SessionID)
        {
            SqlParameter[] param = new SqlParameter[]
            { 
                new SqlParameter("@ArgBillNo",BillNo),
                new SqlParameter("@ArgYStart",AcaStart),
                new SqlParameter("@ArgSchoolID",SchoolID),
                new SqlParameter("@ArgFlag",Flag),
                new SqlParameter("@ArgSessionID",SessionID)
            };

            return Database.ExecuteSqlCommand("FeeReceipts @ArgBillNo,@ArgYStart,@ArgSchoolID,@ArgFlag, @ArgSessionID", param);
        }

        public int FeeAdvanceBill(string StudentID, int FromMonID, int ToMonID, int FeeType, int SchoolID, int AcaStart)
        {
            SqlParameter[] param = new SqlParameter[]
            { 
                new SqlParameter("@ArgStudentID",StudentID),
                new SqlParameter("@ArgFromMonID",FromMonID),
                new SqlParameter("@ArgToMonID",ToMonID),
                new SqlParameter("@ArgFeeType",FeeType),
                new SqlParameter("@ArgSchoolID",SchoolID),
                new SqlParameter("@ArgAcaStart",AcaStart)
            };

            return Database.ExecuteSqlCommand("FeeAdvanceBill @ArgStudentID,@ArgFromMonID,@ArgToMonID,@ArgFeeType,@ArgSchoolID,@ArgAcaStart", param);
        }


        //public virtual List<string> FeeOnlineFileUploadSettallement(DataTable dt, int UID, int AcaStart, int SchoolID, string Discription)
        //{
        //    SqlParameter[] param = new SqlParameter[]
        //    {
        //        new SqlParameter("@ArgAcaStart",AcaStart),
        //        new SqlParameter("@ArgSchoolID",SchoolID),
        //        new SqlParameter("@ArgUID",UID),
        //        new SqlParameter("@ArgDiscription",Discription),
        //        new SqlParameter("@Argdt",SqlDbType.Structured)
        //    };
        //    param[3].TypeName = "ut_FileUploadSettallement";
        //    param[3].Value = dt;
        //    //DataSet ds = GetSPFromSql("FeeOnlineFileUploadSettallement", param);
        //    return Database.SqlQuery<string>("FeeOnlineFileUploadSettallement @ArgAcaStart ,@ArgSchoolID ,@ArgUID,@ArgDiscription ,@Argdt", param).ToList();
        //}

        public virtual List<string> FeeBankCollectionEntry(DataTable dt, int UID, int AcaStart, int SchoolID, string Discription)
        {
            SqlParameter[] param = new SqlParameter[]
            {
                new SqlParameter("@ArgAcaStart",AcaStart),
                new SqlParameter("@ArgSchoolID",SchoolID),
                new SqlParameter("@ArgUID",UID),
                new SqlParameter("@ArgDiscription",Discription),
                new SqlParameter("@Argdt",SqlDbType.Structured)
            };
            param[3].TypeName = "ut_FeeBankCollectionEntry";
            param[3].Value = dt;
            //DataSet ds = GetSPFromSql("FeeOnlineFileUploadSettallement", param);
            return Database.SqlQuery<string>("FeeBankCollectionEntry @ArgAcaStart ,@ArgSchoolID ,@ArgUID,@ArgDiscription ,@Argdt", param).ToList();
        }

        public virtual List<object> fillFeeOnlineStatusUpdate(int SchoolID, int AcaStart, string TransactionNo)
        {
            //Select SuccessStatus,PayForFlag,AtomTransactionID,BankTransactionID,BankName FROM FeeOnlinePaymentMaster PM left join FeeOnlineSystemTransactionBillNo OT ON PM.SystemTransactionID=OT.SystemTransactionID 
            //where SchoolID=" + Session["SchoolID"] + " AND AcaStart=" + Session["Acastart"] + " AND UserSystemTransactionID='" + txtTransactionNo.Text.Trim().Replace("'", "") + "' and PM.SystemTransactionID not in (select SystemTransactionID from FeeOnlineSystemTransactionBillNo) AND SuccessStatus IN ('UNSUCCESSFUL','SUCCESSFUL','TRANSACTION BEGIN')
            string[] arr = { "UNSUCCESSFUL", "TRANSACTION BEGIN" };
            var obj = from PM in FeeOnlinePaymentMasters
                      join OT in FeeOnlineSystemTransactionBillNos on PM.AutoID equals OT.SystemTransactionID into qs
                      from OT in qs.DefaultIfEmpty()
                      where PM.SchoolID == SchoolID && PM.AcaStart == AcaStart && PM.UserSystemTransactionID == TransactionNo && arr.Contains(PM.SuccessStatus)
                      select new { PM.AutoID, PM.SuccessStatus, PM.PayForFlag, PM.AtomTransactionID, PM.BankTransactionID, PM.BankName };
            List<object> ls = new List<object>(obj);

            var obj2 = (from PM in FeeOnlinePaymentMasters
                        join PD in MTUserMasters on PM.RequestUserID equals PD.UID
                        join SYD in SRStudentMasters on
                        new { StudentID = (int)PD.EmployeeIDStudentID, PM.AcaStart, PM.SchoolID } equals new { StudentID = SYD.ARStudentIDs, AcaStart = SYD.AcaStarts, SchoolID = SYD.SchoolIDs }
                        where PM.SchoolID == SchoolID && PM.AcaStart == AcaStart && PD.UserTypeID == 6 && PM.UserSystemTransactionID == TransactionNo && arr.Contains(PM.SuccessStatus)
                        select new { PM.AutoID, PM.UserSystemTransactionID, PM.RequestTime, SYD.ARStudentIDs, AdmNo = SYD.ReferenceNos, Name = SYD.FName + " " + SYD.MName + " " + SYD.LName, PM.AtomVerify, PM.PayAmt, PM.SuccessStatus, PM.PayForFlag }).Distinct().OrderBy(model => new { model.SuccessStatus, model.AutoID }).ToList();

            ls.AddRange(obj2);
            return ls;
        }



        public List<object> fillFeeOnlineStatusDetail(int SchoolID, int AcaStart, DateTime FromDate, DateTime ToDate, string StatusType)
        {
            //Select Distinct FOM.SystemTransactionID AS SysTranID,UserSystemTransactionID AS UserSysTranID, " +
            //" Convert(Varchar,RequestTime,103) as RequestTime,SYD.StudentID,AdmissionNo As AdmNo,FirstName+' '+MiddleName+' '+LastName AS Name,SuccessStatus, " +
            //" AtomVerify As AtomStatus,Cast(PayAmt as Varchar) as PayAmt,PayForFlag as Flag 
            //from FeeOnlinePaymentMaster FOM Inner Join FeeOnlinePaymentDetail FOD ON FOM.SystemTransactionID=FOD.SystemTransactionID " +
            //" Inner Join SIStudentYearWiseDetails SYD ON SYD.StudentID=FOD.StudentID Inner Join SIStudentMaster SM ON SM.StudentID=SYD.StudentID " +
            //" Where SYD.AcaStart=" + Session["AcaStart"] + " And SYD.SchoolID=" + Session["SchoolID"] + " And Verify IS Null AND SuccessStatus<>'NEW' And " +
            //" Cast(RequestTime as Date)>='" + objCCWeb.ChangeYYYYMMDD(txtDate.Text).ToString() + "' And Cast(RequestTime as Date)<='" + objCCWeb.ChangeYYYYMMDD(txtToDate.Text).ToString() + "' order by SuccessStatus,FOM.SystemTransactionID 

            var obj = (from PM in FeeOnlinePaymentMasters
                       //join PD in FeeOnlinePaymentDetails on PM.AutoID equals PD.SystemTransactionID
                       join PD in FeeOnlineMasters on PM.AutoID equals PD.SystemTransactionID
                       join SYD in SIStudentYearWiseDetails on new { StudentID = (int)PD.StudentID, PM.AcaStart, PM.SchoolID } equals new { StudentID = SYD.StudID, AcaStart = SYD.AcaStarting, SchoolID = SYD.SchID }
                       join SM in SIStudentMasters on SYD.StudID equals SM.StudID
                       where PM.SchoolID == SchoolID && PM.AcaStart == AcaStart && (PD.Verify == "N" || PD.Verify == null) && (StatusType == "0" ? PD.SuccessStatus != "New" : PD.SuccessStatus == StatusType)
                       && PM.RequestTime >= FromDate && PM.RequestTime <= ToDate
                       select new { PM.AutoID, PM.UserSystemTransactionID, PM.RequestTime, StudID = SYD.StudID, SYD.AdmNo, Name = SM.FName + " " + SM.MName + " " + SM.LName, PD.AtomVerify, PayAmt = PD.Amount, PD.SuccessStatus, PM.PayForFlag }).Distinct().OrderBy(model => new { model.SuccessStatus, model.AutoID });

            List<object> ls = new List<object>(obj);
            var obj2 = (from PM in FeeOnlinePaymentMasters
                        join PD in MTUserMasters on PM.RequestUserID equals PD.UID
                        join SYD in SRStudentMasters on new { StudentID = (int)PD.EmployeeIDStudentID, PM.AcaStart, PM.SchoolID } equals new { StudentID = SYD.ARStudentIDs, AcaStart = SYD.AcaStarts, SchoolID = SYD.SchoolIDs }
                        where PM.SchoolID == SchoolID && PM.AcaStart == AcaStart && (PM.Verify == "N" || PM.Verify == null) && (StatusType == "0" ? PM.SuccessStatus != "New" : PM.SuccessStatus == StatusType)
                        && PM.RequestTime >= FromDate && PM.RequestTime <= ToDate && PD.UserTypeID == 6
                        select new { PM.AutoID, PM.UserSystemTransactionID, PM.RequestTime, StudID = SYD.ARStudentIDs, AdmNo = SYD.ReferenceNos, Name = SYD.FName + " " + SYD.MName + " " + SYD.LName, PM.AtomVerify, PayAmt = PM.PayAmt, PM.SuccessStatus, PM.PayForFlag }).Distinct().OrderBy(model => new { model.SuccessStatus, model.AutoID }).ToList();

            ls.AddRange(obj2);
            return ls;
        }




        public virtual List<string> FeeOnlineFileUploadSettallement(DataTable dt, int UID, int AcaStart, int SchoolID, string Discription)
        {
            SqlParameter[] param = new SqlParameter[]
            {
                new SqlParameter("@ArgAcaStart",AcaStart),
                new SqlParameter("@ArgSchoolID",SchoolID),
                new SqlParameter("@ArgUID",UID),
                new SqlParameter("@ArgDiscription",Discription),
                new SqlParameter("@Argdt",SqlDbType.Structured)
            };
            param[4].TypeName = "ut_FileUploadSettallement";
            param[4].Value = dt;
            //DataSet ds = GetSPFromSql("FeeOnlineFileUploadSettallement", param);
            return Database.SqlQuery<string>("FeeOnlineFileUploadSettallement @ArgAcaStart ,@ArgSchoolID ,@ArgUID,@ArgDiscription ,@Argdt", param).ToList();
        }

        public virtual List<string> FeeBankCollectionFileUpload(DataTable dt, int UID, int AcaStart, int SchoolID, string Discription, string SessionID)
        {
            SqlParameter[] param = new SqlParameter[]
            {
                new SqlParameter("@ArgAcaStart",AcaStart),
                new SqlParameter("@ArgSchoolID",SchoolID),
                new SqlParameter("@ArgUID",UID),
                new SqlParameter("@ArgDiscription",Discription),
                new SqlParameter("@ArgSessionID",SessionID),
                new SqlParameter("@Argdt",SqlDbType.Structured)
            };
            param[5].TypeName = "ut_FeeBankCollectionEntry";
            param[5].Value = dt;
            //DataSet ds = GetSPFromSql("FeeOnlineFileUploadSettallement", param);
            return Database.SqlQuery<string>("FeeBankCollectionFileUpload @ArgAcaStart, @ArgSchoolID, @ArgUID, @ArgDiscription, @ArgSessionID, @Argdt", param).ToList();
        }

        public virtual List<string> FeeOnlineImportSettlementFileUpload(DataTable dt, int UID, int AcaStart, int SchoolID, string Discription, string SessionID)
        {
            SqlParameter[] param = new SqlParameter[]
            {
                new SqlParameter("@ArgAcaStart",AcaStart),
                new SqlParameter("@ArgSchoolID",SchoolID),
                new SqlParameter("@ArgUID",UID),
                new SqlParameter("@ArgDiscription",Discription),
                new SqlParameter("@ArgSessionID",SessionID),
                new SqlParameter("@Argdt",SqlDbType.Structured)
            };
            param[5].TypeName = "ut_FileUploadSettallement";
            param[5].Value = dt;
            //DataSet ds = GetSPFromSql("FeeOnlineFileUploadSettallement", param);
            return Database.SqlQuery<string>("FeeOnlineImportSettlementFileUpload @ArgAcaStart, @ArgSchoolID, @ArgUID, @ArgDiscription, @ArgSessionID, @Argdt", param).ToList();
        }

        public List<object> fillFeeOnlineSettlementDetail(int SchoolID, int AcaStart, DateTime FromDate, DateTime ToDate)
        {
            var obj = (from PM in FeeOnlinePaymentMasters
                       //join PD in FeeOnlinePaymentDetails on PM.AutoID equals PD.SystemTransactionID
                       join FOD in FeeOnlineMasters on PM.AutoID equals FOD.SystemTransactionID
                       join SYD in SIStudentYearWiseDetails on new { StudentID = (int)FOD.StudentID, PM.AcaStart, PM.SchoolID } equals new { StudentID = SYD.StudID, AcaStart = SYD.AcaStarting, SchoolID = SYD.SchID }
                       join SM in SIStudentMasters on SYD.StudID equals SM.StudID
                       join FSM in FeeOnlineSettlementMasters on PM.UserSystemTransactionID equals FSM.UserSystemTransactionID into ust
                       from objust in ust.DefaultIfEmpty()
                       join FSMT in FeeOnlineSettlementMasterTemps on PM.UserSystemTransactionID equals FSMT.UserSystemTransactionID into qs
                       from FSMT in qs.DefaultIfEmpty()
                       where PM.SchoolID == SchoolID && PM.AcaStart == AcaStart && FOD.SuccessStatus == "SUCCESSFUL"
                       && PM.RequestTime >= FromDate && PM.RequestTime <= ToDate && objust.UserSystemTransactionID == null
                       select new
                       {
                           PM.AutoID,
                           PM.UserSystemTransactionID,
                           PM.RequestTime,
                           StudID = SYD.StudID,
                           AdmNo = SYD.AdmNo,
                           Name = SM.FName + " " + SM.MName + " " + SM.LName,
                           FSMT.PaymentStatus,
                           PayAmt = FOD.Amount,
                           SuccessStatus = FOD.SuccessStatus,
                           PM.PayForFlag
                       }).Distinct().OrderBy(model => new { model.SuccessStatus, model.AutoID });

            List<object> ls = new List<object>(obj);
            var obj2 = (from PM in FeeOnlinePaymentMasters
                        join PD in MTUserMasters on PM.RequestUserID equals PD.UID
                        join SYD in SRStudentMasters on new { StudentID = (int)PD.EmployeeIDStudentID, PM.AcaStart, PM.SchoolID } equals new { StudentID = SYD.ARStudentIDs, AcaStart = SYD.AcaStarts, SchoolID = SYD.SchoolIDs }
                        join FSM in FeeOnlineSettlementMasters on PM.UserSystemTransactionID equals FSM.UserSystemTransactionID into ust
                        from objust in ust.DefaultIfEmpty()
                        join FSMT in FeeOnlineSettlementMasterTemps on PM.UserSystemTransactionID equals FSMT.UserSystemTransactionID into qs
                        from FSMT in qs.DefaultIfEmpty()
                        where PM.SchoolID == SchoolID && PM.AcaStart == AcaStart && PM.SuccessStatus == "SUCCESSFUL" && objust.UserSystemTransactionID == null
                        && PM.RequestTime >= FromDate && PM.RequestTime <= ToDate && PD.UserTypeID == 6
                        select new { PM.AutoID, PM.UserSystemTransactionID, PM.RequestTime, StudID = SYD.ARStudentIDs, AdmNo = SYD.ReferenceNos, Name = SYD.FName + " " + SYD.MName + " " + SYD.LName, FSMT.PaymentStatus, PayAmt = PM.PayAmt, SuccessStatus = PM.SuccessStatus, PM.PayForFlag }).Distinct().OrderBy(model => new { model.SuccessStatus, model.AutoID }).ToList();

            ls.AddRange(obj2);
            return ls;
        }

        public virtual DataSet FeeConcessionMapping(int ArgSchoolID, int ArgYStart, int ArgClassID, int ArgSectionD)
        {
            SqlParameter[] param = new SqlParameter[]
                {
                    new SqlParameter("@ArgSchoolID",ArgSchoolID),
                    new SqlParameter("@ArgAcaStart",ArgYStart),
                    new SqlParameter("@ArgClassID",ArgClassID),
                     new SqlParameter("@ArgSectionID",ArgSectionD)
                };
            DataSet ds = GetSPFromSql("FeeConcessionMapping", param);
            return ds;
        }

        public int SpGetDue(int FGID, int AcaStart, int SchoolID)
        {
            SqlParameter[] param = new SqlParameter[]
            {
                new SqlParameter("@ArgFGID",FGID),
                new SqlParameter("@ArgAcaStart",AcaStart),
                new SqlParameter("@ArgSchoolID",SchoolID)
            };

            return Database.ExecuteSqlCommand("SpGetDue @ArgFGID,@ArgAcaStart,@ArgSchoolID", param);
        }


        public virtual DataSet spFeeGetPreviousAmount(int ArgSchoolID, string ArgStudentID, int ArgYStart)
        {
            SqlParameter[] param = new SqlParameter[]
                {
                    new SqlParameter("@ArgSchoolID",ArgSchoolID),
                    new SqlParameter("@ArgStudentID",ArgStudentID),
                    new SqlParameter("@ArgYStart",ArgYStart),
                };
            DataSet ds = GetSPFromSql("PreviousDue", param);
            return ds;
        }


        #endregion

        #region 11. Exam Module

        public string fnRemoveWP(string text)
        {
            string strtext = "";
            if (text != "" && text != null)
            {
                strtext = text.Trim().Replace(" ", "{}").Replace("}{", "").Replace("{}", " ");
            }
            return strtext;
        }

        public List<MTCheckMaster> fillCWS(int CSID, string CSType, int intSchoolID, int intAcaStart)
        {

            SqlParameter[] param = new SqlParameter[] 
                            { 
                                new SqlParameter("@TypeID",CSID),
                                new SqlParameter("@Type",CSType),
                                new SqlParameter("@SchoolID",intSchoolID),
                                new SqlParameter("@AcaStart", intAcaStart),                        
                            };

            return Database.SqlQuery<MTCheckMaster>("ExamSWCMaster @TypeID, @Type, @SchoolID, @AcaStart", param).ToList();
        }

        public List<TempExamSubjectGradeComment> FillSCGGrid(int AcaStart, int SchoolID)
        {
            SqlParameter[] Param = new SqlParameter[]
                            {   
                                new SqlParameter("@AcaStart",AcaStart),
                                new SqlParameter("@SchoolID",SchoolID),     
                            };
            return Database.SqlQuery<TempExamSubjectGradeComment>("EXEC ExamSubjectCommentGrade @AcaStart,@SchoolID", Param).ToList();
        }

        public List<TempExamGradeRangeDetails> FillGradeRangeDetails(int AcaStart, int SchoolID, int GradeID)
        {
            SqlParameter[] param = new SqlParameter[] 
                            { 
                                new SqlParameter("@AcaStart",AcaStart),
                                new SqlParameter("@SchoolID",SchoolID),
                                new SqlParameter("@GradeID",GradeID),                        
                            };

            return Database.SqlQuery<TempExamGradeRangeDetails>("ExamGradeRangeDetails @AcaStart, @SchoolID, @GradeID", param).ToList();
        }

        public List<MTCheckMaster> fillExamClassSection(int intAcaStart, int intSchoolID, int CSID)
        {
            SqlParameter[] param = new SqlParameter[] 
                            { 
                                new SqlParameter("@ExamGroupID",CSID),                        
                                new SqlParameter("@SchoolID",intSchoolID),
                                new SqlParameter("@AcaStart", intAcaStart),                        
                            };

            return Database.SqlQuery<MTCheckMaster>("EXAMGroupClassSection @AcaStart, @SchoolID, @ExamGroupID", param).ToList();
        }

        public List<TempExamDisplayExamsGrid> FillDispalyExams(int ExamGroupID, int ExamID, int AcaStart, int SchoolID)
        {
            SqlParameter[] param = new SqlParameter[]
                        {
                            new SqlParameter("@ExamGroupID",ExamGroupID),
                            new SqlParameter("@ExamID",ExamID),
                            new SqlParameter("@AcaStart",AcaStart),
                            new SqlParameter("@SchoolID",SchoolID),
                        };
            return Database.SqlQuery<TempExamDisplayExamsGrid>("ExamDisplayExamsGrid @ExamGroupID,@ExamID,@AcaStart,@SchoolID", param).ToList();
        }

        public List<TempExamReportCard> FillRCData(string Type, int AcaStart, int SchoolID)
        {
            SqlParameter[] param = new SqlParameter[]
                            {
                                new SqlParameter("@RCType",Type),                        
                                new SqlParameter("@AcaStart",AcaStart),
                                new SqlParameter("@SchoolID",SchoolID),
                            };
            return Database.SqlQuery<TempExamReportCard>("ExamRCSettings @RCType,@AcaStart,@SchoolID", param).ToList();
        }

        public List<MTDDLMaster> FillExamDDLBind(int Acastart, int SchoolID, int ClassID, int SectionID, string Type)
        {
            SqlParameter[] Param = new SqlParameter[] { 
                                new SqlParameter("@AcaStart",Acastart),
                                new SqlParameter("@SchoolID",SchoolID),
                                new SqlParameter("@ClassID",ClassID),
                                new SqlParameter("@SectionID",SectionID),
                                new SqlParameter("@Type",Type),
                            };
            return Database.SqlQuery<MTDDLMaster>("EXEC ExamDurationBind @AcaStart,@SchoolID,@ClassID,@SectionID,@Type", Param).ToList();
        }

        public List<MTDDLMaster> FillExamEntryDDLBind(int Acastart, int SchoolID, int ClassID, int SectionID, int UserID, string Type)
        {
            SqlParameter[] Param = new SqlParameter[] { 
                                new SqlParameter("@AcaStart",Acastart),
                                new SqlParameter("@SchoolID",SchoolID),
                                new SqlParameter("@ClassID",ClassID),
                                new SqlParameter("@SectionID",SectionID),
                                new SqlParameter("@UserID",UserID),
                                new SqlParameter("@Type",Type),
                            };
            return Database.SqlQuery<MTDDLMaster>("EXEC ExamMarkEntryClassSecBind @AcaStart,@SchoolID,@ClassID,@SectionID,@UserID,@Type", Param).ToList();
        }

        public List<TempClassWiseSubject> FillClassWiseSubject(int AcaStart, int SchoolID, int ClassID, int SectionID, int ExamID, int ExamSGID, string strVar)
        {
            SqlParameter[] Param = new SqlParameter[] { 
                        new SqlParameter("@AcaStart",AcaStart),
                        new SqlParameter("@SchoolID",SchoolID),
                        new SqlParameter("@ClassID",ClassID),
                        new SqlParameter("@SectionID",SectionID),
                        new SqlParameter("@ExamID",ExamID),
                        new SqlParameter("@ExamSGID",ExamSGID),
                        new SqlParameter("@strVar",strVar),
                    };
            return Database.SqlQuery<TempClassWiseSubject>("EXEC ExamBindGridECS @AcaStart,@SchoolID,@ClassID,@SectionID,@ExamID,@ExamSGID,@strVar", Param).ToList();
        }

        public List<TempCSNumric> FillCSNumeric(int AcaStart, int SchoolID, int ClassID, int SectionID, int ExamID, int ExamSGID)
        {
            SqlParameter[] Param = new SqlParameter[]
                    {
                        new SqlParameter("@AcaStart",AcaStart),
                        new SqlParameter("@SchoolID",SchoolID),
                        new SqlParameter("@ClassID",ClassID),
                        new SqlParameter("@SectionID",SectionID),
                        new SqlParameter("@ExamID",ExamID),
                        new SqlParameter("@ExamSGID",ExamSGID),
                    };
            return Database.SqlQuery<TempCSNumric>("EXEC ExamBindGridESM @AcaStart,@SchoolID,@ClassID,@SectionID,@ExamID,@ExamSGID", Param).ToList();
        }

        public List<TempCWPGrid> FillCWPGrid(string TableName, int AcaStart, int SchoolID, int UID)
        {
            SqlParameter[] Param = new SqlParameter[]
                    {
                        new SqlParameter("@TableName",TableName),
                        new SqlParameter("@AcaStart",AcaStart),
                        new SqlParameter("@SchoolID",SchoolID),
                        new SqlParameter("@UID",UID),
                    };
            return Database.SqlQuery<TempCWPGrid>("EXEC ExamEntryPermission @TableName,@AcaStart,@SchoolID,@UID", Param).ToList();
        }

        public List<TempEELockingGrid> FillELSGrid(int AcaStart, int SchoolID, int ExamID)
        {
            SqlParameter[] Param = new SqlParameter[]
                    {                        
                        new SqlParameter("@AcaStart",AcaStart),
                        new SqlParameter("@SchoolID",SchoolID),                     
                        new SqlParameter("@ExamID",ExamID),      
                    };
            return Database.SqlQuery<TempEELockingGrid>("EXEC ExamExamLockingGrid @AcaStart,@SchoolID,@ExamID", Param).ToList();
        }

        public List<TempAssessmentEntry> FillAEGrid(int ClassID, int SectionID, int ExamID, int SGID, int SubjectID, string AssessmentID, int AcaStart, int SchoolID, int OptionalID, string STC)
        {
            SqlParameter[] Param = new SqlParameter[]
                            {                        
                                new SqlParameter("@intClassID",ClassID),
                                new SqlParameter("@intSectionID",SectionID),
                                new SqlParameter("@intExamID",ExamID),
                                new SqlParameter("@intSubjectGrpID",SGID),
                                new SqlParameter("@intSubjectID",SubjectID),
                                new SqlParameter("@intAssessmentID",AssessmentID),
                                new SqlParameter("@AcaStart",AcaStart),
                                new SqlParameter("@SchoolID",SchoolID),                     
                                new SqlParameter("@intOptional",OptionalID),      
                                new SqlParameter("@STC",STC),      
                            };
            return Database.SqlQuery<TempAssessmentEntry>("EXEC ExamAssessmentEntryGrid @intClassID,@intSectionID,@intExamID,@intSubjectGrpID,@intSubjectID,@intAssessmentID,@AcaStart,@SchoolID,@intOptional,@STC", Param).ToList();
        }

        public List<TempAttendanceEntry> FillATTGrid(int ClassID, int SectionID, int ExamID, int SGID, int SubjectID, int AttendanceID, int AcaStart, int SchoolID, string STC)
        {
            SqlParameter[] Param = new SqlParameter[]
                            {                        
                               	new SqlParameter("@intClassID",ClassID),
                                new SqlParameter("@intSectionID",SectionID),
                               	new SqlParameter("@intExamID",ExamID),
                                new SqlParameter("@intSubjectGrpID",SGID),
                                new SqlParameter("@intSubjectID",SubjectID),
                                new SqlParameter("@AttendanceID",AttendanceID),
                                new SqlParameter("@AcaStart",AcaStart),
                                new SqlParameter("@SchoolID",SchoolID),                     
                                new SqlParameter("@STC",STC),   
                            };
            return Database.SqlQuery<TempAttendanceEntry>("EXEC ExamAttendanceEntryGrid @intClassID,@intSectionID,@intExamID,@intSubjectGrpID,@intSubjectID,@AttendanceID,@AcaStart,@SchoolID,@STC", Param).ToList();
        }

        public List<TempStudentMarkEntry> FillStudentMarkEntryGrid(int AcaStart, int SchoolID, int ClassID, int SectionID, int ExamID, int SGID, int StudentID, int EntryStyleID, int UID)
        {
            SqlParameter[] Param = new SqlParameter[]
                            {   
                                new SqlParameter("@intAcaStart",AcaStart),
                                new SqlParameter("@intSchoolID",SchoolID),     
                                new SqlParameter("@intClassID",ClassID),
                                new SqlParameter("@intSectionID",SectionID),
                                new SqlParameter("@intExamID",ExamID),
                                new SqlParameter("@intExamSGID",SGID),
                                new SqlParameter("@intStudentID",StudentID),
                                new SqlParameter("@intEntryStyle",EntryStyleID),
                                new SqlParameter("@USERID",UID),               
                           	};
            return Database.SqlQuery<TempStudentMarkEntry>("EXEC ExamExamStudMarkEntryGrid @intAcaStart,@intSchoolID,@intClassID,@intSectionID,@intExamID,@intExamSGID,@intStudentID,@intEntryStyle,@USERID", Param).ToList();
        }

        public List<TempSubjectWiseMarkEntry> FillSubjectMarkEntryGrid(int AcaStart, int SchoolID, int ClassID, int SectionID, int ExamID, int SGID, int SubjectID, int EntryStyleID, int Optional, string TC)
        {
            SqlParameter[] Param = new SqlParameter[]
                            {   
                                new SqlParameter("@intAcaStart",AcaStart),
                                new SqlParameter("@intSchoolID",SchoolID),     
                                new SqlParameter("@intClassID",ClassID),
                                new SqlParameter("@intSectionID",SectionID),
                                new SqlParameter("@intExamID",ExamID),
                                new SqlParameter("@intExamSGID",SGID),
                                new SqlParameter("@intExamSubjectID",SubjectID),
                                new SqlParameter("@intEntryStyle",EntryStyleID),
                                new SqlParameter("@intOptional",Optional),               
                                new SqlParameter("@TC",TC),
                            };
            return Database.SqlQuery<TempSubjectWiseMarkEntry>("EXEC ExamExamMarkEntryGrid @intAcaStart,@intSchoolID,@intClassID,@intSectionID,@intExamID,@intExamSGID,@intExamSubjectID,@intEntryStyle,@intOptional,@TC", Param).ToList();
        }

        public int ExamDeleteTempData()
        {
            SqlParameter[] Param = new SqlParameter[]
            {

            };
            Database.CommandTimeout = 0;
            Database.ExecuteSqlCommand("EXEC ExamDeleteTempData ", Param);
            return 1;
        }

        public List<TempAttendanceEntry> FillATTIntGrid(int ClassID, int SectionID, int ExamID, int SGID, int SubjectID, int AttendanceID, int AcaStart, int SchoolID, string STC)
        {
            SqlParameter[] Param = new SqlParameter[]
                            {                        
                                new SqlParameter("@intClassID",ClassID),
                                new SqlParameter("@intSectionID",SectionID),
                                new SqlParameter("@intExamID",ExamID),
                                new SqlParameter("@intSubjectGrpID",SGID),
                                new SqlParameter("@intSubjectID",SubjectID),
                                new SqlParameter("@AttendanceID",AttendanceID),
                                new SqlParameter("@AcaStart",AcaStart),
                                new SqlParameter("@SchoolID",SchoolID),                     
                                new SqlParameter("@STC",STC),   
                            };
            return Database.SqlQuery<TempAttendanceEntry>("EXEC ExamAttendanceIntGrid @intClassID,@intSectionID,@intExamID,@intSubjectGrpID,@intSubjectID,@AttendanceID,@AcaStart,@SchoolID,@STC", Param).ToList();
        }

        public List<TempDescriptiveEntry> FillDESEGrid(int ClassID, int SectionID, int ExamID, int SGID, int SubjectID, string DescriptorID, int AcaStart, int SchoolID, int OptionalID, string STC)
        {
            SqlParameter[] Param = new SqlParameter[]
                            {                        
                                new SqlParameter("@intClassID",ClassID),
                                new SqlParameter("@intSectionID",SectionID),
                                new SqlParameter("@intExamID",ExamID),
                                new SqlParameter("@intSubjectGrpID",SGID),
                                new SqlParameter("@intSubjectID",SubjectID),
                                new SqlParameter("@intDescriptorID",DescriptorID),
                                new SqlParameter("@AcaStart",AcaStart),
                                new SqlParameter("@SchoolID",SchoolID),                     
                                new SqlParameter("@intOptional",OptionalID),      
                                new SqlParameter("@STC",STC),      
                            };
            return Database.SqlQuery<TempDescriptiveEntry>("EXEC ExamDescriptorEntryGrid @intClassID,@intSectionID,@intExamID,@intSubjectGrpID,@intSubjectID,@intDescriptorID,@AcaStart,@SchoolID,@intOptional,@STC", Param).ToList();
        }

        public List<TempDescriptiveStudentEntry> FillDEStudentGrid(int ClassID, int SectionID, int ExamID, int SGID, int SubjectID, int StudentID, int AcaStart, int SchoolID)
        {
            SqlParameter[] Param = new SqlParameter[]
                            {                        
                                new SqlParameter("@intClassID",ClassID),
                                new SqlParameter("@intSectionID",SectionID),
                                new SqlParameter("@intExamID",ExamID),
                                new SqlParameter("@intSubjectGrpID",SGID),
                                new SqlParameter("@intSubjectID",SubjectID),
                                new SqlParameter("@intStudentID",StudentID),
                                new SqlParameter("@AcaStart",AcaStart),
                                new SqlParameter("@SchoolID",SchoolID),                    
                                  
                            };
            return Database.SqlQuery<TempDescriptiveStudentEntry>("EXEC ExamDescriptiveStuMarkEntry @intClassID,@intSectionID,@intExamID,@intSubjectGrpID,@intSubjectID,@intStudentID,@AcaStart,@SchoolID", Param).ToList();
        }

        public int ExamRCGeneration(int intClassID, int intSectionID, int intExamID, int intUserID, int intSchoolID, int intAcaStart)
        {
            SqlParameter[] Param = new SqlParameter[]
            {
                    new SqlParameter("@intClassID",intClassID),
                    new SqlParameter("@intSectionID",intSectionID),
                    new SqlParameter("@intExamID",intExamID),
                    new SqlParameter("@intUserID",intUserID),
                    new SqlParameter("@intSchoolID",intSchoolID),    
                    new SqlParameter("@intAcaStart",intAcaStart),
            };
            Database.CommandTimeout = 0;
            Database.ExecuteSqlCommand("EXEC ExamGetReportCard @intClassID,@intSectionID,@intExamID,@intUserID,@intSchoolID,@intAcaStart", Param);
            return 1;
        }

        public int ExamRCPreview(int intClassID, int intSectionID, int intExamID, int intUserID, int intSchoolID, int intAcaStart, string SessionID)
        {
            SqlParameter[] Param = new SqlParameter[]
            {
                    new SqlParameter("@intClassID",intClassID),
                    new SqlParameter("@intSectionID",intSectionID),
                    new SqlParameter("@intExamID",intExamID),
                    new SqlParameter("@intUserID",intUserID),
                    new SqlParameter("@intSchoolID",intSchoolID),    
                    new SqlParameter("@intAcaStart",intAcaStart),
                    new SqlParameter("@vchSessionId",SessionID),                    
            };
            Database.CommandTimeout = 0;
            Database.ExecuteSqlCommand("EXEC ExamGetReportCardDisplay @intClassID,@intSectionID,@intExamID,@intUserID,@intSchoolID,@intAcaStart,@vchSessionId", Param);
            return 1;
        }

        public List<MTDDLMaster> FillExamDDL(int ClassID, int SectionID, int ExamID, int SGID, int SubjectID, int AcaStart, int SchoolID, int UID, int EESID, string Type)
        {
            SqlParameter[] Param = new SqlParameter[]
                            {                        
                                new SqlParameter("@ClassID",ClassID),
                                new SqlParameter("@SectionID",SectionID),
                                new SqlParameter("@ExamID",ExamID),
                                new SqlParameter("@ExamSGID",SGID),
                                new SqlParameter("@ExamSubjectID",SubjectID),                                
                                new SqlParameter("@AcaStart",AcaStart),
                                new SqlParameter("@SchoolID",SchoolID),                     
                                new SqlParameter("@UID",UID),
                                new SqlParameter("@EESID",EESID),
                                new SqlParameter("@Type",Type),                                
                            };
            return Database.SqlQuery<MTDDLMaster>("EXEC ExamDDLBind @ClassID,@SectionID,@ExamID,@ExamSGID,@ExamSubjectID,@AcaStart,@SchoolID,@UID,@EESID,@Type", Param).ToList();
        }

        public int ExamDisplayIDExist(int? intDisplayID, int intAcaStart, int intSchoolID)
        {
            SqlParameter[] Param = new SqlParameter[]
            {                 
                    new SqlParameter("@DisplayID",intDisplayID),    
                    new SqlParameter("@intAcaStart",intAcaStart),
                    new SqlParameter("@intSchoolID",intSchoolID), 
            };
            List<MTDDLMaster> ls = new List<MTDDLMaster>();
            ls = Database.SqlQuery<MTDDLMaster>("EXEC ExamDisplayIDExist @DisplayID,@intAcaStart,@intSchoolID", Param).ToList();
            int intCount = Convert.ToInt32(ls[0].DDLID);
            return intCount;
        }

        public int ExamUpdateNextSession(int intAcaStart, int intSchoolID, int intUserID, string Type)
        {
            SqlParameter[] Param = new SqlParameter[]
            {                
                      
                    new SqlParameter("@intAcaStart",intAcaStart),
                    new SqlParameter("@intSchoolID",intSchoolID), 
                    new SqlParameter("@intUserID",intUserID),  
                    new SqlParameter("@Type",Type),  
            };
            Database.CommandTimeout = 0;
            return Database.ExecuteSqlCommand("EXEC ExamUpdatetoNextSession @intAcaStart,@intSchoolID,@intUserID,@Type", Param);
        }

        public List<TempSubjectTeacherAssigner> FillSTAGrid(int ClassID, int SectionID, int SGID, int AcaStart, int SchoolID)
        {
            SqlParameter[] Param = new SqlParameter[]
              {                        
                    new SqlParameter("@ClassID",ClassID),
                    new SqlParameter("@SectionID",SectionID),                                
                    new SqlParameter("@ExamSGID",SGID),                                
                    new SqlParameter("@AcaStart",AcaStart),
                    new SqlParameter("@SchoolID",SchoolID),                                                     
              };
            return Database.SqlQuery<TempSubjectTeacherAssigner>("EXEC ExamSubjectTeacherAssignerGrid @ClassID,@SectionID,@ExamSGID,@AcaStart,@SchoolID", Param).ToList();
        }

        public List<MTDDLMaster> FillRAFilterExam(int ClassID, int SectionID, int ExamID, int AcaStart, int SchoolID, string Type)
        {
            SqlParameter[] Param = new SqlParameter[]
              {                        
                    new SqlParameter("@ClassID",ClassID),
                    new SqlParameter("@SectionID",SectionID),                                
                    new SqlParameter("@ExamID",ExamID),                                
                    new SqlParameter("@AcaStart",AcaStart),
                    new SqlParameter("@SchoolID",SchoolID),                                                     
                    new SqlParameter("@Type",Type), 
              };
            return Database.SqlQuery<MTDDLMaster>("EXEC ExamReportExamsDDLBind @ClassID,@SectionID,@ExamID,@AcaStart,@SchoolID,@Type", Param).ToList();
        }

        public List<TempStudentExamSummary> FillStudentExamSummary(int AcaStart, int SchoolID, int StudentID, int intExamID)
        {
            SqlParameter[] Param = new SqlParameter[]
                            {   
                                new SqlParameter("@StudentID",StudentID),                               
                                new SqlParameter("@ExamID",intExamID),      
                                new SqlParameter("@AcaStart",AcaStart),
                                new SqlParameter("@SchoolID",SchoolID),                                     
                            };
            return Database.SqlQuery<TempStudentExamSummary>("EXEC ExamStudentExamSummary @StudentID,@ExamID,@AcaStart,@SchoolID", Param).ToList();
        }

        public List<Chart> ExamChart(int ArgSchoolID, int ArgAcaStart, int StudentID)
        {
            SqlParameter[] param = new SqlParameter[]
            { 
                new SqlParameter("@StudentID",StudentID),
                new SqlParameter("@SchoolID",ArgSchoolID),
                new SqlParameter("@AcaStart",ArgAcaStart),
            };
            return Database.SqlQuery<Chart>("ExamStudentMultiYearPerformance @StudentID,@SchoolID,@AcaStart", param).ToList();
        }

        public List<TempMarkEntryDefaulterDetails> FillExamMarkEntryDefaulter(int intClassID, int intSectionID, int intExamID, int intUserID, int intAcaStart, int intSchoolID)
        {
            SqlParameter[] Param = new SqlParameter[] { 
                 new SqlParameter("@ClassID",intClassID),
                    new SqlParameter("@SectionID",intSectionID),                                
                    new SqlParameter("@ExamID",intExamID),                                
                    new SqlParameter("@UserID",intUserID),        
                    new SqlParameter("@SchoolID",intSchoolID),  
                    new SqlParameter("@AcaStart",intAcaStart),
                        
            };
            return Database.SqlQuery<TempMarkEntryDefaulterDetails>("EXEC ExamExamDefaulterEntry @ClassID,@SectionID,@ExamID,@UserID,@SchoolID,@AcaStart", Param).ToList();
        }

        public List<TempMEDefaulters> FillExamMEDefaulters(int intClassID, int intSectionID, int intExamClassWiseID, int intEEID, int intAcaStart, int intSchoolID)
        {
            SqlParameter[] Param = new SqlParameter[] { 
                 new SqlParameter("@ClassID",intClassID),
                    new SqlParameter("@SectionID",intSectionID),                                
                    new SqlParameter("@ExamClassWiseID",intExamClassWiseID),                                
                    new SqlParameter("@EEID",intEEID),                                
                    new SqlParameter("@SchoolID",intSchoolID),  
                    new SqlParameter("@AcaStart",intAcaStart),
                        
            };
            return Database.SqlQuery<TempMEDefaulters>("EXEC EXAMMEDefaulterDetails @ClassID,@SectionID,@ExamClassWiseID,@EEID,@SchoolID,@AcaStart", Param).ToList();
        }

        public List<MTDDLMaster> FillTAFilterExam(int TeacherID, int ClassID, int SectionID, string ExamID, int AcaStart, int SchoolID, string Type)
        {
            SqlParameter[] Param = new SqlParameter[]
              {     
                  new SqlParameter("@UserID",TeacherID), 
                    new SqlParameter("@ClassID",ClassID),
                    new SqlParameter("@SectionID",SectionID),                                
                    new SqlParameter("@ExamID",ExamID),                                
                    new SqlParameter("@SchoolID",SchoolID),   
                    new SqlParameter("@AcaStart",AcaStart),                                                                      
                    new SqlParameter("@Type",Type), 
              };
            return Database.SqlQuery<MTDDLMaster>("EXEC ExamTeacherAnalysisDDLBind @UserID,@ClassID,@SectionID,@ExamID,@SchoolID,@AcaStart,@Type", Param).ToList();
        }

        public List<TempParentPortalVisibility> FillPPRMGrid(int AcaStart, int SchoolID, int ExamID, string strType)
        {
            SqlParameter[] Param = new SqlParameter[]
                    {   
                        new SqlParameter("@ExamID",ExamID), 
                        new SqlParameter("@AcaStart",AcaStart),
                        new SqlParameter("@SchoolID",SchoolID),  
                        new SqlParameter("@Type",strType),  
                                                
                    };
            return Database.SqlQuery<TempParentPortalVisibility>("EXEC ExamPPVisibilityGrid @ExamID,@AcaStart,@SchoolID,@Type", Param).ToList();
        }

        public List<MTDDLMaster> FillStudentSummaryGraph(int AcaStart, int SchoolID, int StudentID, int intExamID)
        {
            SqlParameter[] Param = new SqlParameter[]
                            {   
                                new SqlParameter("@StudentID",StudentID),                               
                                new SqlParameter("@ExamID",intExamID),      
                                new SqlParameter("@AcaStart",AcaStart),
                                new SqlParameter("@SchoolID",SchoolID),                                     
                            };
            return Database.SqlQuery<MTDDLMaster>("EXEC EXAMSubjectWiseAnalysisGraph @StudentID,@ExamID,@AcaStart,@SchoolID", Param).ToList();
        }

        public List<TempExamAssmtChkList> FillAssessmentChkClass(int ClassID, int SectionID, int ExamID, int ExamSGID, int ExamSubjectID, int AcaStart, int SchoolID, int UID)
        {
            SqlParameter[] Param = new SqlParameter[]
                            {                        
                                new SqlParameter("@ClassID",ClassID),
                                new SqlParameter("@SectionID",SectionID),
                                new SqlParameter("@ExamID",ExamID),
                                new SqlParameter("@ExamSGID",ExamSGID),
                                new SqlParameter("@ExamSubjectID",ExamSubjectID),                                
                                new SqlParameter("@AcaStart",AcaStart),
                                new SqlParameter("@SchoolID",SchoolID),                     
                                new SqlParameter("@UID",UID),
                            };
            return Database.SqlQuery<TempExamAssmtChkList>("EXEC ExamAssessmentChkBind @ClassID,@SectionID,@ExamID,@ExamSGID,@ExamSubjectID,@AcaStart,@SchoolID,@UID", Param).ToList();
        }

        public List<MTCheckMaster> FillExamDescClassApply(int ClassID, int SectionID, int ExamID, int SGID, int SubjectID, int AcaStart, int SchoolID, int UID)
        {
            SqlParameter[] Param = new SqlParameter[]
                            {                        
                                new SqlParameter("@ClassID",ClassID),
                                new SqlParameter("@SectionID",SectionID),
                                new SqlParameter("@ExamID",ExamID),
                                new SqlParameter("@ExamSGID",SGID),
                                new SqlParameter("@ExamSubjectID",SubjectID),                                
                                new SqlParameter("@AcaStart",AcaStart),
                                new SqlParameter("@SchoolID",SchoolID),                     
                                new SqlParameter("@UserID",UID),                                                           
                            };
            return Database.SqlQuery<MTCheckMaster>("EXEC ExamDescApplyClasses @ClassID,@SectionID,@ExamID,@ExamSGID,@ExamSubjectID,@AcaStart,@SchoolID,@UserID", Param).ToList();
        }

        public List<tempExamSPDFLocking> FillSPDFLGrid(int ClassID, int SectionID, int ExamID, int AcaStart, int SchoolID)
        {
            SqlParameter[] Param = new SqlParameter[]
              {
                    new SqlParameter("@ClassID",ClassID),
                    new SqlParameter("@SectionID",SectionID),
                    new SqlParameter("@ExamID",ExamID),
                    new SqlParameter("@AcaStart",AcaStart),
                    new SqlParameter("@SchoolID",SchoolID),
              };
            return Database.SqlQuery<tempExamSPDFLocking>("EXEC ExamBindGridSPDFL @ClassID,@SectionID,@ExamID,@AcaStart,@SchoolID", Param).ToList();
        }


        public List<TempERCLockingGrid> FillERCGrid(int AcaStart, int SchoolID, int ExamID)
        {
            SqlParameter[] Param = new SqlParameter[]
                    {                        
                        new SqlParameter("@AcaStart",AcaStart),
                        new SqlParameter("@SchoolID",SchoolID),                     
                        new SqlParameter("@ExamID",ExamID),      
                    };
            return Database.SqlQuery<TempERCLockingGrid>("EXEC ExamRCLockingGrid @AcaStart,@SchoolID,@ExamID", Param).ToList();
        }

        #region Excel Importing
        public List<TempMarkEntryExcel> FillMarkEntryExcel(int intClassID, int intSectionID, int intExamID, int intSGID, int intSubjectID, int intSchoolID, int intAcaStart, int intEntryStyleID)
        {
            SqlParameter[] Param = new SqlParameter[] { 
                 new SqlParameter("@ClassID",intClassID),
                    new SqlParameter("@SectionID",intSectionID),                                
                    new SqlParameter("@ExamID",intExamID),                                
                    new SqlParameter("@ExamSGID",intSGID), 
                    new SqlParameter("@SubjectID",intSubjectID),
                    new SqlParameter("@SchoolID",intSchoolID),  
                    new SqlParameter("@AcaStart",intAcaStart),
                    new SqlParameter("@EntryStyleID",intEntryStyleID)
                        
            };
            return Database.SqlQuery<TempMarkEntryExcel>("EXEC [ExamMarkEntrySlip] @ClassID,@SectionID,@ExamID,@ExamSGID,@SubjectID,@SchoolID,@AcaStart,@EntryStyleID", Param).ToList();
        }

        public virtual List<string> ExamMarkImport(DataTable dt, int UID, int AcaStart, int SchoolID, int ClassID, int SectionID, int ExamID, int SGID, int SubjectID, int EEID)
        {
            SqlParameter[] param = new SqlParameter[]
            {
                new SqlParameter("@ClassID",ClassID),
                new SqlParameter("@SectionID",SectionID),
                new SqlParameter("@ExamID",ExamID),
                new SqlParameter("@ExamSGID",SGID),
                new SqlParameter("@ExamSubjectID",SubjectID),
                new SqlParameter("@UID",UID),
                new SqlParameter("@SchoolID",SchoolID),
                new SqlParameter("@AcaStart",AcaStart),
                new SqlParameter("@EntryStyleID",EEID),    
                new SqlParameter("@Argdt",SqlDbType.Structured)
            };
            param[9].TypeName = "ut_ExamMarkImport";
            param[9].Value = dt;
            //DataSet ds = GetSPFromSql("FeeOnlineFileUploadSettallement", param);
            return Database.SqlQuery<string>("ExamMarkImport @ClassID,@SectionID,@ExamID,@ExamSGID,@ExamSubjectID,@UID, @SchoolID,@AcaStart,@EntryStyleID, @Argdt", param).ToList();
        }

        public List<TempLogDetail> FillLogDetail(int ExamCWID)
        {
            SqlParameter[] Param = new SqlParameter[]
                            {   
                                new SqlParameter("@ExamCWID",ExamCWID),
                                
                            };
            return Database.SqlQuery<TempLogDetail>("EXEC ExamImportLogDetails @ExamCWID", Param).ToList();
        }
        #endregion excel
        #endregion

        public virtual List<BindAllPermission> BindAllPermission(string TableName, int AcaStart, int SchoolID, int Type, int UID)
        {
            SqlParameter[] para = new SqlParameter[]
                {
                            new SqlParameter("@ArgTableName",TableName),
                            new SqlParameter("@ArgAcaStart",AcaStart),
                            new SqlParameter("@ArgSchoolID",SchoolID),
                            new SqlParameter("@argType",Type),
                            new SqlParameter("@ArgUID",UID)
                };
            return Database.SqlQuery<BindAllPermission>("AssignAllPermissionDetails @ArgTableName,@ArgAcaStart,@ArgSchoolID,@ArgType,@ArgUID", para).ToList();
        }


        #region 13. Staff Information

        public List<StudentGenInfo> FillStudentGenInfo(List<string> stadm, int AcaStart, int SchoolID)
        {
            List<StudentGenInfo> all = new List<StudentGenInfo>();
            //Select SYD.AdmissionNo AS AdmNo,(ISNULL(SIM.FirstName,'')+' '+ISNULL(SIM.MiddleName,'')+' '+ISNULL(SIM.LastName,'')) AS SName,CM.ClassName1+'-'+SM.SectionName1 AS ClassSec,CASE WHEN SIM.Sex='M' THEN 'Boy' ELSE 'Girl' END AS Gender From SIStudentMaster SIM INNER JOIN SIStudentyearwisedetails SYD ON SIM.StudentID=SYD.StudentID INNER JOIN MTClassMaster CM ON SYD.ClassID=CM.ClassID INNER JOIN MTSectionMaster SM ON SYD.SectionID=SM.SectionID Where SYD.Acastart=" + Session["Acastart"] + " AND SYD.SchoolID=" + Session["SchoolID"] + " AND SYD.StudentStatus='S' AND SYD.StudentID IN(" + strStudentID + ")
            var ss = from SYD in SIStudentYearWiseDetails
                     join SM in SIStudentMasters on SYD.StudID equals SM.StudID
                     join CM in MTClassMasters on SYD.ClsID equals CM.AutoID
                     join SEC in MTSectionMasters on SYD.SECID equals SEC.AutoID
                     join GEN in MTGenderMasters on SM.GenderID equals GEN.AutoID
                     where stadm.Contains(SYD.AdmNo) && SYD.AcaStarting == AcaStart && SYD.SchID == SchoolID && SYD.StudStatus == "S"
                     select new { SYD.StudID, SYD.AdmNo, SName = SM.FName + " " + SM.MName + " " + SM.LName, ClassSec = CM.ClassName + "-" + SEC.SectionName, GEN.Abbrivations };
            foreach (var item in ss)
            {
                StudentGenInfo lst = new StudentGenInfo();
                lst.StdID = item.StudID;
                lst.AdmNo = item.AdmNo;
                lst.StdName = item.SName;
                lst.ClassSec = item.ClassSec;
                lst.Gender = item.Abbrivations;
                all.Add(lst);
            }
            return all;
        }
        public List<PayHeadDetails> FillPayHeadGrid(int intEmployeeID)
        {
            List<PayHeadDetails> ls = new List<PayHeadDetails>();
            ls = (from PM in PRLPayHeadMasters
                  join PH in PRLEmployeePayHeadDetailss on PM.PHeadID equals PH.HeadID into PS
                  from PH in PS.Where(model => model.EmpID == intEmployeeID).DefaultIfEmpty()
                  where PM.PriorityNo > 0 && (PM.PHeadType == "A" || PM.PHeadType == "D")
                  orderby PM.PriorityNo, PM.PHeadName
                  select new PayHeadDetails
                  {
                      HeadID = PM.PHeadID,
                      HeadName = PM.PHeadName,
                      PayType = PM.PHeadType == "A" ? "Allowance" : PM.PHeadType == "D" ? "Deduction" : PM.PHeadType,
                      Structure = PH.HeadType == "" ? "Not Applicable" : PH.HeadType,
                      Amount = PH.Amountper
                  }).ToList();
            return ls;
        }

        public DataSet PRLFillPayBandDetails(string ArgCondition)
        {
            SqlParameter[] param = new SqlParameter[] 
                     { new SqlParameter("@ArgCondition",ArgCondition),
                     };
            DataSet ds = GetSPFromSql("PRLFillPayBandDetails", param);
            return ds;
        }

        public DataSet PRLFillPayGroupDetails()
        {
            SqlParameter[] param = new SqlParameter[] 
                     {
                     };
            DataSet ds = GetSPFromSql("PRLFillPayGroupDetails", param);
            return ds;
        }

        public DataSet PRLSalaryStructure(string ArgPayHeads, string ArgEmployeeID)
        {
            SqlParameter[] param = new SqlParameter[]
                    {
                         new SqlParameter("@ArgPayHeads",ArgPayHeads),
                         new SqlParameter("@ArgEmployeeID",ArgEmployeeID)
                    };
            DataSet ds = GetSPFromSql("PRLSalaryStructure", param);
            return ds;
        }

        public DataSet PRLFixedEntry(string ArgPayHeads, string ArgEmployeeID)
        {
            SqlParameter[] param = new SqlParameter[]
                    {
                         new SqlParameter("@ArgPayHeads",ArgPayHeads),
                         new SqlParameter("@ArgEmployeeID",ArgEmployeeID)
                    };
            DataSet ds = GetSPFromSql("PRLFixedEntry", param);
            return ds;
        }

        public DataSet PRLSalaryGeneration(string ArgSalaryDate, string ArgStrCondition, int ArgUserID, string ArgSalaryType, string @ArgType, int @ArgPRLEmployeeID, string @AgrCalMode)
        {
            SqlParameter[] param = new SqlParameter[]
                    {
                         new SqlParameter("@ArgSalaryDate",ArgSalaryDate),
                         new SqlParameter("@ArgStrCondition",ArgStrCondition),
                           new SqlParameter("@ArgUserID",ArgUserID),
                             new SqlParameter("@ArgSalaryType",ArgSalaryType),
                              new SqlParameter("@ArgType",ArgType),
                              new SqlParameter("@ArgPRLEmployeeID",ArgPRLEmployeeID),
                              new SqlParameter("@AgrCalMode",AgrCalMode)
                    };
            DataSet ds = GetSPFromSql("PRLSalaryGeneration", param);
            return ds;
        }

        public DataSet PRLFillSavingDeductionDetails(int ArgSchoolID, string ArgFYStart, int ArgEmployeeID)
        {
            SqlParameter[] param = new SqlParameter[]
                    {
                         new SqlParameter("@ArgSchoolID",ArgSchoolID),
                         new SqlParameter("@ArgFYStart",ArgFYStart),
                           new SqlParameter("@ArgEmployeeID",ArgEmployeeID),
                    };
            DataSet ds = GetSPFromSql("PRLFillSavingDeductionDetails", param);
            return ds;
        }
        public DataSet PayrollReports(string @ArgCriteria, string @ArgrptName)
        {
            SqlParameter[] param = new SqlParameter[]
                    {
                         new SqlParameter("@ArgCriteria",@ArgCriteria),  

                         new SqlParameter("@ArgrptName",@ArgrptName)
                    };
            DataSet ds = GetSPFromSql("PayrollReports", param);
            return ds;
        }

        public DataSet PRLBindFieldUpdation(int ArgSchoolID, string @ArgFieldID, string @ArgEmployeeID)
        {
            SqlParameter[] param = new SqlParameter[]
                    {
                         new SqlParameter("@ArgSchoolID",ArgSchoolID),
                         new SqlParameter("@ArgFieldID",ArgFieldID),
                           new SqlParameter("@ArgEmployeeID",ArgEmployeeID),

                    };
            DataSet ds = GetSPFromSql("PRLBindFieldUpdation", param);
            return ds;
        }

        public DataSet PRLStaffAdvanceSearch(int ArgSchoolID, string ArgCondition, string ArgFieldID, string ArgDisplayID, string ArgOrder, string ArgDeviceType)
        {

            SqlParameter[] param = new SqlParameter[] 
                { 
                    new SqlParameter("@ArgSchoolID",ArgSchoolID),
                    new SqlParameter("@ArgCondition",ArgCondition),
                    new SqlParameter("@ArgFieldID",ArgFieldID),
                    new SqlParameter("@ArgDisplayID",ArgDisplayID),
                    new SqlParameter("@ArgOrder",ArgOrder),
                    new SqlParameter("@ArgDeviceType",ArgDeviceType)
     
                };
            DataSet ds = GetSPFromSql("PRLStaffAdvanceSearch", param);
            return ds;
        }

        public DataSet PRLPayrollReports(string @ArgCriteria, string @ArgrptName)
        {
            SqlParameter[] param = new SqlParameter[]
                    {
                         new SqlParameter("@ArgCriteria",@ArgCriteria),  

                         new SqlParameter("@ArgrptName",@ArgrptName)
                    };
            DataSet ds = GetSPFromSql("PRLPayrollReports", param);
            return ds;
        }

        public DataSet PRLElectornicChallan(string @ArgCriteria, string ArgSalaryFrom, int @ArgEmployeeID, int @ArgSchoolID)
        {
            SqlParameter[] param = new SqlParameter[]
                    {
                         new SqlParameter("@ArgCriteria",@ArgCriteria),  
                         new SqlParameter("@ArgSalaryFrom",@ArgSalaryFrom), 
                         new SqlParameter("@ArgEmployeeID",@ArgEmployeeID),  
                         new SqlParameter("@ArgSchoolID",@ArgSchoolID)
                    };
            DataSet ds = GetSPFromSql("PRLElectornicChallanrpt", param);
            return ds;
        }

        public DataSet PRLFillSavingDeductionDetails(int ArgSchoolID, string ArgFYStart, int ArgEmployeeID, int ArgDepartmentID)
        {
            SqlParameter[] param = new SqlParameter[]
                    {
                         new SqlParameter("@ArgSchoolID",ArgSchoolID),
                         new SqlParameter("@ArgFYStart",ArgFYStart),
                           new SqlParameter("@ArgEmployeeID",ArgEmployeeID),
                           new SqlParameter("@ArgDepartmentID",ArgDepartmentID),
                    };
            DataSet ds = GetSPFromSql("PRLFillSavingDeductionDetails", param);
            return ds;
        }
        public DataSet PRLTaxCalculation(string ArgFinyear, int ArgEmployeeID, int ArgSchoolID)
        {
            SqlParameter[] param = new SqlParameter[]
                    {
                         new SqlParameter("@ArgFinyear",ArgFinyear),
                         new SqlParameter("@ArgEmployeeID",ArgEmployeeID),
                           new SqlParameter("@ArgSchoolID",ArgSchoolID),
                    };
            DataSet ds = GetSPFromSql("PRLTaxCalculation", param);
            return ds;
        }
        public DataSet PRLBindMonthYear(int @ArgFinYear)
        {
            SqlParameter[] param = new SqlParameter[]
                    {
                         new SqlParameter("@ArgFinYear",ArgFinYear),
                    };
            DataSet ds = GetSPFromSql("PRLBindMonthYear", param);
            return ds;
        }

        public DataSet PRLLEmployeeLeaveAssignDetails(int @ArgLeaveStartID, int @ArgLeaveCategoryID, int @ArgSchoolID, int @ArgLeaveID, int @ArgEmployeeID, int @ArgFinYearID)
        {
            SqlParameter[] param = new SqlParameter[] 
                            { 
                                new SqlParameter("@ArgLeaveStartID",ArgLeaveStartID),
                                new SqlParameter("@ArgLeaveCategoryID",ArgLeaveCategoryID), 
                                new SqlParameter("@ArgSchoolID",ArgSchoolID), 
                                new SqlParameter("@ArgLeaveID",ArgLeaveID), 
                                new SqlParameter("@ArgEmployeeID",ArgEmployeeID), 
                                new SqlParameter("@ArgFinYearID",ArgFinYearID), 
                            };
            DataSet ds = GetSPFromSql("PRLLEmployeeLeaveAssignDetails", param);
            return ds;
        }

        #endregion

        #region 18. FA
        public virtual List<FASearch> FASearchDetails(int GCompID, int CompID, int acastart, string VoucherNo, int FASLID, string Narration, string VoucherType, int AmountFrom, int AmountTo, string ChequeNo, string ChequeDate)
        {
            SqlParameter[] param = new SqlParameter[]
            {
                    new SqlParameter("@ArgGroupCompanyID",GCompID),
                    new SqlParameter("@ArgCompanyID",CompID),
                    new SqlParameter("@ArgVoucherType",VoucherType),
                    new SqlParameter("@ArgAcaStart",acastart),
                    new SqlParameter("@ArgVoucherNo",VoucherNo),
                    new SqlParameter("@ArgFASLID",FASLID),
                    new SqlParameter("@ArgNarration",Narration),
                    new SqlParameter("@ArgAmountFrom",AmountFrom),
                    new SqlParameter("@ArgAmountTo",AmountTo),
                    new SqlParameter("@ArgChequeNo",ChequeNo),
                    new SqlParameter("@ArgChequeDate",ChequeDate)
            };
            return Database.SqlQuery<FASearch>("FAVoucherSearch @ArgGroupCompanyID,@ArgCompanyID,@ArgVoucherType,@ArgAcaStart,@ArgVoucherNo,@ArgFASLID,@ArgNarration,@ArgAmountFrom,@ArgAmountTo,@ArgChequeNo,@ArgChequeDate", param).ToList();
        }

        public virtual DataSet spFABankReconciliation(int ArgGroupCompanyID, int ArgCompanyID, string ArgStartDate, string ArgEndDate, int ArgFASLID, string ArgChequeType, string ArgDisplayType)
        {
            SqlParameter[] param = new SqlParameter[]
                {
                    new SqlParameter("@FAGroupCompanyID",ArgGroupCompanyID),
                    new SqlParameter("@FACompanyID",ArgCompanyID),
                    new SqlParameter("@StartDate",ArgStartDate),
                    new SqlParameter("@EndDate",ArgEndDate),
                    new SqlParameter("@FASLID",ArgFASLID),
                    new SqlParameter("@ChequeType",ArgChequeType),
                    new SqlParameter("@DisplayType",ArgDisplayType),

                };
            DataSet ds = GetSPFromSql("spFABankReconciliation", param);
            return ds;

        }

        public virtual List<FADisplayData> FADayBookDisplay(int GCompID, int CompID, string FromDate, string ToDate, string VApproval, string Detail, string VoucherType)
        {
            SqlParameter[] param = new SqlParameter[]
            {
                    new SqlParameter("@ArgGroupCompanyID",GCompID),
                    new SqlParameter("@ArgCompanyID",CompID),
                    new SqlParameter("@ArgFromDate",FromDate),
                    new SqlParameter("@ArgToDate",ToDate),
                    new SqlParameter("@ArgApproval",VApproval),
                    new SqlParameter("@ArgSummaryDetail",Detail),
                    new SqlParameter("@ArgVoucherType",VoucherType)
            };
            return Database.SqlQuery<FADisplayData>("FADayBookDisplay @ArgGroupCompanyID,@ArgCompanyID,@ArgFromDate,@ArgToDate,@ArgApproval,@ArgSummaryDetail,@ArgVoucherType", param).ToList();
        }

        public virtual List<FADisplayData> FACashBankBookDisplay(int GCompID, int CompID, string FromDate, string ToDate, int AcaStart, int FASLID, string Detail, string BF, string VApproval, string VoucherType)
        {
            SqlParameter[] param = new SqlParameter[]
            {
                    new SqlParameter("@ArgGroupCompanyID",GCompID),
                    new SqlParameter("@ArgCompanyID",CompID),
                    new SqlParameter("@ArgFromDate",FromDate),
                    new SqlParameter("@ArgToDate",ToDate),
                    new SqlParameter("@ArgAcaStart",AcaStart),
                    new SqlParameter("@ArgFASLID",FASLID),
                    new SqlParameter("@ArgDetailed",Detail),
                    new SqlParameter("@ArgBalanceBF",BF),
                    new SqlParameter("@ArgApproval",VApproval),
                    new SqlParameter("@ArgVoucherType",VoucherType)
            };
            return Database.SqlQuery<FADisplayData>("FACashBankBookDisplay @ArgGroupCompanyID,@ArgCompanyID,@ArgFromDate,@ArgToDate,@ArgAcaStart,@ArgFASLID,@ArgDetailed,@ArgBalanceBF,@ArgApproval,@ArgVoucherType", param).ToList();
        }
        public virtual DataSet FABalanceSheet(int ArgFAGroupCompanyID, int ArgFACompanyID, string ArgCurrentFYBegining, string ArgAsOnDate, string ArgFlag)
        {
            SqlParameter[] param = new SqlParameter[]
                {
                    new SqlParameter("@ArgFAGroupCompanyID",ArgFAGroupCompanyID),
                    new SqlParameter("@ArgFACompanyID",ArgFACompanyID),
                    new SqlParameter("@ArgCurrentFYBegining",ArgCurrentFYBegining),
                    new SqlParameter("@ArgAsOnDate",ArgAsOnDate),
                    new SqlParameter("@ArgFlag",ArgFlag),
                };
            DataSet ds = GetSPFromSql("FABalanceSheet", param);
            return ds;

        }

        public virtual DataSet FATrialBalance(int ArgFAGroupCompanyID, int ArgFACompanyID, string ArgCurrentFYBegining, string ArgFromDate, string ArgAsOnDate, string ArgFlag)
        {
            SqlParameter[] param = new SqlParameter[]
                {
                    new SqlParameter("@ArgFAGroupCompanyID",ArgFAGroupCompanyID),
                    new SqlParameter("@ArgFACompanyID",ArgFACompanyID),
                    new SqlParameter("@ArgCurrentFYBegining",ArgCurrentFYBegining),
                    new SqlParameter("@ArgStartDate",ArgFromDate),
                    new SqlParameter("@ArgEndDate",ArgAsOnDate),
                    new SqlParameter("@WOpBal",ArgFlag),
                };
            DataSet ds = GetSPFromSql("FATrialBalanceDisplay", param);
            return ds;

        }

        #endregion

        #region 19. INV

        public virtual DataSet CreateItemWiseLocation(int intLocationID, int INVCompanyD)
        {
            SqlParameter[] param = new SqlParameter[]
        {
                new SqlParameter("@INVLocationID",intLocationID),
                new SqlParameter("@INVCompanyD",INVCompanyD),

       };
            DataSet ds = GetSPFromSql("INVCreateLocationWiseItems", param);
            return ds;

        }
        public virtual DataSet INVGetItemBalanceDetail(int ArgItemID, int ArgLocationID, string ArgTransDate)
        {
            SqlParameter[] param = new SqlParameter[]
        {
                new SqlParameter("@InvLocationID",ArgLocationID),
                new SqlParameter("@InvStockItemID",ArgItemID),
                 new SqlParameter("@ArgTransDate",ArgTransDate),
        };
            DataSet ds = GetSPFromSql("INVGetItemBalanceDetail", param);
            return ds;

        }

        public virtual DataSet INVRateCalculator(int ArgGRNID, int ArgINVCompanyID, int ArgINVLocationID)
        {
            SqlParameter[] param = new SqlParameter[]
        {
                new SqlParameter("@ArgGRNID",ArgGRNID),
                new SqlParameter("@ArgINVCompanyID",ArgINVCompanyID),
               new SqlParameter("@ArgINVLocationID",ArgINVLocationID)
        };
            DataSet ds = GetSPFromSql("INVRateCalculator", param);
            return ds;

        }

        public virtual DataSet INVGetItem(int intLocationID)
        {
            SqlParameter[] param = new SqlParameter[]
    {
                new SqlParameter("@InvLocationID",intLocationID),

    };
            DataSet ds = GetSPFromSql("INVGetItem", param);
            return ds;


        }

        public virtual DataSet INVPurchaseOrder(string ArgRequisition, int ArgPONo, int ArgFlag)
        {
            SqlParameter[] param = new SqlParameter[]
        {
                new SqlParameter("@ArgRequisition",ArgRequisition),
                new SqlParameter("@ArgPONo",ArgPONo),
                new SqlParameter("@ArgFlag",ArgFlag)
        };
            DataSet ds = GetSPFromSql("INVPurchaseOrder", param);
            return ds;

        }

        public virtual DataSet INVGoodReceivedNote(int ArgPurchaseOrderID, int ArgGRNNo)
        {
            SqlParameter[] param = new SqlParameter[]
        {
                    new SqlParameter("@ArgPurchaseOrderID",ArgPurchaseOrderID),
                    new SqlParameter("@ArgGRNNo",ArgGRNNo)

        };
            DataSet ds = GetSPFromSql("INVGoodReceivedNote", param);
            return ds;

        }

        public virtual DataSet INVPurchaseEntry(int ArgGRNID, int ArgINVNo, string ArgTType)
        {
            SqlParameter[] param = new SqlParameter[]
        {
                new SqlParameter("@ArgGRNID",ArgGRNID),
                new SqlParameter("@ArgINVNo",ArgINVNo),
                new SqlParameter("@ArgTType",ArgTType)
        };
            DataSet ds = GetSPFromSql("INVPurchaseEntry", param);
            return ds;

        }

        public virtual List<object> INVFATransaction(int ArgINVTransactionID, int ArgUID, string ArgVoucherType)
        {
            SqlParameter[] param = new SqlParameter[]
        {
                new SqlParameter("@ArgINVTransactionID",ArgINVTransactionID),
                new SqlParameter("@ArgUID",ArgUID),
                new SqlParameter("@ArgVoucherType",ArgVoucherType)
        };
            List<object> ls = new List<object>();
            ls = Database.SqlQuery<object>("INVFATransaction @ArgINVTransactionID,@ArgUID,@ArgVoucherType", param).ToList();
            return ls;


        }

        public virtual DataSet INVPurchaseReturn(int ArgLocationID, int ArgInvID, int ArgReturnNo)
        {
            SqlParameter[] param = new SqlParameter[]
        {
                new SqlParameter("@ArgLocationID",ArgLocationID),
                new SqlParameter("@ArgInvID",ArgInvID),
                new SqlParameter("@ArgReturnNo",ArgReturnNo)
        };
            DataSet ds = GetSPFromSql("INVPurchaseReturn", param);
            return ds;

        }

        public virtual List<object> INVFAReturnTransaction(int ArgINVTransactionID, int ArgUID, string ArgVoucherType)
        {
            SqlParameter[] param = new SqlParameter[]
        {
                new SqlParameter("@ArgINVTransactionID",ArgINVTransactionID),
                new SqlParameter("@ArgUID",ArgUID),
                new SqlParameter("@ArgVoucherType", ArgVoucherType)
        };
            List<object> ls = new List<object>();
            ls = Database.SqlQuery<object>("INVFAReturnTransaction @ArgINVTransactionID,@ArgUID,@ArgVoucherType", param).ToList();
            return ls;


        }

        public virtual DataSet INVGetItemList(int ArgItemID, int ArgLocationID, string ArgItemType, decimal ArgReqQty, int ArgInvTransID, string ArgItemStatus)
        {
            SqlParameter[] param = new SqlParameter[]
        {
                new SqlParameter("@ArgItemID",ArgItemID),
                new SqlParameter("@ArgLocationID",ArgLocationID),
                new SqlParameter("@ArgItemType",ArgItemType),
                new SqlParameter("@ArgReqQty",ArgReqQty),
                new SqlParameter("@ArgInvTransID", ArgInvTransID),
                new SqlParameter("@ArgItemStatus",ArgItemStatus)
        };
            DataSet ds = GetSPFromSql("INVGetItemList", param);
            return ds;


        }

        public virtual DataSet INVStudentEmployeeSale(int ArgLocationID, int ArgINVNo, string ArgTType)
        {
            SqlParameter[] param = new SqlParameter[]
        {
                    new SqlParameter("@ArgLocationID",ArgLocationID),
                    new SqlParameter("@ArgINVNo",ArgINVNo),
                    new SqlParameter("@ArgTType",ArgTType)
        };
            DataSet ds = GetSPFromSql("INVStudentEmployeeSale", param);
            return ds;

        }

        public virtual List<EmployeeDetails> EmployeeDetails(int SchoolID, string argValue, string argType)
        {
            SqlParameter[] param = new SqlParameter[]
        {
                new SqlParameter("@ArgSchoolID",SchoolID),
                new SqlParameter("@ArgValue",argValue),
                new SqlParameter("@ArgType",argType)
        };
            return Database.SqlQuery<EmployeeDetails>("EmployeeDetails @ArgSchoolID,@ArgValue,@ArgType", param).ToList();
        }


        public virtual DataSet INVSaleReturn(int ArgLocationID, int ArgInvID, int ArgReturnNo)
        {
            SqlParameter[] param = new SqlParameter[]
        {
                new SqlParameter("@ArgLocationID",ArgLocationID),
                new SqlParameter("@ArgInvID",ArgInvID),
                new SqlParameter("@ArgReturnNo",ArgReturnNo)
        };
            DataSet ds = GetSPFromSql("INVSaleReturn", param);
            return ds;

        }

        public virtual DataSet INVFALedgerSettingDisplay(int INVGCompID, int INVCompID, string @ArgTType)
        {
            SqlParameter[] param = new SqlParameter[]
        {
                new SqlParameter("@ArgINVGCompID",INVGCompID),
                new SqlParameter("@ArgINVCompID",INVCompID),
                new SqlParameter("@ArgTType",@ArgTType),
        };
            DataSet ds = GetSPFromSql("INVFALedgerSettingDisplay", param);
            return ds;
        }

        public virtual DataSet INVIssueReturn(int ArgLocationID, int ArgInvID, int ArgReturnNo)
        {
            SqlParameter[] param = new SqlParameter[]
        {
                new SqlParameter("@ArgLocationID",ArgLocationID),
                new SqlParameter("@ArgInvID",ArgInvID),
                new SqlParameter("@ArgReturnNo",ArgReturnNo)
        };
            DataSet ds = GetSPFromSql("INVIssueReturn", param);
            return ds;

        }

        public virtual DataSet INVStockItemMovement(int ArgLocationID, int ArgINVNo, string ArgTType)
        {
            SqlParameter[] param = new SqlParameter[]
        {
                new SqlParameter("@ArgLocationID",ArgLocationID),
                new SqlParameter("@ArgINVNo",ArgINVNo),
                new SqlParameter("@ArgTType",ArgTType)
        };
            DataSet ds = GetSPFromSql("INVStockItemMovement", param);
            return ds;

        }

        #endregion

        #region 23. SMS

        public virtual List<Messages> EMSMSSend(string AdmNo, int SchoolID, int AcaStart, int FromMonID, int ToMonthID, int CategoryID, string TempTable, string FromDate, string TillDate, int RouteID, int ExamID, int SubjectID, int TemplateID, string SessionID, string FormID)
        {
            SqlParameter[] param = new SqlParameter[]
            {
                        new SqlParameter("@ArgAdnoTable",AdmNo),
                        new SqlParameter("@ArgSchoolID",SchoolID),
                        new SqlParameter("@ArgYStart",AcaStart),
                        new SqlParameter("@ArgFromMonID",FromMonID),
                        new SqlParameter("@ArgToMonID",ToMonthID),
                        new SqlParameter("@ArgCategoryID",CategoryID),
                        new SqlParameter("@ArgTempTable",TempTable),
                        new SqlParameter("@ArgFromDate",FromDate),
                        new SqlParameter("@ArgTillDate",TillDate),
                        new SqlParameter("@ArgRouteID",RouteID),
                        new SqlParameter("@ArgExamID",ExamID),
                        new SqlParameter("@ArgSubjectID",SubjectID),
                        new SqlParameter("@ArgTemplateID",TemplateID),
                        new SqlParameter("@ArgSessionID",SessionID),
                        new SqlParameter("@ArgForm",FormID)
            };
            Database.CommandTimeout = 0;
            return Database.SqlQuery<Messages>("EMSMSSend  @ArgAdnoTable,@ArgSchoolID,@ArgYStart,@ArgFromMonID,@ArgToMonID,@ArgCategoryID,@ArgTempTable,@ArgFromDate,@ArgTillDate,@ArgRouteID,@ArgExamID,@ArgSubjectID,@ArgTemplateID,@ArgSessionId,@ArgForm", param).ToList();
        }

        #endregion

        #region 26. School Online

        public List<ExamVisiblityData> BindGridExamParent(int AcaStart, int SchoolID)
        {
            SqlParameter[] param = new SqlParameter[] 
                            { 
                                new SqlParameter("@ArgAcaStart",AcaStart),
                                new SqlParameter("@ArgSchoolID",SchoolID),
                                           
                            };


            return Database.SqlQuery<ExamVisiblityData>("BindGridExamParent @ArgAcaStart, @ArgSchoolID", param).ToList();
        }
        public List<ExamNameData> ParentExamEvaluationData(int AcaStart, int StudentId, int SchoolID)
        {
            SqlParameter[] param = new SqlParameter[] 
                            { 
                                new SqlParameter("@ArgAcaStart",AcaStart),
                                new SqlParameter("@ArgStudentID",StudentId),
                                new SqlParameter("@ArgSchoolID",SchoolID),
                                           
                            };


            return Database.SqlQuery<ExamNameData>("ParentExamEvaluationData @ArgAcaStart, @ArgStudentID,@ArgSchoolID", param).ToList();
        }

        public List<MTDDLMaster> fillSOSubject(int AcaStart, int SchoolID)
        {
            List<MTDDLMaster> ls = new List<MTDDLMaster>();

            ls = (from Main in
                      (from SWAP in SubjectWiseAssignmentPermissions
                       join ASM in AssignmentSubjectMasters on new { SWAP.SubjectID, AcaStart = (int)SWAP.Acastart, SchoolID = (int)SWAP.SchoolID } equals new { ASM.SubjectID, ASM.AcaStart, ASM.SchoolID }
                       where ASM.SubjectID != 0 && ASM.SchoolID == SchoolID
                       select new { ASM.SubjectID, ASM.SubjectName }).Distinct()
                  orderby Main.SubjectName
                  select new MTDDLMaster() { DDLID = Main.SubjectID.ToString(), DDLName = Main.SubjectName }).ToList();
            return ls;
        }
        public virtual List<PDAssignerDetails> PDDiaryassigner(string ClassID, string SectionID, DateTime Date, string HeadID, string GroupID, int SchoolID, int AcaStart)
        {
            SqlParameter[] para = new SqlParameter[]
                {
                            new SqlParameter("@ArgClassID",ClassID),
                            new SqlParameter("@ArgSectionID",SectionID),
                            new SqlParameter("@ArgDate",Date),
                            new SqlParameter("@ArgHeadID",HeadID),
                            new SqlParameter("@ArgGroupID",GroupID),
                            new SqlParameter("@ArgSchoolID",SchoolID),
                            new SqlParameter("@ArgAcaStart",AcaStart)
                };
            return Database.SqlQuery<PDAssignerDetails>("PDDiaryassigner @ArgClassID,@ArgSectionID,@ArgDate,@ArgHeadID,@ArgGroupID,@ArgSchoolID,@ArgAcaStart", para).ToList();

        }

        public virtual List<ParentLoginDetails> Parentlogin(int ClassID, int AcaStart, int SchoolID, string val, string Flag)
        {
            SqlParameter[] param = new SqlParameter[]
            {
                new SqlParameter("@ArgClassID",ClassID),
                new SqlParameter("@ArgAcaStart",AcaStart),
                new SqlParameter("@ArgSchoolID",SchoolID),
                new SqlParameter("@ArgVal",val),
                new SqlParameter("@ArgFlag",Flag),
            };
            return Database.SqlQuery<ParentLoginDetails>("Parentlogin @ArgClassID,@ArgAcaStart,@ArgSchoolID,@ArgVal,@ArgFlag", param).ToList();
        }
        public virtual List<SubjectTeacherDetails> SubjectTeacherDetails(string ClassID, string SectionID, int SchoolID, int AcaStart)
        {

            SqlParameter[] param = new SqlParameter[]
            {
                new SqlParameter("@ArgClassID",ClassID),
                new SqlParameter("@ArgSectionID",SectionID),
                new SqlParameter("@ArgSchoolID",SchoolID),
                new SqlParameter("@ArgAcaStart",AcaStart),
            };
            return Database.SqlQuery<SubjectTeacherDetails>("SubjectTeacherDetails @ArgClassID,@ArgSectionID,@ArgSchoolID,@ArgAcaStart", param).ToList();
        }



        public virtual List<EventAssign> Event(DateTime date)
        {
            SqlParameter[] param = new SqlParameter[]
            {
                new SqlParameter("@ArgDate",date)
            };
            return Database.SqlQuery<EventAssign>("Event @ArgDate", param).ToList();
        }
        public virtual List<BindAssignmentPermission> BindAssignmentPermission(string TableName, int AcaStart, int SchoolID, int Type, int UID)
        {
            SqlParameter[] para = new SqlParameter[]
                {
                            new SqlParameter("@ArgTableName",TableName),
                            new SqlParameter("@ArgAcaStart",AcaStart),
                            new SqlParameter("@ArgSchoolID",SchoolID),
                            new SqlParameter("@argType",Type),
                            new SqlParameter("@ArgUID",UID)
                };
            return Database.SqlQuery<BindAssignmentPermission>("BindAssignmentPermission @ArgTableName,@ArgAcaStart,@ArgSchoolID,@ArgType,@ArgUID", para).ToList();
        }

        public virtual List<MTDDLMaster> BindAssignmentSubject(int UID, int AcaStart, int SchoolID, string ClassSecID, int AssignID)
        {
            List<MTDDLMaster> ls;
            SqlParameter[] para = new SqlParameter[]
                { 
                            new SqlParameter("@ArgUID",UID),
                            new SqlParameter("@ArgAcaStart",AcaStart),
                            new SqlParameter("@ArgSchoolID",SchoolID),
                            new SqlParameter("@ArgClassSecID",ClassSecID),
                             new SqlParameter("@ArgAssignID",AssignID)
                };
            ls = Database.SqlQuery<MTDDLMaster>("AssignmentSubject @ArgUID,@ArgAcaStart,@ArgSchoolID,@ArgClassSecID,@ArgAssignID", para).ToList();
            return ls;
        }

        public virtual DataSet ParentFeedBackForm(int AcaStart, int SchoolID)
        {
            SqlParameter[] param = new SqlParameter[]
            {
            new SqlParameter("@SchoolID",SchoolID),
            new SqlParameter("@AcaStart",AcaStart),
        
            
            };
            DataSet ds = GetSPFromSql("SPParentFeedBackForm", param);
            return ds;
        }

        public List<CampusCare.RestServiceImpl.GetInboxList> MobieInboxData(int UID)
        {
            SqlParameter[] param = new SqlParameter[]
                            {
                                new SqlParameter("@TUID",UID),
                            };
            return Database.SqlQuery<CampusCare.RestServiceImpl.GetInboxList>("spMobieInboxData @TUID", param).ToList();
        }
        #endregion

        #region HTMLReport


        public virtual DataSet HTMLDynamicCertificatePrint(int StudentID, string @Date, string @DateofBirth, string @DOBInWords, int @CertificateID, int @AcaStart, int @SchoolID, string @Content)
        {
            SqlParameter[] param = new SqlParameter[] 
            { 
                new SqlParameter("@StudentID",StudentID),
                    new SqlParameter("@Date",Date) ,
                     new SqlParameter("@DateofBirth",DateofBirth) ,
                     new SqlParameter("@DOBInWords",DOBInWords) ,
                     new SqlParameter("@CertificateID",CertificateID) ,
                     new SqlParameter("@AcaStart",AcaStart) ,
                     new SqlParameter("@SchoolID",SchoolID) ,
                      new SqlParameter("@Content",Content) ,
            };
            DataSet ds = GetSPFromSql("HTMLDynamicCertificatePrint", param);
            return ds;

        }
        public virtual DataSet HTMLDynamicCertificatePrintForTC(int StudentID, string @Date, string @DateofBirth, string @DOBInWords, int @CertificateID, int @AcaStart, int @SchoolID, string @Content)
        {
            SqlParameter[] param = new SqlParameter[] 
            { 
                new SqlParameter("@StudentID",StudentID),
                    new SqlParameter("@Date",Date) ,
                     new SqlParameter("@DateofBirth",DateofBirth) ,
                     new SqlParameter("@DOBInWords",DOBInWords) ,
                     new SqlParameter("@CertificateID",CertificateID) ,
                     new SqlParameter("@AcaStart",AcaStart) ,
                     new SqlParameter("@SchoolID",SchoolID) ,
                      new SqlParameter("@Content",Content) ,
            };
            DataSet ds = GetSPFromSql("HTMLDynamicCertificatePrintForTC", param);
            return ds;

        }

        public virtual DataSet SIHTMLReport(int strFieldID, int strModuleID)
        {
            SqlParameter[] param = new SqlParameter[] 
            { 
                new SqlParameter("@ArgFieldID",strFieldID),
                new SqlParameter("@ArgModuleID",strModuleID)
            };
            DataSet ds = GetSPFromSql("SIHTMLReport", param);
            return ds;

        }

        public List<MTCheckMaster> fillClassSection(int CSID, int intSchoolID, int intAcaStart)
        {
            SqlParameter[] param = new SqlParameter[] 
            { 
                new SqlParameter("@ReportID",CSID),                        
                new SqlParameter("@SchoolID",intSchoolID),
                new SqlParameter("@AcaStart", intAcaStart),                        
            };
            return Database.SqlQuery<MTCheckMaster>("HTMLClassSecBinding @ReportID, @SchoolID, @AcaStart", param).ToList();

        }


        public virtual DataSet SIStudentListHTML(int ArgAcaStart, int ArgSchoolID, int ArgUserID, int ArgReportID, string ArgSession)
        {
            SqlParameter[] param = new SqlParameter[] 
        { 
            new SqlParameter("@ArgAcaStart",ArgAcaStart),
            new SqlParameter("@ArgSchoolID",ArgSchoolID),
            new SqlParameter("@ArgUserID",ArgUserID),
            new SqlParameter("@ArgReportID",ArgReportID),             
            new SqlParameter("@ArgSession",ArgSession)   
        };
            DataSet ds = GetSPFromSql("SIStudentListHTML", param);
            return ds;

        }

        public virtual DataSet StaffListHTML(int ArgSchoolID, int ArgUserID, int ArgReportID, string ArgSession, int @ArgModuleID)
        {
            SqlParameter[] param = new SqlParameter[] 
        { 
            new SqlParameter("@ArgSchoolID",ArgSchoolID),
            new SqlParameter("@ArgUserID",ArgUserID),
            new SqlParameter("@ArgReportID",ArgReportID),             
            new SqlParameter("@ArgSession",ArgSession) ,  
            new SqlParameter("@ArgModuleID",ArgModuleID)   
        };
            DataSet ds = GetSPFromSql("StaffListHTML", param);
            return ds;

        }
        #endregion

        #region Question Bank

        public virtual DataSet QuestionBankPreview(int ArgQBID, int ArgAcaStart)
        {
            SqlParameter[] param = new SqlParameter[] 
            { 
                new SqlParameter("@ArgQBID",ArgQBID),
                new SqlParameter("@ArgAcaStart",ArgAcaStart)
            };
            DataSet ds = GetSPFromSql("QuestionBankPreview", param);
            return ds;

        }
        public virtual DataSet QuestionBankSetDisplay(int ArgQSID, int ArgAcaStart, int ArgClassID, int ArgQBSubjectID, string ArgType, int ArgSchoolID)
        {
            SqlParameter[] param = new SqlParameter[] 
            { 
                new SqlParameter("@ArgQSID",ArgQSID),
                new SqlParameter("@ArgAcaStart",ArgAcaStart),             
                new SqlParameter("@ArgQBSubjectID",ArgQBSubjectID),                
                new SqlParameter("@ArgType",ArgType),
                new SqlParameter("@ArgSchoolID",ArgSchoolID)

            };
            DataSet ds = GetSPFromSql("QuestionBankSetDisplay", param);
            return ds;
        }

        public virtual DataSet QuestionBankSetDisplay(int ArgQSID, int ArgAcaStart, string classSections, int ArgQBSubjectID, string ArgType, int ArgSchoolID)
        {
            SqlParameter[] param = new SqlParameter[] 
            { 
                new SqlParameter("@ArgQSID",ArgQSID),
                new SqlParameter("@ArgAcaStart",ArgAcaStart), 
                new SqlParameter("@classSections",classSections), 
                new SqlParameter("@ArgQBSubjectID",ArgQBSubjectID),                
                new SqlParameter("@ArgType",ArgType),
                new SqlParameter("@ArgSchoolID",ArgSchoolID)

            };
            DataSet ds = GetSPFromSql("QuestionBankSetDisplay", param);
            return ds;
        }

        public virtual DataSet QuestionBankSetDisplay(int ArgQSID, int ArgAcaStart, int ArgClassID, string classSections, string classId, int ArgQBSubjectID, string ArgType, int ArgSchoolID)
        {
            SqlParameter[] param = new SqlParameter[] 
            { 
                new SqlParameter("@ArgQSID",ArgQSID),
                new SqlParameter("@ArgAcaStart",ArgAcaStart),                
                new SqlParameter("@ArgClassID",ArgClassID), 
                new SqlParameter("@classSections",classSections), 
                new SqlParameter("@classIds",classId), 
                new SqlParameter("@ArgQBSubjectID",ArgQBSubjectID),                
                new SqlParameter("@ArgType",ArgType),
                new SqlParameter("@ArgSchoolID",ArgSchoolID)

            };
            DataSet ds = GetSPFromSql("QuestionBankSetDisplay", param);
            return ds;
        }

        public virtual DataSet QuestionBankGenerate(int ArgSchoolID, int ArgYStart, string classSection, int ArgSubjectID, string ArgQuestionData, int AutoID)
        {
            SqlParameter[] param = new SqlParameter[] 
                { 
                    new SqlParameter("@ArgSchoolID",ArgSchoolID),
                    new SqlParameter("@ArgYStart",ArgYStart),
                    new SqlParameter("@classSection",classSection),
                    new SqlParameter("@ArgSubjectID", ArgSubjectID),
                    new SqlParameter("@ArgQuestionData",ArgQuestionData),
                    new SqlParameter("@ArgQSID", AutoID)
                };
            DataSet ds = GetSPFromSql("QuestionBankGenerate", param);
            return ds;

        }

        public virtual DataSet QuestionBankSetPreview(int ArgQSID, int ArgAcaStart, int studentID, int ClassID, int SecID)
        {
            SqlParameter[] param = new SqlParameter[] 
            { 
                new SqlParameter("@ArgQSID",ArgQSID),
                new SqlParameter("@ArgAcaStart",ArgAcaStart),
                new SqlParameter("@StudentID",studentID),
                new SqlParameter("@ClassID",ClassID),
                new SqlParameter("@SecID",SecID)
            };
            DataSet ds = GetSPFromSql("QuestionBankSetPreview", param);
            return ds;
        }

        #endregion

        #region Staff Login
        public DataSet EmployeeStaffSalaryGrid(int @PRLEmployeeID, int @ArgAcastart)
        {
            SqlParameter[] param = new SqlParameter[]
                    {
                         new SqlParameter("@PRLEmployeeID",PRLEmployeeID),
                         new SqlParameter("@ArgAcastart",ArgAcastart)
                    };
            DataSet ds = GetSPFromSql("EmployeeStaffSalaryGrid", param);
            return ds;
        }
        public virtual List<GetGridData> StaffLoginLeaveDetails(int ArgSchoolID, int ArgEmpID, int ArgLeaveID, int @ArgStartID, int @ArgLeaveDivison)
        {
            SqlParameter[] param = new SqlParameter[] 
                { 
                    new SqlParameter("@ArgSchoolID",ArgSchoolID),
                    new SqlParameter("@ArgEmpID",ArgEmpID),
                    new SqlParameter("@ArgLeaveID",ArgLeaveID)  ,
                    new SqlParameter("@ArgStartID",ArgStartID) ,  
                     new SqlParameter("@ArgLeaveDivison",ArgLeaveDivison) 
                };
            return Database.SqlQuery<GetGridData>("StaffLoginLeaveDetails @ArgSchoolID,@ArgEmpID,@ArgLeaveID,@ArgStartID,@ArgLeaveDivison", param).ToList();
        }
        public DataSet StaffSalaryGrid(int @PRLEmployeeID, int @ArgAcastart)
        {
            SqlParameter[] param = new SqlParameter[]
                    {
                         new SqlParameter("@PRLEmployeeID",PRLEmployeeID),
                         new SqlParameter("@ArgAcastart",ArgAcastart),
                    };
            DataSet ds = GetSPFromSql("StaffSalaryGrid", param);
            return ds;
        }
        public List<Chart> StaffDashBoardChart(int ArgSchoolID, int ArgAcaStart, string ArgFlag, int ArgEmpID)
        {
            SqlParameter[] param = new SqlParameter[]
            { 
                new SqlParameter("@ArgSchoolID",ArgSchoolID),
                new SqlParameter("@ArgAcaStart",ArgAcaStart),
                new SqlParameter("@ArgFlag",ArgFlag),
                new SqlParameter("@ArgEmpID",ArgEmpID)
            };
            return Database.SqlQuery<Chart>("StaffDashBoardChart @ArgSchoolID,@ArgAcaStart,@ArgFlag,@ArgEmpID", param).ToList();
        }
        public virtual List<GetGridData> spStaffAttendanceCalender(string ArgFromDate, string ArgToDate, int ArgEmployeeID, int ArgSchoolID)
        {
            SqlParameter[] param = new SqlParameter[]
            {
                new SqlParameter("@ArgFromDate",ArgFromDate),
                new SqlParameter("@ArgToDate",ArgToDate),
                new SqlParameter("@ArgEmployeeID",ArgEmployeeID),
                new SqlParameter("@ArgSchoolID",ArgSchoolID)

            };
            return Database.SqlQuery<GetGridData>("spStaffAttendanceCalender @ArgFromDate,@ArgToDate,@ArgEmployeeID,@ArgSchoolID", param).ToList();
        }
        public virtual List<MessagesBind> MessageFilter(int UID, string flag, string ArgFromDate, string ArgToDate, int ArgClassID, int ArgSecID, int ArgStud, int ArgAcastart)
        {
            SqlParameter[] param = new SqlParameter[]
            {
                new SqlParameter("@ArgUID",UID),
                new SqlParameter("@ArgFlag",flag),
                new SqlParameter("@ArgFromDate", ArgFromDate),
                new SqlParameter("@ArgToDate", ArgToDate),
                new SqlParameter("@ArgClassID", ArgClassID),
                new SqlParameter("@ArgSecID", ArgSecID),
                new SqlParameter("@ArgStud", ArgStud),
                new SqlParameter("@ArgAcastart", ArgAcastart),
            };
            return Database.SqlQuery<MessagesBind>("MessageFilter @ArgUID,@ArgFlag,@ArgFromDate,@ArgToDate,@ArgClassID,@ArgSecID,@ArgStud,@ArgAcastart", param).ToList();
        }

        #endregion

        #region Management Login

        public virtual DataSet ManagementDashboard(int ArgSchoolID, int ArgYStart, string ArgFlag)
        {
            SqlParameter[] param = new SqlParameter[] 
                { 
                    new SqlParameter("@ArgAcastart",ArgYStart),
                    new SqlParameter("@ArgSchoolID",ArgSchoolID),
                    new SqlParameter("@ArgFlag", ArgFlag)
                };
            DataSet ds = GetSPFromSql("ManagementDashboard", param);
            return ds;

        }
        #endregion

        #region Parent Module

        public void TransactionUpdate(int uid, int AcaStart, int SchoolID, int UID, string RequestUserIP, string SessionID)
        {
            ParentController PC = new ParentController();
            DbCampusContext db = new DbCampusContext();
            FeeOnlineMaster objFom = new FeeOnlineMaster();

            string[] arr = { "UNSUCCESSFUL", "TRANSACTION BEGIN" };
            string[] arr1 = { "INITIATED", "FAILED", "NODATA" };
            var TransactionNo = (from PM in db.FeeOnlinePaymentMasters
                                     //join PD in db.FeeOnlinePaymentDetails on PM.AutoID equals PD.SystemTransactionID
                                 join PD in db.FeeOnlineMasters on PM.AutoID equals PD.SystemTransactionID
                                 where PM.SchoolID == SchoolID && PM.AcaStart == AcaStart && (PM.Verify == "N" || PM.Verify == null) && arr.Contains(PD.SuccessStatus)
                                 && PM.PayForFlag == "FeeCollection" && PM.RequestUserID == uid && !arr1.Contains(PD.AtomVerify.ToUpper())
                                 select new { UserSystemTransactionID = PM.UserSystemTransactionID, SystemTransactionID = PM.AutoID, StudentId = PD.StudentID }).Distinct().ToList();


            //if (StudentID == 0)
            //{
            //    DateTime FromDate = DateTime.Now.AddDays(-1);
            //    DateTime ToDate = DateTime.Now.AddMinutes(-10);

            //    TransactionNo = (from PM in db.FeeOnlinePaymentMasters
            //                     join PD in db.FeeOnlinePaymentDetails on PM.AutoID equals PD.SystemTransactionID
            //                     where PM.SchoolID == SchoolID && PM.AcaStart == AcaStart && (PM.Verify == "N" || PM.Verify == null) && arr.Contains(PM.SuccessStatus)
            //     && PM.PayForFlag == "FeeCollection" && PM.RequestTime >= FromDate && PM.RequestTime <= ToDate && !arr1.Contains(PM.AtomVerify.ToUpper())
            //                     select new { UserSystemTransactionID = PM.UserSystemTransactionID, SystemTransactionID = PM.AutoID }).Distinct().ToList();
            //}
            foreach (var trn in TransactionNo)
            {
                int stid = (int)trn.StudentId;
                FeeOnlinePaymentDetail PD = db.FeeOnlinePaymentDetails.Where(model => model.SystemTransactionID == trn.SystemTransactionID && model.StudentID == stid).FirstOrDefault();
                //FeeOnlineMaster PO = db.FeeOnlineMasters.Where(model => model.SystemTransactionID == trn.SystemTransactionID && model.StudentID == stid).FirstOrDefault();

                if ((from FAM in db.FEEAccountMasters
                     join FAD in db.FEEAccountDetails on FAM.AutoID equals FAD.BLNo
                     where FAM.StdID == PD.StudentID && FAD.FIID == PD.InstID && FAM.SchoolID == SchoolID && FAM.AcaStart == AcaStart
                     select new { BillNo = FAM.AutoID }).ToList().Count == 0)
                {
                    if (PC.CheckAtomStatus(trn.UserSystemTransactionID, stid) == "SUCCESS")
                    {
                        FeeOnlinePaymentMaster PM = db.FeeOnlinePaymentMasters.Where(model => model.AutoID == trn.SystemTransactionID).FirstOrDefault();

                        if (PM != null)
                        {
                            //FeeOnlineSuccessDetails OSD = new FeeOnlineSuccessDetails();
                            //OSD.SystemTransactionID = PM.AutoID;
                            //OSD.UserSystemTransactionID = PM.UserSystemTransactionID;
                            //OSD.OldBankTransactionID = PM.BankTransactionID;
                            //OSD.OldSuccessStatus = PM.SuccessStatus;
                            //OSD.OldBankName = PM.BankName;
                            //OSD.OldRequestUserID = PM.RequestUserID;
                            //OSD.OldRequestTime = PM.RequestTime;
                            //OSD.SchoolID = PM.SchoolID;
                            //OSD.AcaStart = PM.AcaStart;
                            //OSD.OldUserIP = PM.UserIP;
                            //OSD.OldAtomTransactionID = PM.AtomTransactionID;
                            //db.FeeOnlineSuccessDetailss.Add(OSD);
                            PM.Verify = "Y";
                            PM.SuccessStatus = "SUCCESSFUL";
                            PM.UserIP = RequestUserIP;
                            PM.UpdateUserID = UID;
                            PM.UpdateDate = DateTime.Now;
                            db.SaveChanges();

                            if (PM.PayForFlag == "FeeCollection")
                            {
                                db.FeePostOnline(PM.AutoID, SchoolID, AcaStart, UID, SessionID, stid);
                                //var billnos = db.FeeOnlineSystemTransactionBillNos.Where(model => model.SystemTransactionID == trn.SystemTransactionID).ToList();
                                //foreach (var blno in billnos)
                                //{
                                //var FA = db.FEEAccountMasters.Find(blno.BillNo);
                                int autoid = db.FeeOnlineMasters.Where(model => model.StudentID == stid && model.SystemTransactionID == PM.AutoID).FirstOrDefault().AutoID;
                                objFom = db.FeeOnlineMasters.Find(autoid);
                                objFom.Verify = PM.Verify;
                                objFom.AtomVerify = PM.AtomVerify;
                                objFom.SuccessStatus = PM.SuccessStatus;
                                // }
                                db.SaveChanges();
                            }
                        }
                    }
                }
            }
        }




        //SendSMStWCF
        public void FeePostOnline(int ArgSystemTransactionID, int ArgSchoolID, int ArgYStart, int ArgUserID, string ArgSessionID, int StudID)
        {
            SqlParameter[] param = new SqlParameter[]
            {
                new SqlParameter("@ArgSystemTransactionID",ArgSystemTransactionID),
                new SqlParameter("@ArgSchoolID",ArgSchoolID),
                new SqlParameter("@ArgYStart",ArgYStart),
                new SqlParameter("@ArgUserID",ArgUserID),
                new SqlParameter("@ArgSessionID",ArgSessionID),
                new SqlParameter("@StudID",StudID)
            };
            Database.ExecuteSqlCommand("FeePostOnline @ArgSystemTransactionID, @ArgSchoolID, @ArgYStart, @ArgUserID,@ArgSessionID,@StudID", param);
        }



        public virtual List<PLlibSearch> PLLibSearch(string Criteria)
        {
            SqlParameter[] param = new SqlParameter[]
            {
                new SqlParameter("@Criteria",Criteria),
            };
            return Database.SqlQuery<PLlibSearch>("PLlibSearch @Criteria", param).ToList();
        }


        public virtual List<ProfileDetails> ProfileDetails(int StudentID, int AcaStart)
        {
            SqlParameter[] para = new SqlParameter[]
                {
                            new SqlParameter("@ArgStudentID",StudentID),
                            new SqlParameter("@ArgAcaStart",AcaStart),

                };
            return Database.SqlQuery<ProfileDetails>("FILLStudentData @ArgStudentID, @ArgAcaStart", para).ToList();
        }
        public virtual List<PLPersonalDairy> PLPersonalDiary(int StudentId, int GroupId, string FromDate, string ToDate)
        {
            SqlParameter[] para = new SqlParameter[]
            {
                new SqlParameter("@ArgStudentID",StudentId),
                new SqlParameter("@ArgGroupID",GroupId),
                new SqlParameter("@ArgFromDate",FromDate),
                new SqlParameter("@ArgToDate",ToDate)
            };
            return Database.SqlQuery<PLPersonalDairy>("PLPersonalDiary	@ArgStudentID,@ArgGroupID,@ArgFromDate, @ArgToDate", para).ToList();
        }
        public virtual List<AssignmentDetails> Assignment(int StudentId, int Acastart, int SchoolId, string Flag, string FromDte, string ToDte, int Subject)
        {
            SqlParameter[] para = new SqlParameter[]
            {
               new SqlParameter("@ArgStudentID",StudentId),
               new SqlParameter("@ArgAcastart",Acastart),
               new SqlParameter("@ArgSchoolID",SchoolId),
               new SqlParameter("@ArgFlag",Flag),
               new SqlParameter("@ArgFromDate",FromDte),
               new SqlParameter("@ArgToDate",ToDte),
               new SqlParameter("@ArgSubject",Subject)
            };
            return Database.SqlQuery<AssignmentDetails>("Assignment @ArgStudentID,@ArgAcastart,@ArgSchoolID,@ArgFlag,@ArgFromDate,@ArgToDate,@ArgSubject", para).ToList();
        }
        public virtual List<LibHistory> LibraryHistory(int Acastart, int libraryId, int MemberId, string SessionType, int SchoolId)
        {
            SqlParameter[] param = new SqlParameter[]
                 {
                            new SqlParameter("@ArgAcademicYearID",Acastart),
                            new SqlParameter("@ArgLibraryId",libraryId),
                            new SqlParameter("@ArgMemberId",MemberId),
                            new SqlParameter("@ArgSessionType",SessionType),
                            new SqlParameter("@ArgSchoolID",SchoolId)
                 };
            return Database.SqlQuery<LibHistory>("LIBStudentBookIssueHistory @ArgAcademicYearID,@ArgLibraryId,@ArgMemberId,@ArgSessionType,@ArgSchoolID", param).ToList();
        }
        public virtual List<PlFeeSummary> PlFeeSummary(int @SchoolID, int AcaStart, int Flag, int StudentId, string FIID)
        {
            SqlParameter[] param = new SqlParameter[]
            {
                new SqlParameter("@ArgSchoolID",SchoolID),
                new SqlParameter("@ArgAcaStart",AcaStart),
                new SqlParameter("@ArgFlag",Flag),
                new SqlParameter("@ArgStudentID",StudentId),
                new SqlParameter("@ArgFIID",FIID)
            };
            return Database.SqlQuery<PlFeeSummary>("FeeSummary @ArgSchoolID,@ArgAcaStart,@ArgFlag,@ArgStudentID,@ArgFIID", param).ToList();
        }
        public virtual List<LibNewArrival> PlCollection(int LibraryId, int CollectionId, int AcaStart, string FromDate, string ToDate)
        {
            SqlParameter[] param = new SqlParameter[]
                {
                    new SqlParameter("@ArgLibraryId",LibraryId),
                    new SqlParameter("@ArgCollectionID",CollectionId),
                    new SqlParameter("@ArgAcaStart",AcaStart),
                    new SqlParameter("@ArgFromDate",FromDate),
                    new SqlParameter("@ArgToDate",ToDate)
                };
            return Database.SqlQuery<LibNewArrival>("NewArrival @ArgLibraryId,@ArgCollectionID,@ArgFromDate,@ArgAcaStart,@ArgToDate", param).ToList();
        }
        public virtual List<PlFeeSummary> FeeOnlinePayment(int AcaStart, int StudentId, int SchoolID, int FromMonID, int ToMonID, int FeeType)
        {
            SqlParameter[] param = new SqlParameter[]
                {

                     new SqlParameter("@SchoolID",SchoolID),
                    new SqlParameter("@ArgStudentID",StudentId),
                   new SqlParameter("@AcaStart",AcaStart),
                    new SqlParameter("@ArgFromMonID",FromMonID),
                    new SqlParameter("@ArgToMonID",ToMonID),
                    new SqlParameter("@ArgFeeType",FeeType)
                };
            return Database.SqlQuery<PlFeeSummary>("FeeOnlinePayment @SchoolID,@ArgStudentID,@AcaStart,@ArgFromMonID,@ArgToMonID,@ArgFeeType", param).ToList();
        }

        public virtual List<MessagesBind> MessageBind(int UID, string flag)
        {
            SqlParameter[] param = new SqlParameter[]
            {
                new SqlParameter("@ArgUID",UID),
                new SqlParameter("@ArgFlag",flag)
            };
            return Database.SqlQuery<MessagesBind>("MessageBind @ArgUID,@ArgFlag", param).ToList();
        }

        public virtual DataSet AttandanceDetails(int AcaStart, int SchoolID, int StudentID, string Criteria)
        {
            SqlParameter[] param = new SqlParameter[]
            {
            new SqlParameter("@AcaStart",AcaStart),
            new SqlParameter("@SchoolID",SchoolID),
            new SqlParameter("@StudentID",StudentID),
            new SqlParameter("@Criteria",Criteria),
            };
            DataSet ds = GetSPFromSql("PlAttDetail", param);
            return ds;
        }

        public virtual DataSet ExamScheduleDetails(int StudentID, int AcaStart, int SchoolID)
        {
            SqlParameter[] param = new SqlParameter[]
            {
            new SqlParameter("@StudentID",StudentID),
            new SqlParameter("@AcaStart",AcaStart),
            new SqlParameter("@SchoolID",SchoolID),

            };
            DataSet ds = GetSPFromSql("ExamSchedule", param);
            return ds;
        }

        public virtual List<GetGridData> QBParentDisplay(int ClassID, int SectionID, int QBSubjectID, int SchoolID, int AcaStart, int StudentID)
        {
            SqlParameter[] param = new SqlParameter[]
                {
                    new SqlParameter("@ArgClassID",ClassID),
                    new SqlParameter("@ArgSectionID",SectionID),
                    new SqlParameter("@ArgQBSubjectID",QBSubjectID),
                    new SqlParameter("@ArgSchoolID",SchoolID),
                    new SqlParameter("@ArgAcaStart",AcaStart),
                    new SqlParameter("@ArgStudentID",StudentID)
                };
            return Database.SqlQuery<GetGridData>("Exec QuestionBankParentDisplay @ArgClassID,@ArgSectionID,@ArgQBSubjectID,@ArgSchoolID,@ArgAcaStart,@ArgStudentID", param).ToList();
        }

        public virtual List<TransportDetails> TransportDetails(int StudentID, int AcaStart, int SchoolID)
        {
            SqlParameter[] para = new SqlParameter[]
                {
                            new SqlParameter("@ArgStudentID",StudentID),
                            new SqlParameter("@ArgAcaStart",AcaStart),
                            new SqlParameter("@SchoolID",SchoolID)

                };
            return Database.SqlQuery<TransportDetails>("TRStudentData @ArgStudentID, @ArgAcaStart,@SchoolID", para).ToList();
        }
        public List<SOAssignmentDetail> SOAssignmentDetailCount(int StudEmpID, int AcaStart, int SchoolID)
        {
            SqlParameter[] param = new SqlParameter[]
                            {
                                new SqlParameter("@intStudEmpID",StudEmpID),
                                new SqlParameter("@intAcaStart",AcaStart),
                                new SqlParameter("@intSchoolID",SchoolID),

                            };
            return Database.SqlQuery<SOAssignmentDetail>("SOAssignmentDetail @intStudEmpID, @intAcaStart, @intSchoolID  ", param).ToList();
        }

        public List<GetGridData> SOAssignmentList(int StudEmpID, int AcaStart, int SchoolID)
        {
            SqlParameter[] param = new SqlParameter[]
                            {
                                new SqlParameter("@intStudEmpID",StudEmpID),
                                new SqlParameter("@intAcaStart",AcaStart),
                                new SqlParameter("@intSchoolID",SchoolID),

                            };
            return Database.SqlQuery<GetGridData>("SOAssignmentList @intStudEmpID, @intAcaStart, @intSchoolID  ", param).ToList();
        }
        public virtual DataSet SODashBoardEventList(int StudEmpID, int AcaStart, int SchoolID)
        {
            SqlParameter[] param = new SqlParameter[]
            {
                new SqlParameter("@intStudEmpID",StudEmpID),
                new SqlParameter("@intAcaStart",AcaStart),
                new SqlParameter("@intSchoolID",SchoolID),
            };
            DataSet ds = GetSPFromSql("SODashBoardEventList", param);
            return ds;
        }
        public virtual DataSet SODashBoardEventCount(int StudEmpID, int AcaStart, int SchoolID)
        {
            SqlParameter[] param = new SqlParameter[]
            {
                new SqlParameter("@intStudEmpID",StudEmpID),
                new SqlParameter("@intAcaStart",AcaStart),
                new SqlParameter("@intSchoolID",SchoolID),
            };
            DataSet ds = GetSPFromSql("SODashBoardEventCount", param);
            return ds;
        }
        #endregion


        #region Book Store

        public decimal fnGetQuantityByItemId(int bsItemId)
        {
            SqlParameter[] param = new SqlParameter[] { 
            new SqlParameter("@ItemID", bsItemId)
            };
            return Database.SqlQuery<decimal>("SELECT [dbo].[fnGetQuantityByItemid](@ItemID)", param).SingleOrDefault();
        }

        public List<MTDDLMaster> fnFillSalesByKitID(int bsKitId)
        {
            List<MTDDLMaster> obj = new List<MTDDLMaster>();
            SqlParameter[] param = new SqlParameter[] { 
            new SqlParameter("@KitID", bsKitId)
            };
            foreach (var item in Database.SqlQuery<MTDDLMaster>("SELECT DDLID,DDLName FROM [FillSalesByKitId](@KitID)", param))
            {
                obj.Add(item);
            };
            return obj;
        }

        public List<BSPurchaseDetails> FillPurchaseReturnDetails(int ReturnNo)
        {
            List<BSPurchaseDetails> obj = new List<BSPurchaseDetails>();
            SqlParameter[] param = new SqlParameter[] { 
            new SqlParameter("@ReturnNo", ReturnNo)
            };

            DataSet ds = GetFromSqlQuery("SELECT * FROM [FillPurchaseReturnDetails](@ReturnNo)", param);
            if (ds != null && ds.Tables.Count > 0)
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    BSPurchaseDetails lst = new BSPurchaseDetails();
                    lst.AutoID = ds.Tables[0].Rows[i]["BSPRETURNDETAILID"] == DBNull.Value ? 0 : Convert.ToInt32(ds.Tables[0].Rows[i]["BSPRETURNDETAILID"]);
                    lst.BSPurchaseID = ds.Tables[0].Rows[i]["BSPReturnID"] == DBNull.Value ? 0 : Convert.ToInt32(ds.Tables[0].Rows[i]["BSPReturnID"]);
                    lst.BSItemID = ds.Tables[0].Rows[i]["BSItemID"] == DBNull.Value ? 0 : Convert.ToInt32(ds.Tables[0].Rows[i]["BSItemID"]);
                    lst.Rate = ds.Tables[0].Rows[i]["Rate"] == DBNull.Value ? 0 : Convert.ToInt32(ds.Tables[0].Rows[i]["Rate"]);
                    lst.Quantity = ds.Tables[0].Rows[i]["Quantity"] == DBNull.Value ? 0 : Convert.ToInt32(ds.Tables[0].Rows[i]["Quantity"]);
                    lst.ItemName = ds.Tables[0].Rows[i]["ItemName"].ToString();
                    lst.UnitAbbr = ds.Tables[0].Rows[i]["UnitAbbr"].ToString();
                    lst.TotalAmt = ds.Tables[0].Rows[i]["QUANTITY1"] == DBNull.Value ? 0 : Convert.ToInt32(ds.Tables[0].Rows[i]["QUANTITY1"]);
                    obj.Add(lst);
                }
            }

            return obj;
        }

        public List<BSTransactionDetails> FillSaleReturnDetails(int ReturnNo)
        {
            List<BSTransactionDetails> obj = new List<BSTransactionDetails>();
            SqlParameter[] param = new SqlParameter[] { 
            new SqlParameter("@ReturnNo", ReturnNo)
            };

            DataSet ds = GetFromSqlQuery("SELECT * FROM [FillSaleReturnDetails](@ReturnNo)", param);
            if (ds != null && ds.Tables.Count > 0)
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    BSTransactionDetails lst = new BSTransactionDetails();
                    lst.AutoID = ds.Tables[0].Rows[i]["AutoID"] == DBNull.Value ? 0 : Convert.ToInt32(ds.Tables[0].Rows[i]["AutoID"]);
                    lst.BSTransactionID = ds.Tables[0].Rows[i]["BSTransactionID"] == DBNull.Value ? 0 : Convert.ToInt32(ds.Tables[0].Rows[i]["BSTransactionID"]);
                    lst.BSItemID = ds.Tables[0].Rows[i]["BSItemID"] == DBNull.Value ? 0 : Convert.ToInt32(ds.Tables[0].Rows[i]["BSItemID"]);
                    lst.Rate = ds.Tables[0].Rows[i]["SaleRate"] == DBNull.Value ? Convert.ToDecimal(ds.Tables[0].Rows[i]["ReturnRate"]) : Convert.ToDecimal(ds.Tables[0].Rows[i]["SaleRate"]);
                    lst.Quantity = ds.Tables[0].Rows[i]["SaleQty"] == DBNull.Value ? 0 : Convert.ToDecimal(ds.Tables[0].Rows[i]["SaleQty"]);
                    lst.ReturnQty = ds.Tables[0].Rows[i]["ReturnQty"] == DBNull.Value ? 0 : Convert.ToDecimal(ds.Tables[0].Rows[i]["ReturnQty"]);
                    lst.ItemName = ds.Tables[0].Rows[i]["ItemName"].ToString();
                    lst.UnitAbbr = ds.Tables[0].Rows[i]["UnitAbbr"].ToString();
                    lst.TotalAmt = 0;
                    obj.Add(lst);
                }
            }

            return obj;
        }

        public DataSet GetFromSqlQuery(string query, SqlParameter[] param)
        {
            SqlConnection con = new SqlConnection(GetConnectionString());
            if (con.State == ConnectionState.Closed)
                con.Open();
            SqlCommand cmd = new SqlCommand(query, con);
            cmd.CommandTimeout = 0;
            cmd.CommandType = CommandType.Text;
            cmd.Parameters.AddRange(param);

            DataSet ds = new DataSet();
            SqlDataAdapter adp = new SqlDataAdapter(cmd);
            adp.Fill(ds);

            cmd.Dispose();
            con.Close();
            return ds;
        }
        #endregion

        #region Principal Portal
        public virtual DataSet PrincipalExamSchedule(int AcaStart, int SchoolID, int ClassID = 0, int SectionID = 0)
        {
            SqlParameter[] param = new SqlParameter[]
            {
            new SqlParameter("@AcaStart",AcaStart),
            new SqlParameter("@SchoolID",SchoolID),
             new SqlParameter("@ClassID",ClassID),
            new SqlParameter("@SectionID",SectionID),
            
            };
            DataSet ds = GetSPFromSql("PrincipalExamSchedule", param);
            return ds;
        }
        public virtual DataSet StaffAttedanceAnalysis(int ArgSchoolID, int ArgAcaStart, string ArgSelField, string ArgGroup, int ArgEmployeeID, string ArgStrType)
        {
            SqlParameter[] param = new SqlParameter[] 
                { 
                    new SqlParameter("@ArgAcastart",ArgAcaStart),
                    new SqlParameter("@ArgSchoolID",ArgSchoolID),
                    new SqlParameter("@ArgSelFields", ArgSelField),
                    new SqlParameter("@ArgGroup", ArgGroup),
                    new SqlParameter("@ArgEmployeeID", ArgEmployeeID)  ,
                     new SqlParameter("@ArgStrType", ArgStrType)  ,
                };
            DataSet ds = GetSPFromSql("StaffAttedanceAnalysis", param);
            return ds;

        }
        public virtual List<GetGridData> PrincipalStudentOverView(int ArgSchoolID, int ArgAcaStart, string ArgFlag, int @ArgClassID, string @ArgCriteria)
        {
            SqlParameter[] param = new SqlParameter[] 
                { 
                    new SqlParameter("@ArgAcaStart",ArgAcaStart),
                    new SqlParameter("@ArgSchoolID",ArgSchoolID),
                    new SqlParameter("@ArgFlag",ArgFlag)  ,
                    new SqlParameter("@ArgClassID",ArgClassID) ,
                     new SqlParameter("@ArgCriteria",ArgCriteria)  
                };
            return Database.SqlQuery<GetGridData>("PrincipalStudentOverView @ArgSchoolID,@ArgAcaStart,@ArgFlag,@ArgClassID,@ArgCriteria", param).ToList();
        }


        public virtual List<GetGridData> PrincipalStaffOverView(int ArgSchoolID, string ArgFlag, int ArgCategoryID, string @ArgCriteria)
        {
            SqlParameter[] param = new SqlParameter[] 
                { 
                    new SqlParameter("@ArgSchoolID",ArgSchoolID),
                    new SqlParameter("@ArgFlag",ArgFlag) ,
                     new SqlParameter("@ArgCategoryID",ArgCategoryID)  ,
                      new SqlParameter("@ArgCriteria",ArgCriteria)  
                };
            return Database.SqlQuery<GetGridData>("PrincipalStaffOverView @ArgSchoolID,@ArgFlag,@ArgCategoryID,@ArgCriteria", param).ToList();
        }

        public class TempMessageDetails
        {
            public string Subject { get; set; }
            public int MessageID { get; set; }
            public string Date { get; set; }
            public string Fromuser { get; set; }
            public string Touser { get; set; }
        }
        public List<TempMessageDetails> MessageFilterP(string Type, string FromDate, string ToDate, string Subject, int AcaStart)
        {
            SqlParameter[] Param = new SqlParameter[]
                            {                        
                                new SqlParameter("@ArgFlag",Type),
                                new SqlParameter("@ArgFromDate",FromDate),
                                new SqlParameter("@ArgToDate",ToDate),
                                new SqlParameter("@ArgSubject",Subject),
                                new SqlParameter("@ArgacaStart",AcaStart)                                 
                            };
            return Database.SqlQuery<TempMessageDetails>("EXEC [MessageFilterPrincipal] @ArgFlag,@ArgFromDate,@ArgToDate,@ArgSubject,@ArgacaStart", Param).ToList();
        }

        public class TempMessageDetailsE
        {
            public int MessageID { get; set; }
            public string Subject { get; set; }
            public string Contents { get; set; }
            public DateTime Date { get; set; }
            public string ToUser { get; set; }
            public string FromUser { get; set; }
        }
        public List<TempMessageDetailsE> MessageFilterE(string Type, string FromDate, string ToDate, string Subject, int AcaStart)
        {
            SqlParameter[] Param = new SqlParameter[]
                            {                        
                                new SqlParameter("@ArgFlag",Type),
                                new SqlParameter("@ArgFromDate",FromDate),
                                new SqlParameter("@ArgToDate",ToDate),
                                new SqlParameter("@ArgSubject",Subject),
                                new SqlParameter("@ArgacaStart",AcaStart)                                 
                            };
            return Database.SqlQuery<TempMessageDetailsE>("EXEC [MessageFilterEmployees] @ArgFlag,@ArgFromDate,@ArgToDate,@ArgSubject,@ArgacaStart", Param).ToList();
        }

        #endregion



        #region 7. Discipline
        public List<TempClassWiseActionDetails> FillDLCWActionEntry(int intClassID, int intSectionID, string ActDate, int AcaStart, int SchoolID)
        {
            SqlParameter[] Param = new SqlParameter[]
                            {   
                                new SqlParameter("@ClassID",intClassID),
                                new SqlParameter("@SectionID",intSectionID),
                                new SqlParameter("@Date",ActDate),
                                new SqlParameter("@AcaStart",AcaStart),
                                new SqlParameter("@SchoolID",SchoolID),     
                            };
            return Database.SqlQuery<TempClassWiseActionDetails>("EXEC DLDisciplineClassWiseActionEntry @ClassID,@SectionID,@Date,@AcaStart,@SchoolID", Param).ToList();
        }
        #endregion

        #region HOD Portal
        public virtual List<GetGridData> ProClassWiseAttendance(int AcaStart, int SchoolID, string AttDate, string Type)
        {
            SqlParameter[] param = new SqlParameter[]
               {
                    new SqlParameter("@AcaStart",AcaStart),
                    new SqlParameter("@SchoolID",SchoolID),
                    new SqlParameter("@AttDate",AttDate),
                    new SqlParameter("@Type",Type)
               };
            return Database.SqlQuery<GetGridData>("ProClassWiseAttendance @AcaStart,@SchoolID,@AttDate,@Type", param).ToList();
        }

        public virtual List<GetGridData> PrincipalStudentAttendance(int AcaStart, int SchoolID, int ClassID, string Flag, string Date)
        {
            SqlParameter[] param = new SqlParameter[]
                {
                    new SqlParameter("@AcaStart",AcaStart),
                    new SqlParameter("@SchoolID",SchoolID) ,
                     new SqlParameter("@ClassID",ClassID)  ,
                      new SqlParameter("@AttFlag",Flag),
                      new SqlParameter("@AttDate",Date)                      
                };
            return Database.SqlQuery<GetGridData>("PrincipalStudentAttendance @AcaStart,@SchoolID,@ClassID,@AttFlag,@AttDate", param).ToList();
        }


        public virtual DataSet ProClassWiseAttendanceDataSet(int AcaStart, int SchoolID, string AttDate, string Type)
        {
            SqlParameter[] param = new SqlParameter[]
               {
                    new SqlParameter("@AcaStart",AcaStart),
                    new SqlParameter("@SchoolID",SchoolID),
                    new SqlParameter("@AttDate",AttDate),
                    new SqlParameter("@Type",Type)
               };

            DataSet ds = GetSPFromSql("ProClassWiseAttendance", param);
            return ds;
        }
        public virtual List<GetGridData> HODFAIEMonthlySummary(int ArgCompanyID, int ARGSession)
        {
            SqlParameter[] param = new SqlParameter[] 
                { 

                    new SqlParameter("@ArgCompanyID",ArgCompanyID),
                    new SqlParameter("@ARGSession",ARGSession)
                };
            return Database.SqlQuery<GetGridData>("HODFAIEMonthlySummary @ArgCompanyID,@ARGSession", param).ToList();
        }
        public virtual List<GetGridData> spHODSchoolWiseDetails(int ArgSchoolID, int ArgAcaStart, string ArgCriteria, string ArgFlag)
        {
            SqlParameter[] param = new SqlParameter[] 
                { 
                    new SqlParameter("@ArgSchoolID",ArgSchoolID),
                    new SqlParameter("@ArgAcaStart",ArgAcaStart),
                    new SqlParameter("@ArgCriteria",ArgCriteria)  ,
                    new SqlParameter("@ArgFlag",ArgFlag)   
                };
            return Database.SqlQuery<GetGridData>("spHODSchoolWiseDetails @ArgSchoolID,@ArgAcaStart,@ArgCriteria,@ArgFlag", param).ToList();
        }
        public virtual List<MgtFeeGridData> HODFeeDetails(string ArgFromDate, string ArgToDate, int ArgSchoolID, int ArgAcaStart, string ArgFlag, int ArgClassID, string ArgCriteria, int ArgFeeHeadID)
        {
            SqlParameter[] param = new SqlParameter[] 
                { 
                    new SqlParameter("@ArgFromDate",ArgFromDate),
                    new SqlParameter("@ArgToDate",ArgToDate),                    
                    new SqlParameter("@ArgAcaStart",ArgAcaStart),
                    new SqlParameter("@ArgSchoolID",ArgSchoolID),
                    new SqlParameter("@ArgFlag",ArgFlag) ,
                     new SqlParameter("@ArgClassID",ArgClassID),   
                      new SqlParameter("@ArgCriteria",ArgCriteria)   ,
                        new SqlParameter("@ArgFeeHeadID",ArgFeeHeadID)   
                };
            return Database.SqlQuery<MgtFeeGridData>("HODFeeDetails @ArgFromDate,@ArgToDate,@ArgAcaStart,@ArgSchoolID,@ArgFlag,@ArgClassID,@ArgCriteria,@ArgFeeHeadID", param).ToList();
        }
        public virtual List<GetGridData> HODTotalCount(int ArgAcaStart, int ArgSchoolID, string ArgCriteria)
        {
            SqlParameter[] param = new SqlParameter[] 
                { 

                    new SqlParameter("@ArgAcaStart",ArgAcaStart),
                    new SqlParameter("@ArgSchoolID",ArgSchoolID),
                    new SqlParameter("@ArgCriteria",ArgCriteria)
                };
            return Database.SqlQuery<GetGridData>("HODTotalCount @ArgAcaStart,@ArgSchoolID,@ArgCriteria", param).ToList();
        }
        public virtual List<MgtFeeGridData> SchoolFeeSummaryAnalysis(string ID, int ArgAcaStart, int ArgSchoolID, string ArgSelField, string ArgGroup)
        {
            SqlParameter[] param = new SqlParameter[] 
                { 
                    new SqlParameter("@ArgID",ID),
                    new SqlParameter("@ArgAcastart",ArgAcaStart),
                    new SqlParameter("@ArgSchoolID", ArgSchoolID),
                    new SqlParameter("@ArgSelFields", ArgSelField),
                    new SqlParameter("@ArgGroup", ArgGroup)
   
                };
            return Database.SqlQuery<MgtFeeGridData>("SchoolFeeSummaryAnalysis @ArgID,@ArgAcastart,@ArgSchoolID,@ArgSelFields,@ArgGroup", param).ToList();
        }
        #endregion

        #region Fleet

        public int FMFleetCompleteHistory(string FromMonth, string ToMonth, string FleetNo)
        {
            SqlParameter[] param = new SqlParameter[]
            {
                new SqlParameter("@FromDate",FromMonth),
                new SqlParameter("@ToDate",ToMonth),
                new SqlParameter("@FleetNo",FleetNo)
            };

            return Database.ExecuteSqlCommand("FMFleetCompleteHistory @FromDate,@ToDate,@FleetNo", param);
        }

        public virtual List<FMFleetMaster> FMFleetHistory()
        {
            SqlParameter[] param = new SqlParameter[] { };
            var dt = GetSPFromSql("FMFleetHistory", param).Tables[0].Select().ToList();
            var dataResult = (from rr in dt
                              select new FMFleetMaster()
                              {

                                  SlNo = (int)rr.ItemArray.GetValue(0),
                                  AutoID = (int)rr.ItemArray.GetValue(1),
                                  FNo = rr.ItemArray.GetValue(2).ToString(),
                                  RegNo = rr.ItemArray.GetValue(3).ToString(),
                                  RegDate = (rr.ItemArray.GetValue(4) == null || rr.ItemArray.GetValue(7).ToString() == "" ? null : (DateTime?)rr.ItemArray.GetValue(4)),
                                  FType = rr.ItemArray.GetValue(5).ToString(),
                                  FSize = rr.ItemArray.GetValue(6).ToString(),
                                  Capacity = (int)rr.ItemArray.GetValue(7),
                                  Status = rr.ItemArray.GetValue(8).ToString()
                              }).ToList();
            return dataResult;
        }

        public virtual DataTable GetStateNCountryName(int CityIdValue)
        {
            SqlParameter[] param = new SqlParameter[]
                {
                    new SqlParameter("@CityId",CityIdValue)                   
                };
            DataTable dt = GetSPFromSql("Sp_GetStateNcOuntryNameByCityId", param).Tables[0];
            return dt;
        }

        public virtual DataSet spGetFleetNo()
        {
            SqlParameter[] param = new SqlParameter[] { };

            DataSet ds = GetSPFromSql("spGetFleetNo", param);
            return ds;

        }
        public virtual List<FMKilometerDetails> FMRunningDetail(string SearchDate)
        {
            SqlParameter[] param = new SqlParameter[]
                {
                    new SqlParameter("@ArgSearchdate",SearchDate)                    
                };
            var dt = GetSPFromSql("FMRunningDetail", param).Tables[0].Select().ToList();
            var dataResult = (from rr in dt
                              select new FMKilometerDetails()
                              {
                                  FMFleetID = (int)rr.ItemArray.GetValue(0),
                                  FleetNo = rr.ItemArray.GetValue(1).ToString(),
                                  RegistrationNo = rr.ItemArray.GetValue(2).ToString(),
                                  LastKmReading = (int)rr.ItemArray.GetValue(3),
                                  LastReadingDate = rr.ItemArray.GetValue(4).ToString(),
                                  MeterReading = (int)rr.ItemArray.GetValue(5),
                                  DriverId = (int)rr.ItemArray.GetValue(6),
                                  FuelLitre = (decimal)rr.ItemArray.GetValue(7),
                                  FuelRate = (decimal)rr.ItemArray.GetValue(8),
                                  SlNo = (int)rr.ItemArray.GetValue(9)
                              }).ToList();
            return dataResult;
        }

        #endregion

        #region 31. Lesson Plan
        public List<TempTeacherPermission> FillLPTeacherPermission(int AcaStart, int SchoolID, int intUID)
        {
            SqlParameter[] param = new SqlParameter[] 
                            { 
                                new SqlParameter("@UID",intUID),   
                                new SqlParameter("@AcaStart",AcaStart),
                                new SqlParameter("@SchoolID",SchoolID),                                                     
                            };

            return Database.SqlQuery<TempTeacherPermission>("LPTeacherPermissionDetails @UID,@AcaStart, @SchoolID", param).ToList();
        }

        public int FillLPWorkingDays(string StartDate, string EndDate, int ClassID, int SectionID, int SchoolID)
        {
            int intCount = 0;
            SqlParameter[] param = new SqlParameter[] 
                            { 
                                new SqlParameter("@StartDate",StartDate),   
                                new SqlParameter("@EndDate",EndDate),   
                                new SqlParameter("@ClassID",ClassID),   
                                new SqlParameter("@SectionID",SectionID),   
                                new SqlParameter("@SchoolID",SchoolID),                                                     
                            };

            intCount = Database.SqlQuery<int>("LPWorkingDaysExcludeHoliday @StartDate,@EndDate, @ClassID,@SectionID,@SchoolID", param).ToList()[0];
            return intCount;
        }

        public List<TempLessonPlanExecute> FillLPLessonPlanExcute(int intUID, string StartDate, string EndDate, int intAcastart, int intSchoolID, string Type)
        {
            SqlParameter[] param = new SqlParameter[] 
                            { 
                                new SqlParameter("@UID",intUID),   
                                new SqlParameter("@StartDate",StartDate),   
                                new SqlParameter("@EndDate",EndDate),                                   
                                new SqlParameter("@Type",Type),                                                     
                                new SqlParameter("@AcaStart",intAcastart),   
                                new SqlParameter("@SchoolID",intSchoolID),                                                     
                            };

            return Database.SqlQuery<TempLessonPlanExecute>("LPLessonPlanExecuteDetails @UID,@StartDate,@EndDate, @Type,@AcaStart,@SchoolID", param).ToList();

        }

        public List<TempLPReviewEntry> FillLPReview(int intUID, int intClassID, int intSectionID, int intSubjectID, string StartDate, string EndDate, int intAcastart, int intSchoolID)
        {
            SqlParameter[] param = new SqlParameter[] 
                            { 
                                new SqlParameter("@UID",intUID),   
                                new SqlParameter("@ClassID",intClassID),   
                                new SqlParameter("@SectionID",intSectionID),   
                                new SqlParameter("@SubjectID",intSubjectID),   
                                new SqlParameter("@StartDate",StartDate),   
                                new SqlParameter("@EndDate",EndDate),                                                                                                                    
                                new SqlParameter("@AcaStart",intAcastart),   
                                new SqlParameter("@SchoolID",intSchoolID),                                                     
                            };

            return Database.SqlQuery<TempLPReviewEntry>("LPReviewEntryDetails @UID,@ClassID,@SectionID,@SubjectID,@StartDate,@EndDate,@AcaStart,@SchoolID", param).ToList();

        }

        public int LPUpdateNextSession(int intAcaStart, int intSchoolID, int intUserID, string Type)
        {
            SqlParameter[] Param = new SqlParameter[]
            {                
                      
                    new SqlParameter("@intAcaStart",intAcaStart),
                    new SqlParameter("@intSchoolID",intSchoolID), 
                    new SqlParameter("@intUserID",intUserID),  
                    new SqlParameter("@Type",Type),  
            };
            return Database.ExecuteSqlCommand("EXEC LPUpdatetoNextSession @intAcaStart,@intSchoolID,@intUserID,@Type", Param);
        }
        #endregion

        #region MYDashboard

        public List<MyDashboardPending> DashboardPendingTask(int ArgSchoolID, int ArgAcaStart, int ArgUID, string ArgSessionID)
        {
            SqlParameter[] param = new SqlParameter[]
            {
                new SqlParameter("@ArgAcaStart",ArgAcaStart),
                new SqlParameter("@ArgSchoolID",ArgSchoolID),
                new SqlParameter("@ArgUID",ArgUID),
                new SqlParameter("@ArgSessionID",ArgSessionID)
            };
            return Database.SqlQuery<MyDashboardPending>("DashboardPendingTask @ArgAcaStart,@ArgSchoolID,@ArgUID,@ArgSessionID", param).ToList();
        }

        #endregion

        #region Mobile

        public List<CampusCare.RestServiceImpl.MyScheduled> OnlineLiveSubjectClass(int AcaStart, int UID, int StudentID, string Flag)
        {
            SqlParameter[] param = new SqlParameter[]
                            {
                                new SqlParameter("@AcaStart",AcaStart),
                                new SqlParameter("@UID",UID),
                                new SqlParameter("@StudentID",StudentID),
                                new SqlParameter("@Flag",Flag)
                            };
            return Database.SqlQuery<CampusCare.RestServiceImpl.MyScheduled>("spMobieOnlineLiveSubjectClass @AcaStart,@UID,@StudentID,@Flag", param).ToList();
        }

        public void SISchoolConsolodatedDetailMobile(int AcaStart, int SchoolID, int ModuleID, string SessionID)
        {
            SqlParameter[] param = new SqlParameter[]
                    {

                    new SqlParameter("@ArgAcaStart",AcaStart),
                    new SqlParameter("@ArgSchoolID",SchoolID),
                    new SqlParameter("@ArgModuleID",ModuleID),
                    new SqlParameter("@ArgSessionID",SessionID),
                    };

            Database.ExecuteSqlCommand("SchoolConsolodatedDetail @ArgAcaStart,@ArgSchoolID,@ArgModuleID,@ArgSessionID", param);
        }

        public virtual List<CampusCare.RestServiceImpl.SearchRecords> SearchQuestion(string ArgSearch)
        {
            SqlParameter[] param = new SqlParameter[]
                {
                    new SqlParameter("@Searchtext",ArgSearch)
                };
            return Database.SqlQuery<CampusCare.RestServiceImpl.SearchRecords>("spSearchVoiceQuestion @Searchtext", param).ToList();
        }


        public virtual List<GetGridData> PrincipalTotalCount(int ArgAcaStart, int ArgSchoolID, string ArgCriteria)
        {
            SqlParameter[] param = new SqlParameter[]
                {
                    new SqlParameter("@ArgAcaStart",ArgAcaStart),
                    new SqlParameter("@ArgSchoolID",ArgSchoolID),
                    new SqlParameter("@ArgCriteria",ArgCriteria)
                };
            return Database.SqlQuery<GetGridData>("PrincipalTotalCount @ArgAcaStart,@ArgSchoolID,@ArgCriteria", param).ToList();
        }


        public virtual List<ModuleDetails> GetModuleDetails(int ArgAcastart, int UID, int SchooID, int ModuleID, DateTime date)
        {
            SqlParameter[] param = new SqlParameter[]
                        {
                                 new SqlParameter("@Acastart",ArgAcastart),
                                new SqlParameter("@UID",UID),
                                new SqlParameter("@SchoolID",SchooID),
                                new SqlParameter("@ModuleID",ModuleID),
                                new SqlParameter("@Date",date),
                        };
            return Database.SqlQuery<ModuleDetails>("GetModuleDetails @Acastart,@UID,@SchoolID,@ModuleID,@Date", param).ToList();
        }

        public virtual List<ModuleSubDetails> GetModuleSubDetails(int ArgAcastart, int UID, int SchooID, int ModuleID, DateTime date, string Flag)
        {
            SqlParameter[] param = new SqlParameter[]
                        {
                                 new SqlParameter("@Acastart",ArgAcastart),
                                new SqlParameter("@UID",UID),
                                new SqlParameter("@SchoolID",SchooID),
                                new SqlParameter("@ModuleID",ModuleID),
                                new SqlParameter("@Date",date),
                                new SqlParameter("@Flag",Flag),
                        };
            return Database.SqlQuery<ModuleSubDetails>("GetModuleSubDetails @Acastart,@UID,@SchoolID,@ModuleID,@Date,@Flag", param).ToList();
        }


        #endregion

        #region Zenda Integration

        public virtual List<StudentData> ZendaPaymentIntegration(string ArgFlag, string ArgRegID, int ArgSchoolID)
        {
            SqlParameter[] param = new SqlParameter[]
                {
                    new SqlParameter("@ArgFlag",ArgFlag),
                    new SqlParameter("@ArgRegID",ArgRegID),
                    new SqlParameter("@ArgSchoolID",ArgSchoolID)
                };
            return Database.SqlQuery<StudentData>("ZendaPaymentIntegration @ArgFlag,@ArgRegID,@ArgSchoolID", param).ToList();
        }

        public virtual List<InvoiceDataTemp> ZendaPaymentIntegrationInvoice(string ArgFlag, string ArgRegID, int ArgSchoolID)
        {
            SqlParameter[] param = new SqlParameter[]
                {
                    new SqlParameter("@ArgFlag",ArgFlag),
                    new SqlParameter("@ArgRegID",ArgRegID),
                    new SqlParameter("@ArgSchoolID",ArgSchoolID)
                };
            return Database.SqlQuery<InvoiceDataTemp>("ZendaPaymentIntegration @ArgFlag,@ArgRegID,@ArgSchoolID", param).ToList();
        }


        public void ZendaFeePostOnline(int AutoID, int StudentID)
        {
            SqlParameter[] param = new SqlParameter[]
            {
                new SqlParameter("@ArgZPAMID",AutoID),
                new SqlParameter("@ArgStudentID",StudentID)
            };
            Database.ExecuteSqlCommand("ZendaFeePostOnline @ArgZPAMID, @ArgStudentID", param);
        }

        public virtual DataSet ZendaGetSession(int ArgSchoolID)
        {
            SqlParameter[] param = new SqlParameter[] {
                    new SqlParameter("@ArgSchoolID",ArgSchoolID),

            };

            DataSet ds = GetSPFromSql("ZendaGetSession", param);
            return ds;

        }
        #endregion
    }
    #region SMSGateway

    public class SMSGatewayJsonResponse
    {
        public string status { get; set; }
        public int smsBalance { get; set; }
    }
    #endregion 


}
